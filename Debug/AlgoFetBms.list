
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c35c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c878  0800c878  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c878  0800c878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c880  0800c880  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c880  0800c880  0001c880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c884  0800c884  0001c884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001038c  200000b4  0800c93c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010440  0800c93c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221c5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054e8  00000000  00000000  000422a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf0  00000000  00000000  00047798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00049488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ee4  00000000  00000000  0004af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028bf7  00000000  00000000  00072e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2873  00000000  00000000  0009ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e27e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079fc  00000000  00000000  0018e2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c514 	.word	0x0800c514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800c514 	.word	0x0800c514

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000d6c:	f240 1301 	movw	r3, #257	; 0x101
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <Pack_BAT_BMS_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_OvrVIEW_can_codegen(BAT_BMS_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e007      	b.n	8000d9c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x20>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	73fa      	strb	r2, [r7, #15]
 8000d92:	461a      	mov	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	715a      	strb	r2, [r3, #5]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d802      	bhi.n	8000da8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x2c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	d9f1      	bls.n	8000d8c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_StateReqSrc & (0xFFU));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	795a      	ldrb	r2, [r3, #5]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_bms_PackState & (0xFFU));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	799a      	ldrb	r2, [r3, #6]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	719a      	strb	r2, [r3, #6]

  cframe->MsgId = BAT_BMS_OvrVIEW_CANID;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_OvrVIEW_DLC;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_OvrVIEW_IDE;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_OvrVIEW_CANID;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	001ff610 	.word	0x001ff610

08000dec <Pack_BAT_BMS_ExtTemp_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_ExtTemp_can_codegen(BAT_BMS_ExtTemp_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_ExtTemp_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e007      	b.n	8000e0c <Pack_BAT_BMS_ExtTemp_can_codegen+0x20>
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	73fa      	strb	r2, [r7, #15]
 8000e02:	461a      	mov	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	715a      	strb	r2, [r3, #5]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d802      	bhi.n	8000e18 <Pack_BAT_BMS_ExtTemp_can_codegen+0x2c>
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9f1      	bls.n	8000dfc <Pack_BAT_BMS_ExtTemp_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_ext_temp1 & (0xFFU));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	795a      	ldrb	r2, [r3, #5]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_bms_ext_temp1 >> 8) & (0xFFU));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	799a      	ldrb	r2, [r3, #6]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_bms_ext_temp2 & (0xFFU));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	79da      	ldrb	r2, [r3, #7]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_bms_ext_temp2 >> 8) & (0xFFU));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	7a1a      	ldrb	r2, [r3, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_BMS_ExtTemp_CANID;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_ExtTemp_DLC;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2204      	movs	r2, #4
 8000e72:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_ExtTemp_IDE;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_ExtTemp_CANID;
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	001ff611 	.word	0x001ff611

08000e8c <Pack_BAT_AFE_vBRICK_A_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_A_can_codegen(BAT_AFE_vBRICK_A_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_A_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e007      	b.n	8000eac <Pack_BAT_AFE_vBRICK_A_can_codegen+0x20>
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	73fa      	strb	r2, [r7, #15]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	715a      	strb	r2, [r3, #5]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b07      	cmp	r3, #7
 8000eb0:	d802      	bhi.n	8000eb8 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x2c>
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d9f1      	bls.n	8000e9c <Pack_BAT_AFE_vBRICK_A_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick01 & (0xFFU));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	795a      	ldrb	r2, [r3, #5]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick01 >> 8) & (0xFFU));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	799a      	ldrb	r2, [r3, #6]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick02 & (0xFFU));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	79da      	ldrb	r2, [r3, #7]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	885b      	ldrh	r3, [r3, #2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick02 >> 8) & (0xFFU));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	7a1a      	ldrb	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick03 & (0xFFU));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	7a5a      	ldrb	r2, [r3, #9]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick03 >> 8) & (0xFFU));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	7a9a      	ldrb	r2, [r3, #10]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick04 & (0xFFU));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	7ada      	ldrb	r2, [r3, #11]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	88db      	ldrh	r3, [r3, #6]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick04 >> 8) & (0xFFU));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	7b1a      	ldrb	r2, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_A_CANID;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
 8000f5c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_A_DLC;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2208      	movs	r2, #8
 8000f62:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_A_IDE;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_A_CANID;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	001ff710 	.word	0x001ff710

08000f7c <Pack_BAT_AFE_vBRICK_B_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_B_can_codegen(BAT_AFE_vBRICK_B_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_B_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e007      	b.n	8000f9c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x20>
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	73fa      	strb	r2, [r7, #15]
 8000f92:	461a      	mov	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	715a      	strb	r2, [r3, #5]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d802      	bhi.n	8000fa8 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x2c>
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d9f1      	bls.n	8000f8c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick05 & (0xFFU));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	795a      	ldrb	r2, [r3, #5]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick05 >> 8) & (0xFFU));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	799a      	ldrb	r2, [r3, #6]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick06 & (0xFFU));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	79da      	ldrb	r2, [r3, #7]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick06 >> 8) & (0xFFU));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	7a1a      	ldrb	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	885b      	ldrh	r3, [r3, #2]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick07 & (0xFFU));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	7a5a      	ldrb	r2, [r3, #9]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	889b      	ldrh	r3, [r3, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick07 >> 8) & (0xFFU));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	7a9a      	ldrb	r2, [r3, #10]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	889b      	ldrh	r3, [r3, #4]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick08 & (0xFFU));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	7ada      	ldrb	r2, [r3, #11]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	88db      	ldrh	r3, [r3, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b2da      	uxtb	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick08 >> 8) & (0xFFU));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	7b1a      	ldrb	r2, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	88db      	ldrh	r3, [r3, #6]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b2da      	uxtb	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_B_CANID;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
 800104c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_B_DLC;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2208      	movs	r2, #8
 8001052:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_B_IDE;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_B_CANID;
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	001ff711 	.word	0x001ff711

0800106c <Pack_BAT_AFE_vBRICK_C_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_C_can_codegen(BAT_AFE_vBRICK_C_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_C_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e007      	b.n	800108c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x20>
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	73fa      	strb	r2, [r7, #15]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	715a      	strb	r2, [r3, #5]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d802      	bhi.n	8001098 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x2c>
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d9f1      	bls.n	800107c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick09 & (0xFFU));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	795a      	ldrb	r2, [r3, #5]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick09 >> 8) & (0xFFU));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	799a      	ldrb	r2, [r3, #6]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick10 & (0xFFU));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	79da      	ldrb	r2, [r3, #7]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	885b      	ldrh	r3, [r3, #2]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick10 >> 8) & (0xFFU));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	7a1a      	ldrb	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	885b      	ldrh	r3, [r3, #2]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick11 & (0xFFU));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	7a5a      	ldrb	r2, [r3, #9]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick11 >> 8) & (0xFFU));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	7a9a      	ldrb	r2, [r3, #10]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick12 & (0xFFU));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7ada      	ldrb	r2, [r3, #11]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	88db      	ldrh	r3, [r3, #6]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick12 >> 8) & (0xFFU));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	7b1a      	ldrb	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_C_CANID;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
 800113c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_C_DLC;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_C_IDE;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_C_CANID;
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	001ff712 	.word	0x001ff712

0800115c <Pack_BAT_AFE_vBRICK_D_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_D_can_codegen(BAT_AFE_vBRICK_D_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_D_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e007      	b.n	800117c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x20>
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	73fa      	strb	r2, [r7, #15]
 8001172:	461a      	mov	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	715a      	strb	r2, [r3, #5]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d802      	bhi.n	8001188 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x2c>
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9f1      	bls.n	800116c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick13 & (0xFFU));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	795a      	ldrb	r2, [r3, #5]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick13 >> 8) & (0xFFU));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	799a      	ldrb	r2, [r3, #6]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick14 & (0xFFU));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	79da      	ldrb	r2, [r3, #7]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	885b      	ldrh	r3, [r3, #2]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick14 >> 8) & (0xFFU));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	7a1a      	ldrb	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	885b      	ldrh	r3, [r3, #2]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_AFE_vBRICK_D_CANID;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
 80011dc:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_D_DLC;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2204      	movs	r2, #4
 80011e2:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_D_IDE;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_D_CANID;
 80011ea:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	001ff713 	.word	0x001ff713

080011fc <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e007      	b.n	800121c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	73fa      	strb	r2, [r7, #15]
 8001212:	461a      	mov	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	715a      	strb	r2, [r3, #5]
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d802      	bhi.n	8001228 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b07      	cmp	r3, #7
 8001226:	d9f1      	bls.n	800120c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	795a      	ldrb	r2, [r3, #5]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4313      	orrs	r3, r2
 8001232:	b2da      	uxtb	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	799a      	ldrb	r2, [r3, #6]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	4313      	orrs	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	79da      	ldrb	r2, [r3, #7]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	885b      	ldrh	r3, [r3, #2]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	7a1a      	ldrb	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	001ff810 	.word	0x001ff810

08001294 <Pack_BAT_GAUGE_ViT_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_ViT_can_codegen(BAT_GAUGE_ViT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_ViT_DLC) && (i < 8); cframe->Data[i++] = 0);
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e007      	b.n	80012b4 <Pack_BAT_GAUGE_ViT_can_codegen+0x20>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	73fa      	strb	r2, [r7, #15]
 80012aa:	461a      	mov	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	715a      	strb	r2, [r3, #5]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d802      	bhi.n	80012c0 <Pack_BAT_GAUGE_ViT_can_codegen+0x2c>
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	d9f1      	bls.n	80012a4 <Pack_BAT_GAUGE_ViT_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_vPack & (0xFFU));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	795a      	ldrb	r2, [r3, #5]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_gauge_vPack >> 8) & (0xFFU));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	799a      	ldrb	r2, [r3, #6]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_iPack & (0xFFU));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	79da      	ldrb	r2, [r3, #7]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_iPack >> 8) & (0xFFU));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7a1a      	ldrb	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	b21b      	sxth	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_gauge_tPack & (0xFFU));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	7a5a      	ldrb	r2, [r3, #9]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_gauge_tPack >> 8) & (0xFFU));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7a9a      	ldrb	r2, [r3, #10]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b2da      	uxtb	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	729a      	strb	r2, [r3, #10]

  cframe->MsgId = BAT_GAUGE_ViT_CANID;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
 8001340:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_ViT_DLC;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2206      	movs	r2, #6
 8001346:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_ViT_IDE;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2201      	movs	r2, #1
 800134c:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_ViT_CANID;
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	001ff820 	.word	0x001ff820

08001360 <bq76952_init>:
extern int16_t bq76952_TS3config(void);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8001366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136a:	80fb      	strh	r3, [r7, #6]
  do
  {
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <bq76952_init+0x7c>)
 800136e:	f249 2234 	movw	r2, #37428	; 0x9234
 8001372:	805a      	strh	r2, [r3, #2]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <bq76952_init+0x7c>)
 8001376:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 800137a:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.len = 4;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <bq76952_init+0x7c>)
 800137e:	2204      	movs	r2, #4
 8001380:	701a      	strb	r2, [r3, #0]
    AFE_RAMwrite.vCellModecmd = 0x03C3;           //0x03C3 for 6S | 0x0303 for 4S
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <bq76952_init+0x80>)
 8001384:	f240 32c3 	movw	r2, #963	; 0x3c3
 8001388:	801a      	strh	r2, [r3, #0]
    AFE_RAMwrite.FETs_CONTROL = 0x0;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <bq76952_init+0x80>)
 800138c:	2200      	movs	r2, #0
 800138e:	805a      	strh	r2, [r3, #2]
    AFE_RAMwrite.enabledProtectionsA = 0xBC;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <bq76952_init+0x80>)
 8001392:	22bc      	movs	r2, #188	; 0xbc
 8001394:	809a      	strh	r2, [r3, #4]
    AFE_RAMwrite.enabledProtectionsB = 0xF7;      //(Also sets OTC, OTD and OTF as 1)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <bq76952_init+0x80>)
 8001398:	22f7      	movs	r2, #247	; 0xf7
 800139a:	80da      	strh	r2, [r3, #6]
    AFE_RAMwrite.prechargeStartVoltage = 0x0A8C;  //2700mV
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <bq76952_init+0x80>)
 800139e:	f640 228c 	movw	r2, #2700	; 0xa8c
 80013a2:	811a      	strh	r2, [r3, #8]
    AFE_RAMwrite.prechargeStopVoltage = 0x0AF0;   //2800mV
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <bq76952_init+0x80>)
 80013a6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80013aa:	815a      	strh	r2, [r3, #10]
    AFE_RAMwrite.TS3config = 0x07;                //Default for TS3: 0X07 | Default for TS1: 0x07
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <bq76952_init+0x80>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	819a      	strh	r2, [r3, #12]

    bq76952_vCellMode();
 80013b2:	f000 f9bd 	bl	8001730 <bq76952_vCellMode>
    bq76952_FETs_Control();
 80013b6:	f000 f98b 	bl	80016d0 <bq76952_FETs_Control>
    bq76952_TS3config();
 80013ba:	f000 f9eb 	bl	8001794 <bq76952_TS3config>

        //bq76952_get_device_number(&device_number);
        //RESET #Resets the Bq769x2 Registers
        bq76952_AFE_reset();
 80013be:	f000 f927 	bl	8001610 <bq76952_AFE_reset>

        // Enter config update mode
        bq76952_set_config_update();
 80013c2:	f000 f971 	bl	80016a8 <bq76952_set_config_update>

        // TODO: Check if CFGUPDATE bit is SET

        //
        // Leave Reg1 and Reg2 mode in present state when entering deep-sleep state
        bq76952_set_powercfg(&TsBmsPower_cfg_t);
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <bq76952_init+0x7c>)
 80013c8:	f000 f939 	bl	800163e <bq76952_set_powercfg>
    //OCCThreshold --> 0x05				#Rsense is 1mohm. Unit is 2mV, so 10mV means a threshold of 10A
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    ret_val = SYS_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	80fb      	strh	r3, [r7, #6]
  } while(false);

  return ret_val;
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000d0 	.word	0x200000d0
 80013e0:	200000d8 	.word	0x200000d8

080013e4 <bq76952_FETs_SleepDisable>:

//------------------------------------------------------------------------------
// FET CONTROL COMMANDS
static int16_t bq76952_FETs_SleepDisable(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  // Puts the FETs in performance mode
  int16_t ret_val = SYS_ERR;
 80013ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ee:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SLEEP_DISABLE))
 80013f0:	219a      	movs	r1, #154	; 0x9a
 80013f2:	203e      	movs	r0, #62	; 0x3e
 80013f4:	f000 fafa 	bl	80019ec <bq76952_write_sub_cmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <bq76952_FETs_SleepDisable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	e000      	b.n	8001406 <bq76952_FETs_SleepDisable+0x22>
      break;
 8001404:	bf00      	nop
  } while(false);
  return ret_val;
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <bq76952_FETs_enable>:
static int16_t bq76952_FETs_enable(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 800141e:	2122      	movs	r1, #34	; 0x22
 8001420:	203e      	movs	r0, #62	; 0x3e
 8001422:	f000 fae3 	bl	80019ec <bq76952_write_sub_cmd>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <bq76952_FETs_enable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	e000      	b.n	8001434 <bq76952_FETs_enable+0x22>
      break;
 8001432:	bf00      	nop
  } while(false);
  return ret_val;
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <bq76952_allFETs_on>:
static int16_t bq76952_allFETs_on(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 800144c:	2196      	movs	r1, #150	; 0x96
 800144e:	203e      	movs	r0, #62	; 0x3e
 8001450:	f000 facc 	bl	80019ec <bq76952_write_sub_cmd>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <bq76952_allFETs_on+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	e000      	b.n	8001462 <bq76952_allFETs_on+0x22>
      break;
 8001460:	bf00      	nop
  } while(false);
  return ret_val;
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <bq76952_allFETs_off>:
static int16_t bq76952_allFETs_off(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 800147a:	2195      	movs	r1, #149	; 0x95
 800147c:	203e      	movs	r0, #62	; 0x3e
 800147e:	f000 fab5 	bl	80019ec <bq76952_write_sub_cmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <bq76952_allFETs_off+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	e000      	b.n	8001490 <bq76952_allFETs_off+0x22>
      break;
 800148e:	bf00      	nop
  } while(false);
  return ret_val;
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <bq76952_dischargeOFF>:
static int16_t bq76952_dischargeOFF(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  //Disable DSG and PDSG FET drivers
  int16_t ret_val = SYS_ERR;
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DSG_PDSG_OFF))
 80014a8:	2193      	movs	r1, #147	; 0x93
 80014aa:	203e      	movs	r0, #62	; 0x3e
 80014ac:	f000 fa9e 	bl	80019ec <bq76952_write_sub_cmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <bq76952_dischargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	e000      	b.n	80014be <bq76952_dischargeOFF+0x22>
      break;
 80014bc:	bf00      	nop
  } while(false);
  return ret_val;
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <bq76952_chargeOFF>:
static int16_t bq76952_chargeOFF(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
  //Disable CHG and PCHG FET drivers
  int16_t ret_val = SYS_ERR;
 80014d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d4:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, CHG_PCHG_OFF))
 80014d6:	2194      	movs	r1, #148	; 0x94
 80014d8:	203e      	movs	r0, #62	; 0x3e
 80014da:	f000 fa87 	bl	80019ec <bq76952_write_sub_cmd>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <bq76952_chargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	e000      	b.n	80014ec <bq76952_chargeOFF+0x22>
      break;
 80014ea:	bf00      	nop
  } while(false);
  return ret_val;
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <bq76952_FETs_ON>:


extern int16_t bq76952_FETs_ON(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  int8_t ret_val = SYS_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001502:	f7ff ff86 	bl	8001412 <bq76952_FETs_enable>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d112      	bne.n	8001532 <bq76952_FETs_ON+0x3a>
    {
      break;
    }
    HAL_Delay(50);
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f002 f929 	bl	8003764 <HAL_Delay>
    if(SYS_OK!= bq76952_FETs_SleepDisable())
 8001512:	f7ff ff67 	bl	80013e4 <bq76952_FETs_SleepDisable>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <bq76952_FETs_ON+0x3e>
    {
      break;
    }
    HAL_Delay(50);
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f002 f921 	bl	8003764 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_on())
 8001522:	f7ff ff8d 	bl	8001440 <bq76952_allFETs_on>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <bq76952_FETs_ON+0x42>
    {
      break;
    }
    ret_val = SYS_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	e004      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 8001532:	bf00      	nop
 8001534:	e002      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 8001536:	bf00      	nop
 8001538:	e000      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 800153a:	bf00      	nop
  }while(false);
  return ret_val;
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <bq76952_FETs_OFF>:
extern int16_t bq76952_FETs_OFF(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
  //To switch off the FETs whenever required
  int8_t ret_val = SYS_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001554:	f7ff ff5d 	bl	8001412 <bq76952_FETs_enable>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10a      	bne.n	8001574 <bq76952_FETs_OFF+0x2a>
    {
      break;
    }
    HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	; 0x32
 8001560:	f002 f900 	bl	8003764 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_off())
 8001564:	f7ff ff83 	bl	800146e <bq76952_allFETs_off>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d104      	bne.n	8001578 <bq76952_FETs_OFF+0x2e>
    {
      break;
    }
    ret_val = SYS_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e002      	b.n	800157a <bq76952_FETs_OFF+0x30>
      break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <bq76952_FETs_OFF+0x30>
      break;
 8001578:	bf00      	nop
  }while(false);
  return ret_val;
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	b21b      	sxth	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <bq76952_Charge>:

extern int16_t bq76952_Charge(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  //Takes the BMS to Charging mode
  uint8_t ret_val = SYS_ERR;
 800158e:	23ff      	movs	r3, #255	; 0xff
 8001590:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001592:	f7ff ff3e 	bl	8001412 <bq76952_FETs_enable>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <bq76952_Charge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 800159c:	f7ff ff50 	bl	8001440 <bq76952_allFETs_on>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <bq76952_Charge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_dischargeOFF())
 80015a6:	f7ff ff79 	bl	800149c <bq76952_dischargeOFF>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d106      	bne.n	80015be <bq76952_Charge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e004      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015b6:	bf00      	nop
 80015b8:	e002      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015ba:	bf00      	nop
 80015bc:	e000      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015be:	bf00      	nop
  }while(false);
  return ret_val;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	b21b      	sxth	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <bq76952_Discharge>:
extern int16_t bq76952_Discharge(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  //Takes the BMS to Discharging mode
  uint8_t ret_val = SYS_ERR;
 80015d2:	23ff      	movs	r3, #255	; 0xff
 80015d4:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 80015d6:	f7ff ff1c 	bl	8001412 <bq76952_FETs_enable>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10c      	bne.n	80015fa <bq76952_Discharge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 80015e0:	f7ff ff2e 	bl	8001440 <bq76952_allFETs_on>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <bq76952_Discharge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_chargeOFF())
 80015ea:	f7ff ff6e 	bl	80014ca <bq76952_chargeOFF>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <bq76952_Discharge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	e004      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 8001602:	bf00      	nop
  }while(false);
  return ret_val;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	b21b      	sxth	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <bq76952_AFE_reset>:
  HAL_Delay(100);
}
//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76952_AFE_reset(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 800161c:	2112      	movs	r1, #18
 800161e:	203e      	movs	r0, #62	; 0x3e
 8001620:	f000 f9e4 	bl	80019ec <bq76952_write_sub_cmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <bq76952_AFE_reset+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	e000      	b.n	8001632 <bq76952_AFE_reset+0x22>
      break;
 8001630:	bf00      	nop
  } while(false);
  return ret_val;
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <bq76952_set_powercfg>:

static int16_t bq76952_set_powercfg(TsBmsPower_cfg *pTsBmsPower_cfg_t)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    //PowerConfig --> 0x2D80   #DPSLP_LDO bit -> 1

    int16_t ret_val = SYS_ERR;
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	81fb      	strh	r3, [r7, #14]
    do
    {
        //if(SYS_OK != bq76952_write_to_register(SUB_CMD_REG_LSB_ADDR, pTsBmsPower_cfg_t->buffer, pTsBmsPower_cfg_t->len))
        {
            break;
 800164c:	bf00      	nop
        }
    } while (false);
    ret_val = SYS_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	81fb      	strh	r3, [r7, #14]
    return ret_val;
 8001652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <bq76952_get_device_number>:

extern int16_t bq76952_get_device_number(uint16_t *pDev_num)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
    int16_t ret_val = SYS_ERR;
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	81fb      	strh	r3, [r7, #14]
    do
    {
      if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 8001670:	2101      	movs	r1, #1
 8001672:	203e      	movs	r0, #62	; 0x3e
 8001674:	f000 f9ba 	bl	80019ec <bq76952_write_sub_cmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10b      	bne.n	8001696 <bq76952_get_device_number+0x34>
      {
        break;
      }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pDev_num, 2))
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2202      	movs	r2, #2
 8001682:	4619      	mov	r1, r3
 8001684:	2040      	movs	r0, #64	; 0x40
 8001686:	f000 fa37 	bl	8001af8 <bq76952_read_sub_cmd_data_buffer>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <bq76952_get_device_number+0x38>
    {
      //pDev_num= *pDev_num;
      break;
    }
    ret_val = SYS_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	e002      	b.n	800169c <bq76952_get_device_number+0x3a>
        break;
 8001696:	bf00      	nop
 8001698:	e000      	b.n	800169c <bq76952_get_device_number+0x3a>
      break;
 800169a:	bf00      	nop
  } while(false);
  return ret_val;
 800169c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <bq76952_set_config_update>:
  ret_val = SYS_OK;
  return ret_val;
}

static int16_t bq76952_set_config_update(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	80fb      	strh	r3, [r7, #6]
    do
    {
        if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SET_CFGUPDATE))
 80016b4:	2190      	movs	r1, #144	; 0x90
 80016b6:	203e      	movs	r0, #62	; 0x3e
 80016b8:	f000 f998 	bl	80019ec <bq76952_write_sub_cmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
        {
            break;
        }
    } while (false);
    ret_val = SYS_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	80fb      	strh	r3, [r7, #6]
    return ret_val;
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bq76952_FETs_Control>:
  return ret_val;
}

/*------------------RAM Register Commands-----------------------------*/
extern int16_t bq76952_FETs_Control(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  //To control the FETs with MCU only
  uint16_t data=0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	80bb      	strh	r3, [r7, #4]
  int16_t ret_val = SYS_ERR;
 80016da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016de:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_RAM_register(FET_CONTROL, AFE_RAMwrite.FETs_CONTROL, 1))
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <bq76952_FETs_Control+0x5c>)
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	2097      	movs	r0, #151	; 0x97
 80016ea:	f000 f885 	bl	80017f8 <bq76952_write_RAM_register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10f      	bne.n	8001714 <bq76952_FETs_Control+0x44>
    {
      break;
    }
    if(SYS_OK != bq76952_read_RAM_register(FET_CONTROL, &data))
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	2097      	movs	r0, #151	; 0x97
 80016fa:	f000 f8ef 	bl	80018dc <bq76952_read_RAM_register>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <bq76952_FETs_Control+0x48>
    {
      break;
    }
    if(data!= AFE_RAMwrite.FETs_CONTROL)
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <bq76952_FETs_Control+0x5c>)
 8001706:	885a      	ldrh	r2, [r3, #2]
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d106      	bne.n	800171c <bq76952_FETs_Control+0x4c>
    {
      break;
    }
    ret_val = SYS_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	80fb      	strh	r3, [r7, #6]
 8001712:	e004      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 8001714:	bf00      	nop
 8001716:	e002      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 800171c:	bf00      	nop
  } while(false);

  return ret_val;
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000d8 	.word	0x200000d8

08001730 <bq76952_vCellMode>:
extern int16_t bq76952_vCellMode (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 800173c:	2300      	movs	r3, #0
 800173e:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(VCellMode, AFE_RAMwrite.vCellModecmd, 2))
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <bq76952_vCellMode+0x60>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4619      	mov	r1, r3
 8001748:	f249 3004 	movw	r0, #37636	; 0x9304
 800174c:	f000 f854 	bl	80017f8 <bq76952_write_RAM_register>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d110      	bne.n	8001778 <bq76952_vCellMode+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(VCellMode, &data))
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	f249 3004 	movw	r0, #37636	; 0x9304
 800175e:	f000 f8bd 	bl	80018dc <bq76952_read_RAM_register>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <bq76952_vCellMode+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.vCellModecmd)
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <bq76952_vCellMode+0x60>)
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d106      	bne.n	8001780 <bq76952_vCellMode+0x50>
    {
      break;
    }
      ret_val = SYS_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	e004      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 8001778:	bf00      	nop
 800177a:	e002      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 8001780:	bf00      	nop
  }while(false);
  return ret_val;
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000d8 	.word	0x200000d8

08001794 <bq76952_TS3config>:
    ret_val = SYS_OK;
  }while(false);
  return ret_val;
}
extern int16_t bq76952_TS3config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(PrechargeStopVoltage, AFE_RAMwrite.TS3config, 1))
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <bq76952_TS3config+0x60>)
 80017a6:	899b      	ldrh	r3, [r3, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	f249 300c 	movw	r0, #37644	; 0x930c
 80017b0:	f000 f822 	bl	80017f8 <bq76952_write_RAM_register>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d110      	bne.n	80017dc <bq76952_TS3config+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(PrechargeStopVoltage, &data))
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	f249 300c 	movw	r0, #37644	; 0x930c
 80017c2:	f000 f88b 	bl	80018dc <bq76952_read_RAM_register>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <bq76952_TS3config+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.TS3config)
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <bq76952_TS3config+0x60>)
 80017ce:	899a      	ldrh	r2, [r3, #12]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d106      	bne.n	80017e4 <bq76952_TS3config+0x50>
    {
      break;
    }ret_val = SYS_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	e004      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017e4:	bf00      	nop
  }while(false);
  return ret_val;
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000d8 	.word	0x200000d8

080017f8 <bq76952_write_RAM_register>:
static int16_t bq76952_write_RAM_register (uint16_t reg_address, uint16_t cmd, uint8_t datalen)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	70fb      	strb	r3, [r7, #3]
  //Writes to RAM Register
  uint16_t TX_Buffer;
  uint16_t ret_val = SYS_ERR;
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_Buff[2] = {0x00, 0x00};
 8001810:	2300      	movs	r3, #0
 8001812:	823b      	strh	r3, [r7, #16]
  uint8_t TX_RegData[4] = {0x00, 0x00, 0x00, 0x00};
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  TX_RegData[0] = reg_address & 0xff;
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_address >> 8) & 0xff;
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = cmd & 0xff; //1st byte of data
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	73bb      	strb	r3, [r7, #14]
  TX_RegData[3] = (cmd>>8) & 0xff;
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	73fb      	strb	r3, [r7, #15]
  switch(datalen)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d002      	beq.n	8001844 <bq76952_write_RAM_register+0x4c>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d013      	beq.n	800186a <bq76952_write_RAM_register+0x72>
 8001842:	e025      	b.n	8001890 <bq76952_write_RAM_register+0x98>
  {
    case 1://1 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 3);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2103      	movs	r1, #3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f86c 	bl	8001928 <Checksum>
 8001850:	4603      	mov	r3, r0
 8001852:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x05; //combined length of register address and data
 8001854:	2305      	movs	r3, #5
 8001856:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 8001858:	7c7b      	ldrb	r3, [r7, #17]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	82fb      	strh	r3, [r7, #22]
      break;
 8001868:	e012      	b.n	8001890 <bq76952_write_RAM_register+0x98>
    case 2://2 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 4);
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f859 	bl	8001928 <Checksum>
 8001876:	4603      	mov	r3, r0
 8001878:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x06; //combined length of register address and data
 800187a:	2306      	movs	r3, #6
 800187c:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 800187e:	7c7b      	ldrb	r3, [r7, #17]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	7c3b      	ldrb	r3, [r7, #16]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	82fb      	strh	r3, [r7, #22]
      break;
 800188e:	bf00      	nop
    //Add case for 4 bytes (0x08) if required
  }
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address)) //Writes register address to Subcommand Memory 0x3E
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4619      	mov	r1, r3
 8001894:	203e      	movs	r0, #62	; 0x3e
 8001896:	f000 f8a9 	bl	80019ec <bq76952_write_sub_cmd>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <bq76952_write_RAM_register+0xce>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_DATA_BUFF_ADDR, cmd)) //Writes Command to Buffer Memory 0x40
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2040      	movs	r0, #64	; 0x40
 80018a6:	f000 f8a1 	bl	80019ec <bq76952_write_sub_cmd>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <bq76952_write_RAM_register+0xd2>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(RAM_REG_LSB_ADDR, TX_Buffer))  //Writes Checksum and Datalength to 0x60 and 0x61
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	4619      	mov	r1, r3
 80018b4:	2060      	movs	r0, #96	; 0x60
 80018b6:	f000 f899 	bl	80019ec <bq76952_write_sub_cmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <bq76952_write_RAM_register+0xd6>
    {
      break;
    }
    ret_val = SYS_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	82bb      	strh	r3, [r7, #20]
 80018c4:	e004      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018ce:	bf00      	nop
  }while(false);
  return ret_val;
 80018d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <bq76952_read_RAM_register>:

static int16_t bq76952_read_RAM_register (uint16_t reg_address, uint16_t *pData)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
  //Reads from the RAM Register
  uint16_t ret_val = SYS_ERR;
 80018e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ec:	81fb      	strh	r3, [r7, #14]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address))
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4619      	mov	r1, r3
 80018f2:	203e      	movs	r0, #62	; 0x3e
 80018f4:	f000 f87a 	bl	80019ec <bq76952_write_sub_cmd>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <bq76952_read_RAM_register+0x3a>
    {
      break;
    }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pData, 2))
 80018fe:	463b      	mov	r3, r7
 8001900:	2202      	movs	r2, #2
 8001902:	4619      	mov	r1, r3
 8001904:	2040      	movs	r0, #64	; 0x40
 8001906:	f000 f8f7 	bl	8001af8 <bq76952_read_sub_cmd_data_buffer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <bq76952_read_RAM_register+0x3e>
    {
      break;
    }
    ret_val = SYS_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	e002      	b.n	800191c <bq76952_read_RAM_register+0x40>
      break;
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <bq76952_read_RAM_register+0x40>
      break;
 800191a:	bf00      	nop
  }while(false);
  return ret_val;
 800191c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <Checksum>:

static uint8_t Checksum(uint8_t *pData, uint8_t len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t checksum = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	73bb      	strb	r3, [r7, #14]

  for(i=0; i<len; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e009      	b.n	8001952 <Checksum+0x2a>
    checksum += pData[i];
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	73bb      	strb	r3, [r7, #14]
  for(i=0; i<len; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3f1      	bcc.n	800193e <Checksum+0x16>

  checksum = 0xff & ~checksum;
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	43db      	mvns	r3, r3
 800195e:	73bb      	strb	r3, [r7, #14]

  return(checksum);
 8001960:	7bbb      	ldrb	r3, [r7, #14]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <CRC8>:


static uint8_t CRC8(uint8_t *pData, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 800197e:	e029      	b.n	80019d4 <CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e020      	b.n	80019c8 <CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 8001986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da09      	bge.n	80019a2 <CRC8+0x34>
      {
        crc *= 2;
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 8001994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001998:	f083 0307 	eor.w	r3, r3, #7
 800199c:	b25b      	sxtb	r3, r3
 800199e:	73bb      	strb	r3, [r7, #14]
 80019a0:	e002      	b.n	80019a8 <CRC8+0x3a>
      }
      else
        crc *= 2;
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	73bb      	strb	r3, [r7, #14]

      if((*pData & i) != 0)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4013      	ands	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <CRC8+0x54>
        crc ^= 0x107;
 80019b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019ba:	f083 0307 	eor.w	r3, r3, #7
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1db      	bne.n	8001986 <CRC8+0x18>
    }
    pData++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3301      	adds	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	70fa      	strb	r2, [r7, #3]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1d0      	bne.n	8001980 <CRC8+0x12>
  }
  return (crc);
 80019de:	7bbb      	ldrb	r3, [r7, #14]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint16_t subCmdRegAddr, uint16_t subCmd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	80fb      	strh	r3, [r7, #6]
 80019f8:	4613      	mov	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a04:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <bq76952_write_sub_cmd+0x100>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	823b      	strh	r3, [r7, #16]
 8001a12:	2300      	movs	r3, #0
 8001a14:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <bq76952_write_sub_cmd+0x100>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81bb      	strh	r3, [r7, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	773b      	strb	r3, [r7, #28]
 8001a2c:	e054      	b.n	8001ad8 <bq76952_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 8001a2e:	7efa      	ldrb	r2, [r7, #27]
 8001a30:	7f3b      	ldrb	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	7f3b      	ldrb	r3, [r7, #28]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	fa42 f303 	asr.w	r3, r2, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	747b      	strb	r3, [r7, #17]
    pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff8e 	bl	800196e <CRC8>
 8001a52:	4603      	mov	r3, r0
 8001a54:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 8001a56:	7c3b      	ldrb	r3, [r7, #16]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7c7b      	ldrb	r3, [r7, #17]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	82fb      	strh	r3, [r7, #22]
    do
    {
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4821      	ldr	r0, [pc, #132]	; (8001af0 <bq76952_write_sub_cmd+0x104>)
 8001a6c:	f004 fbc2 	bl	80061f4 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0110 	add.w	r1, r7, #16
 8001a78:	230a      	movs	r3, #10
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	481d      	ldr	r0, [pc, #116]	; (8001af4 <bq76952_write_sub_cmd+0x108>)
 8001a80:	f007 fc68 	bl	8009354 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <bq76952_write_sub_cmd+0x104>)
 8001a8a:	f004 fbb3 	bl	80061f4 <HAL_GPIO_WritePin>
      HAL_Delay(2);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f001 fe68 	bl	8003764 <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 8001aa4:	7f7b      	ldrb	r3, [r7, #29]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 8001aaa:	8afa      	ldrh	r2, [r7, #22]
 8001aac:	8b3b      	ldrh	r3, [r7, #24]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d002      	beq.n	8001ab8 <bq76952_write_sub_cmd+0xcc>
 8001ab2:	7f7b      	ldrb	r3, [r7, #29]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d9d6      	bls.n	8001a66 <bq76952_write_sub_cmd+0x7a>
    if(TxByte == RxByte)
 8001ab8:	8afa      	ldrh	r2, [r7, #22]
 8001aba:	8b3b      	ldrh	r3, [r7, #24]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d104      	bne.n	8001aca <bq76952_write_sub_cmd+0xde>
    {
      retry_cnt=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	777b      	strb	r3, [r7, #29]
      ret_val = SYS_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	83fb      	strh	r3, [r7, #30]
 8001ac8:	e003      	b.n	8001ad2 <bq76952_write_sub_cmd+0xe6>
    }
    else
    {
      ret_val = SYS_ERR;
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	83fb      	strh	r3, [r7, #30]
      break;
 8001ad0:	e005      	b.n	8001ade <bq76952_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001ad2:	7f3b      	ldrb	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	773b      	strb	r3, [r7, #28]
 8001ad8:	7f3b      	ldrb	r3, [r7, #28]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d9a7      	bls.n	8001a2e <bq76952_write_sub_cmd+0x42>
    }
  }
  return ret_val;
 8001ade:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800c52c 	.word	0x0800c52c
 8001af0:	40020800 	.word	0x40020800
 8001af4:	2000073c 	.word	0x2000073c

08001af8 <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t **pData, uint8_t len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[SUB_CMD_DATA_BUFF_LEN_MAX] = {0};  //To store the initial data from the Buffer
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  int16_t ret_val = SYS_ERR;
 8001b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b24:	86fb      	strh	r3, [r7, #54]	; 0x36
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	f200 8085 	bhi.w	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8081 	beq.w	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
    {
      break;
    }
    if(pData == NULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d07c      	beq.n	8001c36 <bq76952_read_sub_cmd_data_buffer+0x13e>
    {
      break;
    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	81bb      	strh	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	813b      	strh	r3, [r7, #8]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001b5c:	e05a      	b.n	8001c14 <bq76952_read_sub_cmd_data_buffer+0x11c>
    {
      pTxData[0] = subCmdRegAddr + i;
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b64:	4413      	add	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	733b      	strb	r3, [r7, #12]
      pTxData[1] = 0xFF;
 8001b6a:	23ff      	movs	r3, #255	; 0xff
 8001b6c:	737b      	strb	r3, [r7, #13]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2102      	movs	r1, #2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fefa 	bl	800196e <CRC8>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73bb      	strb	r3, [r7, #14]
      TxByte = pTxData[0];
 8001b7e:	7b3b      	ldrb	r3, [r7, #12]
 8001b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      retry_cnt = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	482e      	ldr	r0, [pc, #184]	; (8001c48 <bq76952_read_sub_cmd_data_buffer+0x150>)
 8001b90:	f004 fb30 	bl	80061f4 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001b94:	f107 0208 	add.w	r2, r7, #8
 8001b98:	f107 010c 	add.w	r1, r7, #12
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	482a      	ldr	r0, [pc, #168]	; (8001c4c <bq76952_read_sub_cmd_data_buffer+0x154>)
 8001ba4:	f007 fbd6 	bl	8009354 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4826      	ldr	r0, [pc, #152]	; (8001c48 <bq76952_read_sub_cmd_data_buffer+0x150>)
 8001bae:	f004 fb21 	bl	80061f4 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f001 fdd6 	bl	8003764 <HAL_Delay>
        RxByte = pRxData[0];
 8001bb8:	7a3b      	ldrb	r3, [r7, #8]
 8001bba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        retry_cnt++;
 8001bbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001bc8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001bcc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d003      	beq.n	8001bdc <bq76952_read_sub_cmd_data_buffer+0xe4>
 8001bd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d9d6      	bls.n	8001b8a <bq76952_read_sub_cmd_data_buffer+0x92>
      if(TxByte == RxByte)
 8001bdc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001be0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d10c      	bne.n	8001c02 <bq76952_read_sub_cmd_data_buffer+0x10a>
      {
        retry_cnt=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        RX_DATA[i] = pRxData[1];
 8001bee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bf2:	7a7a      	ldrb	r2, [r7, #9]
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	443b      	add	r3, r7
 8001bf8:	f803 2c28 	strb.w	r2, [r3, #-40]
        ret_val = SYS_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c00:	e003      	b.n	8001c0a <bq76952_read_sub_cmd_data_buffer+0x112>
      }
      else
      {
        ret_val = SYS_ERR;
 8001c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c06:	86fb      	strh	r3, [r7, #54]	; 0x36
        break;
 8001c08:	e009      	b.n	8001c1e <bq76952_read_sub_cmd_data_buffer+0x126>
    for (uint8_t i = 0; i < len; i++)
 8001c0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001c14:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d39f      	bcc.n	8001b5e <bq76952_read_sub_cmd_data_buffer+0x66>
      }
    }
    **pData= (RX_DATA[1] << 8) | RX_DATA[0];
 8001c1e:	7c7b      	ldrb	r3, [r7, #17]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	7c3b      	ldrb	r3, [r7, #16]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b292      	uxth	r2, r2
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e000      	b.n	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
      break;
 8001c36:	bf00      	nop
  } while(false);
  return ret_val;
 8001c38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800c52c 	.word	0x0800c52c
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	2000073c 	.word	0x2000073c

08001c50 <bq76952_dir_cmd_read>:
  }
  return ret_val;
}

extern int16_t bq76952_dir_cmd_read(uint8_t dirCmdRegAddr, uint16_t *pData, uint8_t len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  //To read data from the direct command registers
  uint8_t RX_DATA[READ_DIR_CMD_BUFF_LEN] = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	82bb      	strh	r3, [r7, #20]
  int16_t ret_val = SYS_ERR;
 8001c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c68:	83fb      	strh	r3, [r7, #30]
  do
  {
    if((len > DIR_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d86f      	bhi.n	8001d50 <bq76952_dir_cmd_read+0x100>
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d06c      	beq.n	8001d50 <bq76952_dir_cmd_read+0x100>
    {
      break;
    }
    if(pData == NULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d068      	beq.n	8001d4e <bq76952_dir_cmd_read+0xfe>
    {
      break;
    }
    uint8_t pTxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <bq76952_dir_cmd_read+0x10c>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	823b      	strh	r3, [r7, #16]
 8001c82:	2300      	movs	r3, #0
 8001c84:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <bq76952_dir_cmd_read+0x10c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	81bb      	strh	r3, [r7, #12]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	777b      	strb	r3, [r7, #29]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	773b      	strb	r3, [r7, #28]
 8001c98:	e04b      	b.n	8001d32 <bq76952_dir_cmd_read+0xe2>
    {
      pTxData[0] = dirCmdRegAddr + i;
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	7f3b      	ldrb	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	743b      	strb	r3, [r7, #16]
      pTxData[1] = 0xFF;
 8001ca4:	23ff      	movs	r3, #255	; 0xff
 8001ca6:	747b      	strb	r3, [r7, #17]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe5d 	bl	800196e <CRC8>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	74bb      	strb	r3, [r7, #18]
      TxByte = pTxData[0];
 8001cb8:	7c3b      	ldrb	r3, [r7, #16]
 8001cba:	837b      	strh	r3, [r7, #26]
      retry_cnt = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	777b      	strb	r3, [r7, #29]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4826      	ldr	r0, [pc, #152]	; (8001d60 <bq76952_dir_cmd_read+0x110>)
 8001cc6:	f004 fa95 	bl	80061f4 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_DIR_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001cca:	f107 020c 	add.w	r2, r7, #12
 8001cce:	f107 0110 	add.w	r1, r7, #16
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <bq76952_dir_cmd_read+0x114>)
 8001cda:	f007 fb3b 	bl	8009354 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	481f      	ldr	r0, [pc, #124]	; (8001d60 <bq76952_dir_cmd_read+0x110>)
 8001ce4:	f004 fa86 	bl	80061f4 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f001 fd3b 	bl	8003764 <HAL_Delay>
        RxByte = pRxData[0];
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	833b      	strh	r3, [r7, #24]
        retry_cnt++;
 8001cf2:	7f7b      	ldrb	r3, [r7, #29]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	777b      	strb	r3, [r7, #29]
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001cf8:	8b7a      	ldrh	r2, [r7, #26]
 8001cfa:	8b3b      	ldrh	r3, [r7, #24]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d002      	beq.n	8001d06 <bq76952_dir_cmd_read+0xb6>
 8001d00:	7f7b      	ldrb	r3, [r7, #29]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9dc      	bls.n	8001cc0 <bq76952_dir_cmd_read+0x70>
      if(TxByte == RxByte)
 8001d06:	8b7a      	ldrh	r2, [r7, #26]
 8001d08:	8b3b      	ldrh	r3, [r7, #24]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10a      	bne.n	8001d24 <bq76952_dir_cmd_read+0xd4>
      {
        retry_cnt=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	777b      	strb	r3, [r7, #29]
        RX_DATA[i] = pRxData[1];
 8001d12:	7f3b      	ldrb	r3, [r7, #28]
 8001d14:	7b7a      	ldrb	r2, [r7, #13]
 8001d16:	3320      	adds	r3, #32
 8001d18:	443b      	add	r3, r7
 8001d1a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        ret_val = SYS_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	83fb      	strh	r3, [r7, #30]
 8001d22:	e003      	b.n	8001d2c <bq76952_dir_cmd_read+0xdc>
      }
      else
      {
        ret_val = SYS_ERR;
 8001d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d28:	83fb      	strh	r3, [r7, #30]
        break;
 8001d2a:	e005      	b.n	8001d38 <bq76952_dir_cmd_read+0xe8>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001d2c:	7f3b      	ldrb	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	773b      	strb	r3, [r7, #28]
 8001d32:	7f3b      	ldrb	r3, [r7, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d9b0      	bls.n	8001c9a <bq76952_dir_cmd_read+0x4a>
      }
    }
    *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 8001d38:	7d7b      	ldrb	r3, [r7, #21]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	7d3b      	ldrb	r3, [r7, #20]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <bq76952_dir_cmd_read+0x100>
      break;
 8001d4e:	bf00      	nop
  } while(false);
  return ret_val;
 8001d50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800c52c 	.word	0x0800c52c
 8001d60:	40020800 	.word	0x40020800
 8001d64:	2000073c 	.word	0x2000073c

08001d68 <afe_data_read>:
TS_AFEdata_s AFE_data;
TS_AFEinfo_s AFE_info;
BAT_GAUGE_ViT_t batGaugeViT;

int16_t afe_data_read(void)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  uint16_t data=0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	803b      	strh	r3, [r7, #0]
  uint8_t CellVoltageHolder = Cell1Voltage;
 8001d72:	2314      	movs	r3, #20
 8001d74:	71fb      	strb	r3, [r7, #7]
  int16_t ret_val = SYS_ERR;
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	807b      	strh	r3, [r7, #2]
  do
  {
    if(SYS_OK == bq76952_get_device_number(&data))
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fc6f 	bl	8001662 <bq76952_get_device_number>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <afe_data_read+0x28>
      AFE_data.device_number = data;
 8001d8a:	883a      	ldrh	r2, [r7, #0]
 8001d8c:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <afe_data_read+0x238>)
 8001d8e:	801a      	strh	r2, [r3, #0]
    if(SYS_OK == bq76952_dir_cmd_read(StackVoltage, &data, 2))
 8001d90:	463b      	mov	r3, r7
 8001d92:	2202      	movs	r2, #2
 8001d94:	4619      	mov	r1, r3
 8001d96:	2034      	movs	r0, #52	; 0x34
 8001d98:	f7ff ff5a 	bl	8001c50 <bq76952_dir_cmd_read>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <afe_data_read+0x40>
      AFE_data.stack_vol = data;
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <afe_data_read+0x238>)
 8001da6:	805a      	strh	r2, [r3, #2]
    if(SYS_OK == bq76952_dir_cmd_read(PACKPinVoltage, &data, 2))
 8001da8:	463b      	mov	r3, r7
 8001daa:	2202      	movs	r2, #2
 8001dac:	4619      	mov	r1, r3
 8001dae:	2036      	movs	r0, #54	; 0x36
 8001db0:	f7ff ff4e 	bl	8001c50 <bq76952_dir_cmd_read>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <afe_data_read+0x5e>
    {
      AFE_data.pack_vol = data;
 8001dba:	883a      	ldrh	r2, [r7, #0]
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <afe_data_read+0x238>)
 8001dbe:	809a      	strh	r2, [r3, #4]
      batGaugeViT.BAT_gauge_vPack = data;
 8001dc0:	883a      	ldrh	r2, [r7, #0]
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <afe_data_read+0x23c>)
 8001dc4:	801a      	strh	r2, [r3, #0]
    }
    if(SYS_OK == bq76952_dir_cmd_read(CC2Current, &data, 2))
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	203a      	movs	r0, #58	; 0x3a
 8001dce:	f7ff ff3f 	bl	8001c50 <bq76952_dir_cmd_read>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <afe_data_read+0x7e>
    {
      AFE_data.pack_curr = data;
 8001dd8:	883a      	ldrh	r2, [r7, #0]
 8001dda:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <afe_data_read+0x238>)
 8001ddc:	811a      	strh	r2, [r3, #8]
      batGaugeViT.BAT_gauge_iPack = data;
 8001dde:	883b      	ldrh	r3, [r7, #0]
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <afe_data_read+0x23c>)
 8001de4:	805a      	strh	r2, [r3, #2]
    }
      if(SYS_OK == bq76952_dir_cmd_read(TS1Temperature, &data, 2))
 8001de6:	463b      	mov	r3, r7
 8001de8:	2202      	movs	r2, #2
 8001dea:	4619      	mov	r1, r3
 8001dec:	2070      	movs	r0, #112	; 0x70
 8001dee:	f7ff ff2f 	bl	8001c50 <bq76952_dir_cmd_read>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <afe_data_read+0x9c>
      {
    	  AFE_data.temps[0] = data;
 8001df8:	883a      	ldrh	r2, [r7, #0]
 8001dfa:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <afe_data_read+0x238>)
 8001dfc:	83da      	strh	r2, [r3, #30]
    	  batGaugeViT.BAT_gauge_tPack = data;
 8001dfe:	883a      	ldrh	r2, [r7, #0]
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <afe_data_read+0x23c>)
 8001e02:	809a      	strh	r2, [r3, #4]
      }
    if(SYS_OK == bq76952_dir_cmd_read(TS3Temperature, &data, 2))
 8001e04:	463b      	mov	r3, r7
 8001e06:	2202      	movs	r2, #2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	2074      	movs	r0, #116	; 0x74
 8001e0c:	f7ff ff20 	bl	8001c50 <bq76952_dir_cmd_read>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <afe_data_read+0xb4>
      AFE_data.temps[1] = data;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <afe_data_read+0x238>)
 8001e1a:	841a      	strh	r2, [r3, #32]
    for(uint8_t i=0;i<10;i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	71bb      	strb	r3, [r7, #6]
 8001e20:	e016      	b.n	8001e50 <afe_data_read+0xe8>
    {
      do
      {
        if(SYS_OK == bq76952_dir_cmd_read(CellVoltageHolder, &data, 2))
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4639      	mov	r1, r7
 8001e26:	2202      	movs	r2, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff11 	bl	8001c50 <bq76952_dir_cmd_read>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <afe_data_read+0xe2>
        {
          AFE_data.cellvoltages[i] = data;
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	8839      	ldrh	r1, [r7, #0]
 8001e38:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <afe_data_read+0x238>)
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	460a      	mov	r2, r1
 8001e42:	805a      	strh	r2, [r3, #2]
          CellVoltageHolder+=2;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	3302      	adds	r3, #2
 8001e48:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0;i<10;i++)
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	71bb      	strb	r3, [r7, #6]
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d9e5      	bls.n	8001e22 <afe_data_read+0xba>
        }
      }while(false);
    }

    AFE_info.Device_Number = AFE_data.device_number;
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <afe_data_read+0x238>)
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <afe_data_read+0x240>)
 8001e5c:	801a      	strh	r2, [r3, #0]
    AFE_info.Stack_Voltage = 0.01*(AFE_data.stack_vol);                     //Returns Stack Voltage in Volts (V)
 8001e5e:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <afe_data_read+0x238>)
 8001e60:	885b      	ldrh	r3, [r3, #2]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb26 	bl	80004b4 <__aeabi_i2d>
 8001e68:	a345      	add	r3, pc, #276	; (adr r3, 8001f80 <afe_data_read+0x218>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fd97 	bl	80009ac <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <afe_data_read+0x240>)
 8001e82:	6053      	str	r3, [r2, #4]
    AFE_info.Pack_Voltage = 0.01*(AFE_data.pack_vol);                       //Returns Pack Voltage in Volts (V)
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <afe_data_read+0x238>)
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb13 	bl	80004b4 <__aeabi_i2d>
 8001e8e:	a33c      	add	r3, pc, #240	; (adr r3, 8001f80 <afe_data_read+0x218>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fb78 	bl	8000588 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fd84 	bl	80009ac <__aeabi_d2f>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <afe_data_read+0x240>)
 8001ea8:	6093      	str	r3, [r2, #8]
    AFE_info.Pack_Current = (AFE_data.pack_curr);                      //Returns Pack Current in Amperes (A)
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <afe_data_read+0x238>)
 8001eac:	891a      	ldrh	r2, [r3, #8]
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <afe_data_read+0x240>)
 8001eb0:	821a      	strh	r2, [r3, #16]
    AFE_info.Temperatures[0] = (0.1*(AFE_data.temps[0]))-273.15;     //Returns TS1 in  Degree Celcius (C)
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <afe_data_read+0x238>)
 8001eb4:	8bdb      	ldrh	r3, [r3, #30]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fafc 	bl	80004b4 <__aeabi_i2d>
 8001ebc:	a332      	add	r3, pc, #200	; (adr r3, 8001f88 <afe_data_read+0x220>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fb61 	bl	8000588 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	a330      	add	r3, pc, #192	; (adr r3, 8001f90 <afe_data_read+0x228>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f9a0 	bl	8000218 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fd64 	bl	80009ac <__aeabi_d2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <afe_data_read+0x240>)
 8001ee8:	63d3      	str	r3, [r2, #60]	; 0x3c
    AFE_info.Temperatures[1] = (0.1*(AFE_data.temps[1]))-273.15;     //Returns TS1 in Degree Celcius (C)
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <afe_data_read+0x238>)
 8001eec:	8c1b      	ldrh	r3, [r3, #32]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fae0 	bl	80004b4 <__aeabi_i2d>
 8001ef4:	a324      	add	r3, pc, #144	; (adr r3, 8001f88 <afe_data_read+0x220>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb45 	bl	8000588 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a322      	add	r3, pc, #136	; (adr r3, 8001f90 <afe_data_read+0x228>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe f984 	bl	8000218 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fd48 	bl	80009ac <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <afe_data_read+0x240>)
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
    for(uint8_t i=0;i<10;i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	717b      	strb	r3, [r7, #5]
 8001f26:	e01e      	b.n	8001f66 <afe_data_read+0x1fe>
    {
      AFE_info.CellVoltages[i] = 0.001*(AFE_data.cellvoltages[i]);          //Returns Cell Voltages in Volts (V)
 8001f28:	797b      	ldrb	r3, [r7, #5]
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <afe_data_read+0x238>)
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fabd 	bl	80004b4 <__aeabi_i2d>
 8001f3a:	a317      	add	r3, pc, #92	; (adr r3, 8001f98 <afe_data_read+0x230>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fb22 	bl	8000588 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	797c      	ldrb	r4, [r7, #5]
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fd2d 	bl	80009ac <__aeabi_d2f>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <afe_data_read+0x240>)
 8001f56:	1d23      	adds	r3, r4, #4
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++)
 8001f60:	797b      	ldrb	r3, [r7, #5]
 8001f62:	3301      	adds	r3, #1
 8001f64:	717b      	strb	r3, [r7, #5]
 8001f66:	797b      	ldrb	r3, [r7, #5]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d9dd      	bls.n	8001f28 <afe_data_read+0x1c0>
    }
    ret_val = SYS_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	807b      	strh	r3, [r7, #2]
  }while(false);

  return ret_val;
 8001f70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	f3af 8000 	nop.w
 8001f80:	47ae147b 	.word	0x47ae147b
 8001f84:	3f847ae1 	.word	0x3f847ae1
 8001f88:	9999999a 	.word	0x9999999a
 8001f8c:	3fb99999 	.word	0x3fb99999
 8001f90:	66666666 	.word	0x66666666
 8001f94:	40711266 	.word	0x40711266
 8001f98:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f9c:	3f50624d 	.word	0x3f50624d
 8001fa0:	200000e8 	.word	0x200000e8
 8001fa4:	20000150 	.word	0x20000150
 8001fa8:	2000010c 	.word	0x2000010c

08001fac <app_afe_init>:

int16_t app_afe_init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb6:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2110      	movs	r1, #16
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <app_afe_init+0x2c>)
 8001fbe:	f004 f919 	bl	80061f4 <HAL_GPIO_WritePin>
	    bq76952_init();
 8001fc2:	f7ff f9cd 	bl	8001360 <bq76952_init>
		ret_val = SYS_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020800 	.word	0x40020800

08001fdc <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8001fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe6:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <app_gauge_init+0x2c>)
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <app_gauge_init+0x2c>)
 8001ff0:	2212      	movs	r2, #18
 8001ff2:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8001ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000158 	.word	0x20000158

0800200c <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002016:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8002018:	f000 fe14 	bl	8002c44 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 800201c:	f000 feee 	bl	8002dfc <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8002020:	f001 f87c 	bl	800311c <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8002024:	f000 f9fc 	bl	8002420 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8002028:	f000 fc88 	bl	800293c <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 800202c:	f000 f822 	bl	8002074 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8002030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8002042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002046:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8002048:	f7ff ffb0 	bl	8001fac <app_afe_init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8002052:	f7ff ffc3 	bl	8001fdc <app_gauge_init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	80fb      	strh	r3, [r7, #6]
 8002060:	e002      	b.n	8002068 <app_sys_peripheral_init+0x2c>
			break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <app_sys_peripheral_init+0x2c>
			break;
 8002066:	bf00      	nop
	}while(false);

	return ret_val;
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800207a:	463b      	mov	r3, r7
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <MX_ADC1_Init+0x98>)
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <MX_ADC1_Init+0x9c>)
 800208a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_ADC1_Init+0x98>)
 800208e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_ADC1_Init+0x98>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_ADC1_Init+0x98>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_ADC1_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_ADC1_Init+0x98>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_ADC1_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_ADC1_Init+0x98>)
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <MX_ADC1_Init+0xa0>)
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <MX_ADC1_Init+0x98>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_ADC1_Init+0x98>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_ADC1_Init+0x98>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_ADC1_Init+0x98>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_ADC1_Init+0x98>)
 80020d6:	f001 fb69 	bl	80037ac <HAL_ADC_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020e0:	f001 f80c 	bl	80030fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020e4:	230a      	movs	r3, #10
 80020e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_ADC1_Init+0x98>)
 80020f6:	f001 fcc5 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002100:	f000 fffc 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000160 	.word	0x20000160
 8002110:	40012000 	.word	0x40012000
 8002114:	0f000001 	.word	0x0f000001

08002118 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_ADC_MspInit+0x7c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d127      	bne.n	800218a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_ADC_MspInit+0x80>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_ADC_MspInit+0x80>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_ADC_MspInit+0x80>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_ADC_MspInit+0x80>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_ADC_MspInit+0x80>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_ADC_MspInit+0x80>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8002172:	2303      	movs	r3, #3
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002176:	2303      	movs	r3, #3
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_ADC_MspInit+0x84>)
 8002186:	f003 fd11 	bl	8005bac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40012000 	.word	0x40012000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020800 	.word	0x40020800

080021a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
int count = 0;
uint32_t id;
uint8_t state[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <tx_header_bat_bms_ovr>:

void tx_header_bat_bms_ovr()
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	TxBatBmsOvr.DLC = BAT_BMS_OvrVIEW_DLC;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021ba:	2202      	movs	r2, #2
 80021bc:	611a      	str	r2, [r3, #16]
	TxBatBmsOvr.ExtId = 0;
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
	TxBatBmsOvr.IDE = CAN_ID_STD;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
	TxBatBmsOvr.RTR = CAN_RTR_DATA;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
	TxBatBmsOvr.StdId = BAT_BMS_OvrVIEW_CANID;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <tx_header_bat_bms_ovr+0x38>)
 80021d4:	601a      	str	r2, [r3, #0]
	TxBatBmsOvr.TransmitGlobalTime = DISABLE;
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <tx_header_bat_bms_ovr+0x34>)
 80021d8:	2200      	movs	r2, #0
 80021da:	751a      	strb	r2, [r3, #20]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000020c 	.word	0x2000020c
 80021ec:	001ff610 	.word	0x001ff610

080021f0 <tx_header_bat_bms_ext_temp>:

void tx_header_bat_bms_ext_temp()
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	TxBatExtTemp.DLC = BAT_BMS_ExtTemp_DLC;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 80021f6:	2204      	movs	r2, #4
 80021f8:	611a      	str	r2, [r3, #16]
	TxBatExtTemp.ExtId = 0;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
	TxBatExtTemp.IDE = CAN_ID_STD;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
	TxBatExtTemp.RTR = CAN_RTR_DATA;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
	TxBatExtTemp.StdId = BAT_BMS_ExtTemp_CANID;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 800220e:	4a06      	ldr	r2, [pc, #24]	; (8002228 <tx_header_bat_bms_ext_temp+0x38>)
 8002210:	601a      	str	r2, [r3, #0]
	TxBatExtTemp.TransmitGlobalTime = DISABLE;
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <tx_header_bat_bms_ext_temp+0x34>)
 8002214:	2200      	movs	r2, #0
 8002216:	751a      	strb	r2, [r3, #20]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000224 	.word	0x20000224
 8002228:	001ff611 	.word	0x001ff611

0800222c <tx_header_bat_gauge_ovr>:

void tx_header_bat_gauge_ovr()
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	TxBatGaugeOvr.DLC = BAT_GAUGE_OvrVIEW_DLC;
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 8002232:	2204      	movs	r2, #4
 8002234:	611a      	str	r2, [r3, #16]
	TxBatGaugeOvr.ExtId = 0;
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
	TxBatGaugeOvr.IDE = CAN_ID_STD;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
	TxBatGaugeOvr.RTR = CAN_RTR_DATA;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
	TxBatGaugeOvr.StdId = BAT_GAUGE_OvrVIEW_CANID;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 800224a:	4a06      	ldr	r2, [pc, #24]	; (8002264 <tx_header_bat_gauge_ovr+0x38>)
 800224c:	601a      	str	r2, [r3, #0]
	TxBatGaugeOvr.TransmitGlobalTime = DISABLE;
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <tx_header_bat_gauge_ovr+0x34>)
 8002250:	2200      	movs	r2, #0
 8002252:	751a      	strb	r2, [r3, #20]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000023c 	.word	0x2000023c
 8002264:	001ff810 	.word	0x001ff810

08002268 <tx_header_bat_gauge_Vit>:

void tx_header_bat_gauge_Vit()
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	TxBatGaugeVit.DLC = BAT_GAUGE_ViT_DLC;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 800226e:	2206      	movs	r2, #6
 8002270:	611a      	str	r2, [r3, #16]
	TxBatGaugeVit.ExtId = 0;
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
	TxBatGaugeVit.IDE = CAN_ID_STD;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
	TxBatGaugeVit.RTR = CAN_RTR_DATA;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
	TxBatGaugeVit.StdId = BAT_GAUGE_ViT_CANID;
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <tx_header_bat_gauge_Vit+0x38>)
 8002288:	601a      	str	r2, [r3, #0]
	TxBatGaugeVit.TransmitGlobalTime = DISABLE;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <tx_header_bat_gauge_Vit+0x34>)
 800228c:	2200      	movs	r2, #0
 800228e:	751a      	strb	r2, [r3, #20]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000254 	.word	0x20000254
 80022a0:	001ff820 	.word	0x001ff820

080022a4 <tx_header_bat_brickA_Vit>:

void tx_header_bat_brickA_Vit()
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
	TxBrickAViT.DLC = BAT_AFE_vBRICK_A_DLC;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022aa:	2208      	movs	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
	TxBrickAViT.ExtId = 0;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
	TxBrickAViT.IDE = CAN_ID_STD;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
	TxBrickAViT.RTR = CAN_RTR_DATA;
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
	TxBrickAViT.StdId = BAT_AFE_vBRICK_A_CANID;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <tx_header_bat_brickA_Vit+0x38>)
 80022c4:	601a      	str	r2, [r3, #0]
	TxBrickAViT.TransmitGlobalTime = DISABLE;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <tx_header_bat_brickA_Vit+0x34>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	751a      	strb	r2, [r3, #20]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000026c 	.word	0x2000026c
 80022dc:	001ff710 	.word	0x001ff710

080022e0 <tx_header_bat_brickB_Vit>:

void tx_header_bat_brickB_Vit()
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
	TxBrickBViT.DLC = BAT_AFE_vBRICK_B_DLC;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 80022e6:	2208      	movs	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
	TxBrickBViT.ExtId = 0;
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
	TxBrickBViT.IDE = CAN_ID_STD;
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
	TxBrickBViT.RTR = CAN_RTR_DATA;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]
	TxBrickBViT.StdId = BAT_AFE_vBRICK_B_CANID;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <tx_header_bat_brickB_Vit+0x38>)
 8002300:	601a      	str	r2, [r3, #0]
	TxBrickBViT.TransmitGlobalTime = DISABLE;
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <tx_header_bat_brickB_Vit+0x34>)
 8002304:	2200      	movs	r2, #0
 8002306:	751a      	strb	r2, [r3, #20]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000284 	.word	0x20000284
 8002318:	001ff711 	.word	0x001ff711

0800231c <tx_header_bat_brickC_Vit>:

void tx_header_bat_brickC_Vit()
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	TxBrickCViT.DLC = BAT_AFE_vBRICK_C_DLC;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 8002322:	2208      	movs	r2, #8
 8002324:	611a      	str	r2, [r3, #16]
	TxBrickCViT.ExtId = 0;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
	TxBrickCViT.IDE = CAN_ID_STD;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
	TxBrickCViT.RTR = CAN_RTR_DATA;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
	TxBrickCViT.StdId = BAT_AFE_vBRICK_C_CANID;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <tx_header_bat_brickC_Vit+0x38>)
 800233c:	601a      	str	r2, [r3, #0]
	TxBrickCViT.TransmitGlobalTime = DISABLE;
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <tx_header_bat_brickC_Vit+0x34>)
 8002340:	2200      	movs	r2, #0
 8002342:	751a      	strb	r2, [r3, #20]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000029c 	.word	0x2000029c
 8002354:	001ff712 	.word	0x001ff712

08002358 <tx_header_bat_brickD_vit>:

void tx_header_bat_brickD_vit()
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
	TxBrickDViT.DLC = BAT_AFE_vBRICK_D_DLC;
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 800235e:	2204      	movs	r2, #4
 8002360:	611a      	str	r2, [r3, #16]
	TxBrickDViT.ExtId = 0;
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
	TxBrickDViT.IDE = CAN_ID_STD;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
	TxBrickDViT.RTR = CAN_RTR_DATA;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
	TxBrickDViT.StdId = BAT_AFE_vBRICK_D_CANID;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <tx_header_bat_brickD_vit+0x38>)
 8002378:	601a      	str	r2, [r3, #0]
	TxBrickDViT.TransmitGlobalTime = DISABLE;
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <tx_header_bat_brickD_vit+0x34>)
 800237c:	2200      	movs	r2, #0
 800237e:	751a      	strb	r2, [r3, #20]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200002b4 	.word	0x200002b4
 8002390:	001ff713 	.word	0x001ff713

08002394 <rx_header_fcu_state>:

void rx_header_fcu_state()
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	RxHeader.DLC = 8;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <rx_header_fcu_state+0x2c>)
 800239a:	2208      	movs	r2, #8
 800239c:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <rx_header_fcu_state+0x2c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <rx_header_fcu_state+0x2c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <rx_header_fcu_state+0x2c>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x00;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <rx_header_fcu_state+0x2c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	200002cc 	.word	0x200002cc

080023c4 <set_filter_config>:

void set_filter_config()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <set_filter_config+0x54>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <set_filter_config+0x54>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <set_filter_config+0x54>)
 80023d6:	2202      	movs	r2, #2
 80023d8:	615a      	str	r2, [r3, #20]
	filterConfig.FilterIdLow = 0x0101;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <set_filter_config+0x54>)
 80023dc:	f240 1201 	movw	r2, #257	; 0x101
 80023e0:	605a      	str	r2, [r3, #4]
	filterConfig.FilterIdHigh = 0x0000;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <set_filter_config+0x54>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
	filterConfig.FilterMaskIdLow = 0x1101;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <set_filter_config+0x54>)
 80023ea:	f241 1201 	movw	r2, #4353	; 0x1101
 80023ee:	60da      	str	r2, [r3, #12]
	filterConfig.FilterMaskIdHigh = 0x1111;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <set_filter_config+0x54>)
 80023f2:	f241 1211 	movw	r2, #4369	; 0x1111
 80023f6:	609a      	str	r2, [r3, #8]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <set_filter_config+0x54>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <set_filter_config+0x54>)
 8002400:	2201      	movs	r2, #1
 8002402:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <set_filter_config+0x54>)
 8002406:	2203      	movs	r2, #3
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800240a:	4903      	ldr	r1, [pc, #12]	; (8002418 <set_filter_config+0x54>)
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <set_filter_config+0x58>)
 800240e:	f002 f823 	bl	8004458 <HAL_CAN_ConfigFilter>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200001a8 	.word	0x200001a8
 800241c:	200002fc 	.word	0x200002fc

08002420 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_CAN1_Init+0x70>)
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <MX_CAN1_Init+0x74>)
 8002428:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <MX_CAN1_Init+0x70>)
 800242c:	2205      	movs	r2, #5
 800242e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_CAN1_Init+0x70>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <MX_CAN1_Init+0x70>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_CAN1_Init+0x70>)
 800243e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002442:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_CAN1_Init+0x70>)
 8002446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800244a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_CAN1_Init+0x70>)
 800244e:	2200      	movs	r2, #0
 8002450:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_CAN1_Init+0x70>)
 8002454:	2200      	movs	r2, #0
 8002456:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <MX_CAN1_Init+0x70>)
 800245a:	2200      	movs	r2, #0
 800245c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_CAN1_Init+0x70>)
 8002460:	2200      	movs	r2, #0
 8002462:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <MX_CAN1_Init+0x70>)
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_CAN1_Init+0x70>)
 800246c:	2200      	movs	r2, #0
 800246e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_CAN1_Init+0x70>)
 8002472:	f001 fd87 	bl	8003f84 <HAL_CAN_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800247c:	f000 fe3e 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_CAN1_Init+0x70>)
 8002482:	f002 f937 	bl	80046f4 <HAL_CAN_Start>
  rx_header_fcu_state();
 8002486:	f7ff ff85 	bl	8002394 <rx_header_fcu_state>

  /* USER CODE END CAN1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002fc 	.word	0x200002fc
 8002494:	40006400 	.word	0x40006400

08002498 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_CAN_MspInit+0xc4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d14c      	bne.n	8002554 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a20      	ldr	r2, [pc, #128]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_CAN_MspInit+0xc8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002504:	2309      	movs	r3, #9
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4815      	ldr	r0, [pc, #84]	; (8002564 <HAL_CAN_MspInit+0xcc>)
 8002510:	f003 fb4c 	bl	8005bac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2105      	movs	r1, #5
 8002518:	2013      	movs	r0, #19
 800251a:	f002 fe7d 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800251e:	2013      	movs	r0, #19
 8002520:	f002 fea6 	bl	8005270 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2105      	movs	r1, #5
 8002528:	2014      	movs	r0, #20
 800252a:	f002 fe75 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800252e:	2014      	movs	r0, #20
 8002530:	f002 fe9e 	bl	8005270 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2105      	movs	r1, #5
 8002538:	2015      	movs	r0, #21
 800253a:	f002 fe6d 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800253e:	2015      	movs	r0, #21
 8002540:	f002 fe96 	bl	8005270 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2105      	movs	r1, #5
 8002548:	2016      	movs	r0, #22
 800254a:	f002 fe65 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800254e:	2016      	movs	r0, #22
 8002550:	f002 fe8e 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40006400 	.word	0x40006400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <can_bat_gauge_ovr_write_data>:
  }
}

/* USER CODE BEGIN 1 */
void can_bat_gauge_ovr_write_data(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_ovr();
 800256c:	f7ff fe5e 	bl	800222c <tx_header_bat_gauge_ovr>
	id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGaugeOvr, &canFrame);
 8002570:	4909      	ldr	r1, [pc, #36]	; (8002598 <can_bat_gauge_ovr_write_data+0x30>)
 8002572:	480a      	ldr	r0, [pc, #40]	; (800259c <can_bat_gauge_ovr_write_data+0x34>)
 8002574:	f7fe fe42 	bl	80011fc <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 8002578:	4603      	mov	r3, r0
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <can_bat_gauge_ovr_write_data+0x38>)
 800257c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff810)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <can_bat_gauge_ovr_write_data+0x38>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <can_bat_gauge_ovr_write_data+0x3c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d105      	bne.n	8002594 <can_bat_gauge_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeOvr, canFrame.Data, &mailbox1Hz);
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <can_bat_gauge_ovr_write_data+0x40>)
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <can_bat_gauge_ovr_write_data+0x44>)
 800258c:	4908      	ldr	r1, [pc, #32]	; (80025b0 <can_bat_gauge_ovr_write_data+0x48>)
 800258e:	4809      	ldr	r0, [pc, #36]	; (80025b4 <can_bat_gauge_ovr_write_data+0x4c>)
 8002590:	f002 f8f4 	bl	800477c <HAL_CAN_AddTxMessage>
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200001d0 	.word	0x200001d0
 800259c:	20000208 	.word	0x20000208
 80025a0:	200002f0 	.word	0x200002f0
 80025a4:	001ff810 	.word	0x001ff810
 80025a8:	200002e8 	.word	0x200002e8
 80025ac:	200001d5 	.word	0x200001d5
 80025b0:	2000023c 	.word	0x2000023c
 80025b4:	200002fc 	.word	0x200002fc

080025b8 <can_bat_gauge_vit_write_data>:

void can_bat_gauge_vit_write_data(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_Vit();
 80025bc:	f7ff fe54 	bl	8002268 <tx_header_bat_gauge_Vit>
	id = Pack_BAT_GAUGE_ViT_can_codegen(&batGaugeViT, &canFrame);
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <can_bat_gauge_vit_write_data+0x30>)
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <can_bat_gauge_vit_write_data+0x34>)
 80025c4:	f7fe fe66 	bl	8001294 <Pack_BAT_GAUGE_ViT_can_codegen>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <can_bat_gauge_vit_write_data+0x38>)
 80025cc:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff820)
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <can_bat_gauge_vit_write_data+0x38>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <can_bat_gauge_vit_write_data+0x3c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d105      	bne.n	80025e4 <can_bat_gauge_vit_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeVit, canFrame.Data, &mailbox10Hz);
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <can_bat_gauge_vit_write_data+0x40>)
 80025da:	4a08      	ldr	r2, [pc, #32]	; (80025fc <can_bat_gauge_vit_write_data+0x44>)
 80025dc:	4908      	ldr	r1, [pc, #32]	; (8002600 <can_bat_gauge_vit_write_data+0x48>)
 80025de:	4809      	ldr	r0, [pc, #36]	; (8002604 <can_bat_gauge_vit_write_data+0x4c>)
 80025e0:	f002 f8cc 	bl	800477c <HAL_CAN_AddTxMessage>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200001d0 	.word	0x200001d0
 80025ec:	20000150 	.word	0x20000150
 80025f0:	200002f0 	.word	0x200002f0
 80025f4:	001ff820 	.word	0x001ff820
 80025f8:	200002ec 	.word	0x200002ec
 80025fc:	200001d5 	.word	0x200001d5
 8002600:	20000254 	.word	0x20000254
 8002604:	200002fc 	.word	0x200002fc

08002608 <can_bms_ovr_write_data>:

void can_bms_ovr_write_data(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ovr();
 800260c:	f7ff fdd2 	bl	80021b4 <tx_header_bat_bms_ovr>
	id = Pack_BAT_BMS_OvrVIEW_can_codegen(&batBmsOvr, &canFrame);
 8002610:	4909      	ldr	r1, [pc, #36]	; (8002638 <can_bms_ovr_write_data+0x30>)
 8002612:	480a      	ldr	r0, [pc, #40]	; (800263c <can_bms_ovr_write_data+0x34>)
 8002614:	f7fe fbb2 	bl	8000d7c <Pack_BAT_BMS_OvrVIEW_can_codegen>
 8002618:	4603      	mov	r3, r0
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <can_bms_ovr_write_data+0x38>)
 800261c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff610)
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <can_bms_ovr_write_data+0x38>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <can_bms_ovr_write_data+0x3c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d105      	bne.n	8002634 <can_bms_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatBmsOvr, canFrame.Data, &mailbox10Hz);
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <can_bms_ovr_write_data+0x40>)
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <can_bms_ovr_write_data+0x44>)
 800262c:	4908      	ldr	r1, [pc, #32]	; (8002650 <can_bms_ovr_write_data+0x48>)
 800262e:	4809      	ldr	r0, [pc, #36]	; (8002654 <can_bms_ovr_write_data+0x4c>)
 8002630:	f002 f8a4 	bl	800477c <HAL_CAN_AddTxMessage>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200001d0 	.word	0x200001d0
 800263c:	200001e4 	.word	0x200001e4
 8002640:	200002f0 	.word	0x200002f0
 8002644:	001ff610 	.word	0x001ff610
 8002648:	200002ec 	.word	0x200002ec
 800264c:	200001d5 	.word	0x200001d5
 8002650:	2000020c 	.word	0x2000020c
 8002654:	200002fc 	.word	0x200002fc

08002658 <can_bms_exttemp_write_data>:

void can_bms_exttemp_write_data(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ext_temp();
 800265c:	f7ff fdc8 	bl	80021f0 <tx_header_bat_bms_ext_temp>
	id = Pack_BAT_BMS_ExtTemp_can_codegen(&batBmsExtTemp, &canFrame);
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <can_bms_exttemp_write_data+0x30>)
 8002662:	480a      	ldr	r0, [pc, #40]	; (800268c <can_bms_exttemp_write_data+0x34>)
 8002664:	f7fe fbc2 	bl	8000dec <Pack_BAT_BMS_ExtTemp_can_codegen>
 8002668:	4603      	mov	r3, r0
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <can_bms_exttemp_write_data+0x38>)
 800266c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff611)
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <can_bms_exttemp_write_data+0x38>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <can_bms_exttemp_write_data+0x3c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d105      	bne.n	8002684 <can_bms_exttemp_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatExtTemp, canFrame.Data, &mailbox1Hz);
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <can_bms_exttemp_write_data+0x40>)
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <can_bms_exttemp_write_data+0x44>)
 800267c:	4908      	ldr	r1, [pc, #32]	; (80026a0 <can_bms_exttemp_write_data+0x48>)
 800267e:	4809      	ldr	r0, [pc, #36]	; (80026a4 <can_bms_exttemp_write_data+0x4c>)
 8002680:	f002 f87c 	bl	800477c <HAL_CAN_AddTxMessage>
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200001d0 	.word	0x200001d0
 800268c:	200001e8 	.word	0x200001e8
 8002690:	200002f0 	.word	0x200002f0
 8002694:	001ff611 	.word	0x001ff611
 8002698:	200002e8 	.word	0x200002e8
 800269c:	200001d5 	.word	0x200001d5
 80026a0:	20000224 	.word	0x20000224
 80026a4:	200002fc 	.word	0x200002fc

080026a8 <can_bat_afe_brickA_write_data>:

void can_bat_afe_brickA_write_data(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	tx_header_bat_brickA_Vit();
 80026ac:	f7ff fdfa 	bl	80022a4 <tx_header_bat_brickA_Vit>
	id = Pack_BAT_AFE_vBRICK_A_can_codegen(&batAfeBrickA, &canFrame);
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <can_bat_afe_brickA_write_data+0x3c>)
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <can_bat_afe_brickA_write_data+0x40>)
 80026b4:	f7fe fbea 	bl	8000e8c <Pack_BAT_AFE_vBRICK_A_can_codegen>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <can_bat_afe_brickA_write_data+0x44>)
 80026bc:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff710)
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <can_bat_afe_brickA_write_data+0x44>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <can_bat_afe_brickA_write_data+0x48>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d105      	bne.n	80026d4 <can_bat_afe_brickA_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickAViT, canFrame.Data, &mailbox1Hz);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <can_bat_afe_brickA_write_data+0x4c>)
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <can_bat_afe_brickA_write_data+0x50>)
 80026cc:	490b      	ldr	r1, [pc, #44]	; (80026fc <can_bat_afe_brickA_write_data+0x54>)
 80026ce:	480c      	ldr	r0, [pc, #48]	; (8002700 <can_bat_afe_brickA_write_data+0x58>)
 80026d0:	f002 f854 	bl	800477c <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80026d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d8:	480a      	ldr	r0, [pc, #40]	; (8002704 <can_bat_afe_brickA_write_data+0x5c>)
 80026da:	f003 fdbd 	bl	8006258 <HAL_GPIO_TogglePin>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200001d0 	.word	0x200001d0
 80026e8:	200001ec 	.word	0x200001ec
 80026ec:	200002f0 	.word	0x200002f0
 80026f0:	001ff710 	.word	0x001ff710
 80026f4:	200002e8 	.word	0x200002e8
 80026f8:	200001d5 	.word	0x200001d5
 80026fc:	2000026c 	.word	0x2000026c
 8002700:	200002fc 	.word	0x200002fc
 8002704:	40020400 	.word	0x40020400

08002708 <can_bat_afe_brickB_write_data>:

void can_bat_afe_brickB_write_data(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	tx_header_bat_brickB_Vit();
 800270c:	f7ff fde8 	bl	80022e0 <tx_header_bat_brickB_Vit>
	id = Pack_BAT_AFE_vBRICK_B_can_codegen(&batAfeBrickB, &canFrame);
 8002710:	4909      	ldr	r1, [pc, #36]	; (8002738 <can_bat_afe_brickB_write_data+0x30>)
 8002712:	480a      	ldr	r0, [pc, #40]	; (800273c <can_bat_afe_brickB_write_data+0x34>)
 8002714:	f7fe fc32 	bl	8000f7c <Pack_BAT_AFE_vBRICK_B_can_codegen>
 8002718:	4603      	mov	r3, r0
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <can_bat_afe_brickB_write_data+0x38>)
 800271c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff711)
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <can_bat_afe_brickB_write_data+0x38>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <can_bat_afe_brickB_write_data+0x3c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d105      	bne.n	8002734 <can_bat_afe_brickB_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickBViT, canFrame.Data, &mailbox1Hz);
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <can_bat_afe_brickB_write_data+0x40>)
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <can_bat_afe_brickB_write_data+0x44>)
 800272c:	4908      	ldr	r1, [pc, #32]	; (8002750 <can_bat_afe_brickB_write_data+0x48>)
 800272e:	4809      	ldr	r0, [pc, #36]	; (8002754 <can_bat_afe_brickB_write_data+0x4c>)
 8002730:	f002 f824 	bl	800477c <HAL_CAN_AddTxMessage>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200001d0 	.word	0x200001d0
 800273c:	200001f4 	.word	0x200001f4
 8002740:	200002f0 	.word	0x200002f0
 8002744:	001ff711 	.word	0x001ff711
 8002748:	200002e8 	.word	0x200002e8
 800274c:	200001d5 	.word	0x200001d5
 8002750:	20000284 	.word	0x20000284
 8002754:	200002fc 	.word	0x200002fc

08002758 <can_bat_afe_brickC_write_data>:

void can_bat_afe_brickC_write_data(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	tx_header_bat_brickC_Vit();
 800275c:	f7ff fdde 	bl	800231c <tx_header_bat_brickC_Vit>
	id = Pack_BAT_AFE_vBRICK_C_can_codegen(&batAfeBrickC, &canFrame);
 8002760:	4909      	ldr	r1, [pc, #36]	; (8002788 <can_bat_afe_brickC_write_data+0x30>)
 8002762:	480a      	ldr	r0, [pc, #40]	; (800278c <can_bat_afe_brickC_write_data+0x34>)
 8002764:	f7fe fc82 	bl	800106c <Pack_BAT_AFE_vBRICK_C_can_codegen>
 8002768:	4603      	mov	r3, r0
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <can_bat_afe_brickC_write_data+0x38>)
 800276c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff712)
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <can_bat_afe_brickC_write_data+0x38>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <can_bat_afe_brickC_write_data+0x3c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d105      	bne.n	8002784 <can_bat_afe_brickC_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickCViT, canFrame.Data, &mailbox1Hz);
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <can_bat_afe_brickC_write_data+0x40>)
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <can_bat_afe_brickC_write_data+0x44>)
 800277c:	4908      	ldr	r1, [pc, #32]	; (80027a0 <can_bat_afe_brickC_write_data+0x48>)
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <can_bat_afe_brickC_write_data+0x4c>)
 8002780:	f001 fffc 	bl	800477c <HAL_CAN_AddTxMessage>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200001d0 	.word	0x200001d0
 800278c:	200001fc 	.word	0x200001fc
 8002790:	200002f0 	.word	0x200002f0
 8002794:	001ff712 	.word	0x001ff712
 8002798:	200002e8 	.word	0x200002e8
 800279c:	200001d5 	.word	0x200001d5
 80027a0:	2000029c 	.word	0x2000029c
 80027a4:	200002fc 	.word	0x200002fc

080027a8 <can_bat_afe_brickD_write_data>:

void can_bat_afe_brickD_write_data(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	tx_header_bat_brickD_vit();
 80027ac:	f7ff fdd4 	bl	8002358 <tx_header_bat_brickD_vit>
	id = Pack_BAT_AFE_vBRICK_D_can_codegen(&batAfeBrickD, &canFrame);
 80027b0:	4909      	ldr	r1, [pc, #36]	; (80027d8 <can_bat_afe_brickD_write_data+0x30>)
 80027b2:	480a      	ldr	r0, [pc, #40]	; (80027dc <can_bat_afe_brickD_write_data+0x34>)
 80027b4:	f7fe fcd2 	bl	800115c <Pack_BAT_AFE_vBRICK_D_can_codegen>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <can_bat_afe_brickD_write_data+0x38>)
 80027bc:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff713)
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <can_bat_afe_brickD_write_data+0x38>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <can_bat_afe_brickD_write_data+0x3c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d105      	bne.n	80027d4 <can_bat_afe_brickD_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickDViT, canFrame.Data, &mailbox1Hz);
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <can_bat_afe_brickD_write_data+0x40>)
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <can_bat_afe_brickD_write_data+0x44>)
 80027cc:	4908      	ldr	r1, [pc, #32]	; (80027f0 <can_bat_afe_brickD_write_data+0x48>)
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <can_bat_afe_brickD_write_data+0x4c>)
 80027d0:	f001 ffd4 	bl	800477c <HAL_CAN_AddTxMessage>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200001d0 	.word	0x200001d0
 80027dc:	20000204 	.word	0x20000204
 80027e0:	200002f0 	.word	0x200002f0
 80027e4:	001ff713 	.word	0x001ff713
 80027e8:	200002e8 	.word	0x200002e8
 80027ec:	200001d5 	.word	0x200001d5
 80027f0:	200002b4 	.word	0x200002b4
 80027f4:	200002fc 	.word	0x200002fc

080027f8 <can_fcu_read_data>:

void can_fcu_read_data()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	set_filter_config();
 80027fc:	f7ff fde2 	bl	80023c4 <set_filter_config>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8002800:	4b48      	ldr	r3, [pc, #288]	; (8002924 <can_fcu_read_data+0x12c>)
 8002802:	4a49      	ldr	r2, [pc, #292]	; (8002928 <can_fcu_read_data+0x130>)
 8002804:	2100      	movs	r1, #0
 8002806:	4849      	ldr	r0, [pc, #292]	; (800292c <can_fcu_read_data+0x134>)
 8002808:	f002 f8dc 	bl	80049c4 <HAL_CAN_GetRxMessage>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 8083 	bne.w	800291a <can_fcu_read_data+0x122>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, 1);
 8002814:	2201      	movs	r2, #1
 8002816:	4943      	ldr	r1, [pc, #268]	; (8002924 <can_fcu_read_data+0x12c>)
 8002818:	4845      	ldr	r0, [pc, #276]	; (8002930 <can_fcu_read_data+0x138>)
 800281a:	f7fe fa99 	bl	8000d50 <Unpack_FCU_STATE_REQUEST_can_codegen>
 800281e:	4603      	mov	r3, r0
 8002820:	4a44      	ldr	r2, [pc, #272]	; (8002934 <can_fcu_read_data+0x13c>)
 8002822:	6013      	str	r3, [r2, #0]
		switch (state[0]) {
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <can_fcu_read_data+0x12c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d878      	bhi.n	800291e <can_fcu_read_data+0x126>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <can_fcu_read_data+0x3c>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	08002873 	.word	0x08002873
 800283c:	0800289d 	.word	0x0800289d
 8002840:	080028c7 	.word	0x080028c7
 8002844:	080028f1 	.word	0x080028f1
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284e:	483a      	ldr	r0, [pc, #232]	; (8002938 <can_fcu_read_data+0x140>)
 8002850:	f003 fcd0 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800285a:	4837      	ldr	r0, [pc, #220]	; (8002938 <can_fcu_read_data+0x140>)
 800285c:	f003 fcca 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
 8002862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002866:	4834      	ldr	r0, [pc, #208]	; (8002938 <can_fcu_read_data+0x140>)
 8002868:	f003 fcc4 	bl	80061f4 <HAL_GPIO_WritePin>
				bq76952_FETs_OFF(); // replace with all fets off function call
 800286c:	f7fe fe6d 	bl	800154a <bq76952_FETs_OFF>
				break;
 8002870:	e056      	b.n	8002920 <can_fcu_read_data+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002878:	482f      	ldr	r0, [pc, #188]	; (8002938 <can_fcu_read_data+0x140>)
 800287a:	f003 fcbb 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002884:	482c      	ldr	r0, [pc, #176]	; (8002938 <can_fcu_read_data+0x140>)
 8002886:	f003 fcb5 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002890:	4829      	ldr	r0, [pc, #164]	; (8002938 <can_fcu_read_data+0x140>)
 8002892:	f003 fcaf 	bl	80061f4 <HAL_GPIO_WritePin>
				bq76952_FETs_ON(); //replace with all fets on function call
 8002896:	f7fe fe2f 	bl	80014f8 <bq76952_FETs_ON>
				break;
 800289a:	e041      	b.n	8002920 <can_fcu_read_data+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028a2:	4825      	ldr	r0, [pc, #148]	; (8002938 <can_fcu_read_data+0x140>)
 80028a4:	f003 fca6 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ae:	4822      	ldr	r0, [pc, #136]	; (8002938 <can_fcu_read_data+0x140>)
 80028b0:	f003 fca0 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ba:	481f      	ldr	r0, [pc, #124]	; (8002938 <can_fcu_read_data+0x140>)
 80028bc:	f003 fc9a 	bl	80061f4 <HAL_GPIO_WritePin>
				bq76952_AFE_reset();// replace with afe reset function call
 80028c0:	f7fe fea6 	bl	8001610 <bq76952_AFE_reset>
				break;
 80028c4:	e02c      	b.n	8002920 <can_fcu_read_data+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028cc:	481a      	ldr	r0, [pc, #104]	; (8002938 <can_fcu_read_data+0x140>)
 80028ce:	f003 fc91 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028d8:	4817      	ldr	r0, [pc, #92]	; (8002938 <can_fcu_read_data+0x140>)
 80028da:	f003 fc8b 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e4:	4814      	ldr	r0, [pc, #80]	; (8002938 <can_fcu_read_data+0x140>)
 80028e6:	f003 fc85 	bl	80061f4 <HAL_GPIO_WritePin>
				bq76952_Charge();
 80028ea:	f7fe fe4d 	bl	8001588 <bq76952_Charge>
				break;
 80028ee:	e017      	b.n	8002920 <can_fcu_read_data+0x128>
			case 4:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4810      	ldr	r0, [pc, #64]	; (8002938 <can_fcu_read_data+0x140>)
 80028f8:	f003 fc7c 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <can_fcu_read_data+0x140>)
 8002904:	f003 fc76 	bl	80061f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8002908:	2201      	movs	r2, #1
 800290a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800290e:	480a      	ldr	r0, [pc, #40]	; (8002938 <can_fcu_read_data+0x140>)
 8002910:	f003 fc70 	bl	80061f4 <HAL_GPIO_WritePin>
				bq76952_Discharge();
 8002914:	f7fe fe5a 	bl	80015cc <bq76952_Discharge>
				break;
 8002918:	e002      	b.n	8002920 <can_fcu_read_data+0x128>
			default:
				break;
		}
		}
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <can_fcu_read_data+0x128>
				break;
 800291e:	bf00      	nop
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200002f4 	.word	0x200002f4
 8002928:	200002cc 	.word	0x200002cc
 800292c:	200002fc 	.word	0x200002fc
 8002930:	200001e0 	.word	0x200001e0
 8002934:	200002f0 	.word	0x200002f0
 8002938:	40020400 	.word	0x40020400

0800293c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <MX_DMA_Init+0x88>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <MX_DMA_Init+0x88>)
 800294c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <MX_DMA_Init+0x88>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <MX_DMA_Init+0x88>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <MX_DMA_Init+0x88>)
 8002968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_DMA_Init+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2105      	movs	r1, #5
 800297e:	200b      	movs	r0, #11
 8002980:	f002 fc4a 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002984:	200b      	movs	r0, #11
 8002986:	f002 fc73 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2105      	movs	r1, #5
 800298e:	2011      	movs	r0, #17
 8002990:	f002 fc42 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002994:	2011      	movs	r0, #17
 8002996:	f002 fc6b 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2105      	movs	r1, #5
 800299e:	2038      	movs	r0, #56	; 0x38
 80029a0:	f002 fc3a 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029a4:	2038      	movs	r0, #56	; 0x38
 80029a6:	f002 fc63 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2105      	movs	r1, #5
 80029ae:	203b      	movs	r0, #59	; 0x3b
 80029b0:	f002 fc32 	bl	8005218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80029b4:	203b      	movs	r0, #59	; 0x3b
 80029b6:	f002 fc5b 	bl	8005270 <HAL_NVIC_EnableIRQ>

}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80029d8:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <vApplicationGetIdleTaskMemory+0x30>)
 80029de:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000374 	.word	0x20000374
 80029f8:	20000428 	.word	0x20000428

080029fc <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b096      	sub	sp, #88	; 0x58
 8002a00:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */
	can_tx_queue = xQueueCreate(10, sizeof(uint32_t)); //to be used to queue the messages being sent on CAN line
 8002a02:	2200      	movs	r2, #0
 8002a04:	2104      	movs	r1, #4
 8002a06:	200a      	movs	r0, #10
 8002a08:	f007 fdd6 	bl	800a5b8 <xQueueGenericCreate>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <MX_FREERTOS_Init+0xb0>)
 8002a10:	6013      	str	r3, [r2, #0]
													//only 3 messages can be transmitted at once at the hardware level.
	can_rx_queue = xQueueCreate(10, sizeof(uint32_t));
 8002a12:	2200      	movs	r2, #0
 8002a14:	2104      	movs	r1, #4
 8002a16:	200a      	movs	r0, #10
 8002a18:	f007 fdce 	bl	800a5b8 <xQueueGenericCreate>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <MX_FREERTOS_Init+0xb4>)
 8002a20:	6013      	str	r3, [r2, #0]


	if(can_tx_queue != NULL)
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <MX_FREERTOS_Init+0xb0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <MX_FREERTOS_Init+0x3a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a30:	4820      	ldr	r0, [pc, #128]	; (8002ab4 <MX_FREERTOS_Init+0xb8>)
 8002a32:	f003 fbdf 	bl	80061f4 <HAL_GPIO_WritePin>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of APP_1HZ_TASK */
    osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <MX_FREERTOS_Init+0xbc>)
 8002a38:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002a3c:	461d      	mov	r5, r3
 8002a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f007 fc49 	bl	800a2e8 <osThreadCreate>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <MX_FREERTOS_Init+0xc0>)
 8002a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityNormal, 0, 128);
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_FREERTOS_Init+0xc4>)
 8002a5e:	f107 0420 	add.w	r4, r7, #32
 8002a62:	461d      	mov	r5, r3
 8002a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 8002a70:	f107 0320 	add.w	r3, r7, #32
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f007 fc36 	bl	800a2e8 <osThreadCreate>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <MX_FREERTOS_Init+0xc8>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityNormal, 0, 128);
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_FREERTOS_Init+0xcc>)
 8002a84:	1d3c      	adds	r4, r7, #4
 8002a86:	461d      	mov	r5, r3
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f007 fc25 	bl	800a2e8 <osThreadCreate>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <MX_FREERTOS_Init+0xd0>)
 8002aa2:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */
}
 8002aa4:	bf00      	nop
 8002aa6:	3758      	adds	r7, #88	; 0x58
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002aac:	2000036c 	.word	0x2000036c
 8002ab0:	20000370 	.word	0x20000370
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	0800c560 	.word	0x0800c560
 8002abc:	20000360 	.word	0x20000360
 8002ac0:	0800c57c 	.word	0x0800c57c
 8002ac4:	20000364 	.word	0x20000364
 8002ac8:	0800c598 	.word	0x0800c598
 8002acc:	20000368 	.word	0x20000368

08002ad0 <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const *argument)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1000;
 8002ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002adc:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 8002ade:	f008 fc0d 	bl	800b2fc <xTaskGetTickCount>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
    	//xSemaphoreTake(can_task_semaphore_handle, 10);
    	for(int i = 1;i<7;i++)
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e00c      	b.n	8002b06 <app_task_1Hz+0x36>
    	{
    		xQueueSend(can_tx_queue, &can_IDs[i], (TickType_t)10);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <app_task_1Hz+0x4c>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <app_task_1Hz+0x50>)
 8002af6:	1899      	adds	r1, r3, r2
 8002af8:	2300      	movs	r3, #0
 8002afa:	220a      	movs	r2, #10
 8002afc:	f007 fdb6 	bl	800a66c <xQueueGenericSend>
    	for(int i = 1;i<7;i++)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	ddef      	ble.n	8002aec <app_task_1Hz+0x1c>
    	}
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f008 fa60 	bl	800afd8 <vTaskDelayUntil>
    	for(int i = 1;i<7;i++)
 8002b18:	e7e5      	b.n	8002ae6 <app_task_1Hz+0x16>
 8002b1a:	bf00      	nop
 8002b1c:	2000036c 	.word	0x2000036c
 8002b20:	20000020 	.word	0x20000020

08002b24 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const *argument)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    uint16_t counter = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	82fb      	strh	r3, [r7, #22]
    const TickType_t xFrequency = 100;
 8002b30:	2364      	movs	r3, #100	; 0x64
 8002b32:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 8002b34:	f008 fbe2 	bl	800b2fc <xTaskGetTickCount>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
    //xSemaphoreTake(can_task_semaphore_handle, 1000);
    if(counter%5==0)
 8002b3c:	8afa      	ldrh	r2, [r7, #22]
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <app_task_10hz+0x64>)
 8002b40:	fba3 1302 	umull	r1, r3, r3, r2
 8002b44:	0899      	lsrs	r1, r3, #2
 8002b46:	460b      	mov	r3, r1
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <app_task_10hz+0x34>
    	can_fcu_read_data();
 8002b54:	f7ff fe50 	bl	80027f8 <can_fcu_read_data>
    counter++;
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	82fb      	strh	r3, [r7, #22]
    xQueueSend(can_tx_queue, &can_IDs[0],(TickType_t)10); //GaugeVit
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <app_task_10hz+0x68>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	220a      	movs	r2, #10
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <app_task_10hz+0x6c>)
 8002b68:	f007 fd80 	bl	800a66c <xQueueGenericSend>
    xQueueSend(can_tx_queue, &can_IDs[7],(TickType_t)10); //BMS Ovr
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <app_task_10hz+0x68>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	220a      	movs	r2, #10
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <app_task_10hz+0x70>)
 8002b76:	f007 fd79 	bl	800a66c <xQueueGenericSend>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	6939      	ldr	r1, [r7, #16]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f008 fa29 	bl	800afd8 <vTaskDelayUntil>
    if(counter%5==0)
 8002b86:	e7d9      	b.n	8002b3c <app_task_10hz+0x18>
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	2000036c 	.word	0x2000036c
 8002b90:	20000020 	.word	0x20000020
 8002b94:	2000003c 	.word	0x2000003c

08002b98 <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const *argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    uint32_t* pReceive;
    int counter = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
    const TickType_t xFrequency = 10;
 8002ba4:	230a      	movs	r3, #10
 8002ba6:	617b      	str	r3, [r7, #20]
    xLastWakeTime = xTaskGetTickCount();
 8002ba8:	f008 fba8 	bl	800b2fc <xTaskGetTickCount>
 8002bac:	4603      	mov	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]
    /* Infinite loop */
    for (;;)
    {
    	if(counter%2 == 0)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <app_task_100hz+0x26>
    	{
    		afe_data_read();
 8002bba:	f7ff f8d5 	bl	8001d68 <afe_data_read>
    	}
    		if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <app_task_100hz+0x9c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f007 ff30 	bl	800aa28 <uxQueueMessagesWaiting>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02b      	beq.n	8002c26 <app_task_100hz+0x8e>
    		{
    		//xSemaphoreTake(can_task_semaphore_handle, 10);
    		if(xQueueReceive(can_tx_queue, &pReceive, 100) == pdPASS)
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <app_task_100hz+0x9c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f107 010c 	add.w	r1, r7, #12
 8002bd6:	2264      	movs	r2, #100	; 0x64
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f007 fe45 	bl	800a868 <xQueueReceive>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d120      	bne.n	8002c26 <app_task_100hz+0x8e>
    		{
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002be4:	2201      	movs	r2, #1
 8002be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bea:	4813      	ldr	r0, [pc, #76]	; (8002c38 <app_task_100hz+0xa0>)
 8002bec:	f003 fb02 	bl	80061f4 <HAL_GPIO_WritePin>
    		for(int i=0;i<9;i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e014      	b.n	8002c20 <app_task_100hz+0x88>
    			{
    				if(pReceive == can_IDs[i])
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <app_task_100hz+0xa4>)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d109      	bne.n	8002c1a <app_task_100hz+0x82>
    				{
    					(func_ptrs[i])();
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <app_task_100hz+0xa8>)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	4798      	blx	r3
    					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c14:	4808      	ldr	r0, [pc, #32]	; (8002c38 <app_task_100hz+0xa0>)
 8002c16:	f003 fb1f 	bl	8006258 <HAL_GPIO_TogglePin>
    		for(int i=0;i<9;i++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	dde7      	ble.n	8002bf6 <app_task_100hz+0x5e>
    				}
    			}
    		}
    		}
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f008 f9d3 	bl	800afd8 <vTaskDelayUntil>
    	if(counter%2 == 0)
 8002c32:	e7bd      	b.n	8002bb0 <app_task_100hz+0x18>
 8002c34:	2000036c 	.word	0x2000036c
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	20000020 	.word	0x20000020
 8002c40:	20000000 	.word	0x20000000

08002c44 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a61      	ldr	r2, [pc, #388]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <MX_GPIO_Init+0x1a4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2106      	movs	r1, #6
 8002cea:	4840      	ldr	r0, [pc, #256]	; (8002dec <MX_GPIO_Init+0x1a8>)
 8002cec:	f003 fa82 	bl	80061f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8002cf6:	483e      	ldr	r0, [pc, #248]	; (8002df0 <MX_GPIO_Init+0x1ac>)
 8002cf8:	f003 fa7c 	bl	80061f4 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f24f 0104 	movw	r1, #61444	; 0xf004
 8002d02:	483c      	ldr	r0, [pc, #240]	; (8002df4 <MX_GPIO_Init+0x1b0>)
 8002d04:	f003 fa76 	bl	80061f4 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8002d08:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8002d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4834      	ldr	r0, [pc, #208]	; (8002df0 <MX_GPIO_Init+0x1ac>)
 8002d1e:	f002 ff45 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8002d22:	f248 1319 	movw	r3, #33049	; 0x8119
 8002d26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	482d      	ldr	r0, [pc, #180]	; (8002dec <MX_GPIO_Init+0x1a8>)
 8002d38:	f002 ff38 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d40:	2301      	movs	r3, #1
 8002d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4826      	ldr	r0, [pc, #152]	; (8002dec <MX_GPIO_Init+0x1a8>)
 8002d54:	f002 ff2a 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002d58:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8002d5c:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	481f      	ldr	r0, [pc, #124]	; (8002df0 <MX_GPIO_Init+0x1ac>)
 8002d72:	f002 ff1b 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8002d76:	2303      	movs	r3, #3
 8002d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	481a      	ldr	r0, [pc, #104]	; (8002df4 <MX_GPIO_Init+0x1b0>)
 8002d8a:	f002 ff0f 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002d8e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8002d92:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d94:	2301      	movs	r3, #1
 8002d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	4813      	ldr	r0, [pc, #76]	; (8002df4 <MX_GPIO_Init+0x1b0>)
 8002da8:	f002 ff00 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8002dac:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8002db0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db2:	2303      	movs	r3, #3
 8002db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_GPIO_Init+0x1b0>)
 8002dc2:	f002 fef3 	bl	8005bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <MX_GPIO_Init+0x1b4>)
 8002dda:	f002 fee7 	bl	8005bac <HAL_GPIO_Init>

}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <MX_I2C1_Init+0x54>)
 8002e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <MX_I2C1_Init+0x58>)
 8002e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e14:	22a8      	movs	r2, #168	; 0xa8
 8002e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e38:	4804      	ldr	r0, [pc, #16]	; (8002e4c <MX_I2C1_Init+0x50>)
 8002e3a:	f003 fa35 	bl	80062a8 <HAL_I2C_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e44:	f000 f95a 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000628 	.word	0x20000628
 8002e50:	40005400 	.word	0x40005400
 8002e54:	000186a0 	.word	0x000186a0

08002e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_I2C_MspInit+0x160>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f040 809a 	bne.w	8002fb0 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4a4d      	ldr	r2, [pc, #308]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e98:	23c0      	movs	r3, #192	; 0xc0
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9c:	2312      	movs	r3, #18
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4843      	ldr	r0, [pc, #268]	; (8002fc0 <HAL_I2C_MspInit+0x168>)
 8002eb4:	f002 fe7a 	bl	8005bac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_I2C_MspInit+0x164>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002ed6:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <HAL_I2C_MspInit+0x170>)
 8002ed8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee8:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eee:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f08:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f0e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002f16:	482b      	ldr	r0, [pc, #172]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f18:	f002 f9c2 	bl	80052a0 <HAL_DMA_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002f22:	f000 f8eb 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2c:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <HAL_I2C_MspInit+0x16c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_I2C_MspInit+0x178>)
 8002f36:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f52:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f6c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f74:	4815      	ldr	r0, [pc, #84]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f76:	f002 f993 	bl	80052a0 <HAL_DMA_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8002f80:	f000 f8bc 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_I2C_MspInit+0x174>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2105      	movs	r1, #5
 8002f94:	201f      	movs	r0, #31
 8002f96:	f002 f93f 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f9a:	201f      	movs	r0, #31
 8002f9c:	f002 f968 	bl	8005270 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	2020      	movs	r0, #32
 8002fa6:	f002 f937 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002faa:	2020      	movs	r0, #32
 8002fac:	f002 f960 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	2000067c 	.word	0x2000067c
 8002fc8:	40026010 	.word	0x40026010
 8002fcc:	200006dc 	.word	0x200006dc
 8002fd0:	400260a0 	.word	0x400260a0

08002fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd8:	f000 fb82 	bl	80036e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 8002fdc:	f000 f80a 	bl	8002ff4 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8002fe0:	f7ff f814 	bl	800200c <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8002fe4:	f7ff f82a 	bl	800203c <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002fe8:	f7ff fd08 	bl	80029fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fec:	f007 f975 	bl	800a2da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <main+0x1c>
	...

08002ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b094      	sub	sp, #80	; 0x50
 8002ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffa:	f107 031c 	add.w	r3, r7, #28
 8002ffe:	2234      	movs	r2, #52	; 0x34
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f009 f9bc 	bl	800c380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003008:	f107 0308 	add.w	r3, r7, #8
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <SystemClock_Config+0xdc>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <SystemClock_Config+0xdc>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6413      	str	r3, [r2, #64]	; 0x40
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <SystemClock_Config+0xdc>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <SystemClock_Config+0xe0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a25      	ldr	r2, [pc, #148]	; (80030d4 <SystemClock_Config+0xe0>)
 800303e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <SystemClock_Config+0xe0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003050:	2301      	movs	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800305a:	2302      	movs	r3, #2
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800305e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003064:	2304      	movs	r3, #4
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003068:	23b4      	movs	r3, #180	; 0xb4
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800306c:	2302      	movs	r3, #2
 800306e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003070:	2302      	movs	r3, #2
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003074:	2302      	movs	r3, #2
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fc47 	bl	8008910 <HAL_RCC_OscConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003088:	f000 f838 	bl	80030fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800308c:	f004 ffb4 	bl	8007ff8 <HAL_PWREx_EnableOverDrive>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003096:	f000 f831 	bl	80030fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800309a:	230f      	movs	r3, #15
 800309c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800309e:	2302      	movs	r3, #2
 80030a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	2105      	movs	r1, #5
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 ffed 	bl	8008098 <HAL_RCC_ClockConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80030c4:	f000 f81a 	bl	80030fc <Error_Handler>
  }
}
 80030c8:	bf00      	nop
 80030ca:	3750      	adds	r7, #80	; 0x50
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030ea:	f000 fb1b 	bl	8003724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000

080030fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003100:	b672      	cpsid	i
}
 8003102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003104:	e7fe      	b.n	8003104 <Error_Handler+0x8>

08003106 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <MX_SPI1_Init+0x64>)
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <MX_SPI1_Init+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <MX_SPI1_Init+0x64>)
 8003128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800312c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <MX_SPI1_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_SPI1_Init+0x64>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <MX_SPI1_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_SPI1_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <MX_SPI1_Init+0x64>)
 8003148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_SPI1_Init+0x64>)
 8003150:	2238      	movs	r2, #56	; 0x38
 8003152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <MX_SPI1_Init+0x64>)
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_SPI1_Init+0x64>)
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <MX_SPI1_Init+0x64>)
 8003162:	2200      	movs	r2, #0
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <MX_SPI1_Init+0x64>)
 8003168:	220a      	movs	r2, #10
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <MX_SPI1_Init+0x64>)
 800316e:	f005 ff2b 	bl	8008fc8 <HAL_SPI_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003178:	f7ff ffc0 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	2000073c 	.word	0x2000073c
 8003184:	40013000 	.word	0x40013000

08003188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_SPI_MspInit+0x150>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	f040 8092 	bne.w	80032d0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b4:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ba:	6453      	str	r3, [r2, #68]	; 0x44
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6313      	str	r3, [r2, #48]	; 0x30
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <HAL_SPI_MspInit+0x154>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031e4:	23e0      	movs	r3, #224	; 0xe0
 80031e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031f4:	2305      	movs	r3, #5
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4838      	ldr	r0, [pc, #224]	; (80032e0 <HAL_SPI_MspInit+0x158>)
 8003200:	f002 fcd4 	bl	8005bac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003206:	4a38      	ldr	r2, [pc, #224]	; (80032e8 <HAL_SPI_MspInit+0x160>)
 8003208:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800320c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003210:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003232:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800323a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800323e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003246:	4827      	ldr	r0, [pc, #156]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 8003248:	f002 f82a 	bl	80052a0 <HAL_DMA_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8003252:	f7ff ff53 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800325a:	64da      	str	r2, [r3, #76]	; 0x4c
 800325c:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_SPI_MspInit+0x15c>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_SPI_MspInit+0x168>)
 8003266:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_SPI_MspInit+0x164>)
 800326a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800326e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003272:	2240      	movs	r2, #64	; 0x40
 8003274:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_SPI_MspInit+0x164>)
 800327e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003282:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_SPI_MspInit+0x164>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_SPI_MspInit+0x164>)
 8003298:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800329c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_SPI_MspInit+0x164>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032a4:	4811      	ldr	r0, [pc, #68]	; (80032ec <HAL_SPI_MspInit+0x164>)
 80032a6:	f001 fffb 	bl	80052a0 <HAL_DMA_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80032b0:	f7ff ff24 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_SPI_MspInit+0x164>)
 80032b8:	649a      	str	r2, [r3, #72]	; 0x48
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_SPI_MspInit+0x164>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2105      	movs	r1, #5
 80032c4:	2023      	movs	r0, #35	; 0x23
 80032c6:	f001 ffa7 	bl	8005218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80032ca:	2023      	movs	r0, #35	; 0x23
 80032cc:	f001 ffd0 	bl	8005270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40013000 	.word	0x40013000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	200007bc 	.word	0x200007bc
 80032e8:	40026410 	.word	0x40026410
 80032ec:	2000081c 	.word	0x2000081c
 80032f0:	40026458 	.word	0x40026458

080032f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_MspInit+0x54>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_MspInit+0x54>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003308:	6453      	str	r3, [r2, #68]	; 0x44
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_MspInit+0x54>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_MspInit+0x54>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_MspInit+0x54>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_MspInit+0x54>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	210f      	movs	r1, #15
 8003336:	f06f 0001 	mvn.w	r0, #1
 800333a:	f001 ff6d 	bl	8005218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <HAL_InitTick+0xd4>)
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	4a2e      	ldr	r2, [pc, #184]	; (8003420 <HAL_InitTick+0xd4>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6453      	str	r3, [r2, #68]	; 0x44
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_InitTick+0xd4>)
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003378:	f107 020c 	add.w	r2, r7, #12
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f005 f862 	bl	800844c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003388:	f005 f84c 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 800338c:	4603      	mov	r3, r0
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <HAL_InitTick+0xd8>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	3b01      	subs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_InitTick+0xdc>)
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_InitTick+0xe0>)
 80033a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_InitTick+0xdc>)
 80033a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_InitTick+0xdc>)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80033b4:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_InitTick+0xdc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_InitTick+0xdc>)
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c0:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_InitTick+0xdc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80033c6:	4818      	ldr	r0, [pc, #96]	; (8003428 <HAL_InitTick+0xdc>)
 80033c8:	f006 fba2 	bl	8009b10 <HAL_TIM_Base_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80033d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11b      	bne.n	8003412 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033da:	4813      	ldr	r0, [pc, #76]	; (8003428 <HAL_InitTick+0xdc>)
 80033dc:	f006 fc92 	bl	8009d04 <HAL_TIM_Base_Start_IT>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80033e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d111      	bne.n	8003412 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033ee:	2019      	movs	r0, #25
 80033f0:	f001 ff3e 	bl	8005270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d808      	bhi.n	800340c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80033fa:	2200      	movs	r2, #0
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	2019      	movs	r0, #25
 8003400:	f001 ff0a 	bl	8005218 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003404:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <HAL_InitTick+0xe4>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e002      	b.n	8003412 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003416:	4618      	mov	r0, r3
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	431bde83 	.word	0x431bde83
 8003428:	2000087c 	.word	0x2000087c
 800342c:	40010000 	.word	0x40010000
 8003430:	20000044 	.word	0x20000044

08003434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003438:	e7fe      	b.n	8003438 <NMI_Handler+0x4>

0800343a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343e:	e7fe      	b.n	800343e <HardFault_Handler+0x4>

08003440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003444:	e7fe      	b.n	8003444 <MemManage_Handler+0x4>

08003446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <BusFault_Handler+0x4>

0800344c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <UsageFault_Handler+0x4>

08003452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <WWDG_IRQHandler+0x10>)
 8003466:	f006 fef7 	bl	800a258 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200008c4 	.word	0x200008c4

08003474 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA1_Stream0_IRQHandler+0x10>)
 800347a:	f002 f94d 	bl	8005718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000067c 	.word	0x2000067c

08003488 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream6_IRQHandler+0x10>)
 800348e:	f002 f943 	bl	8005718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200006dc 	.word	0x200006dc

0800349c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <CAN1_TX_IRQHandler+0x10>)
 80034a2:	f001 fbad 	bl	8004c00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200002fc 	.word	0x200002fc

080034b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <CAN1_RX0_IRQHandler+0x10>)
 80034b6:	f001 fba3 	bl	8004c00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200002fc 	.word	0x200002fc

080034c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <CAN1_RX1_IRQHandler+0x10>)
 80034ca:	f001 fb99 	bl	8004c00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200002fc 	.word	0x200002fc

080034d8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <CAN1_SCE_IRQHandler+0x10>)
 80034de:	f001 fb8f 	bl	8004c00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200002fc 	.word	0x200002fc

080034ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80034f2:	f006 fccd 	bl	8009e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	2000087c 	.word	0x2000087c

08003500 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <I2C1_EV_IRQHandler+0x10>)
 8003506:	f003 f89b 	bl	8006640 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000628 	.word	0x20000628

08003514 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <I2C1_ER_IRQHandler+0x10>)
 800351a:	f003 fa02 	bl	8006922 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000628 	.word	0x20000628

08003528 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <SPI1_IRQHandler+0x10>)
 800352e:	f006 f8bf 	bl	80096b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000073c 	.word	0x2000073c

0800353c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA2_Stream0_IRQHandler+0x10>)
 8003542:	f002 f8e9 	bl	8005718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200007bc 	.word	0x200007bc

08003550 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <DMA2_Stream3_IRQHandler+0x10>)
 8003556:	f002 f8df 	bl	8005718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2000081c 	.word	0x2000081c

08003564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <SystemInit+0x20>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <SystemInit+0x20>)
 8003570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800358c:	480d      	ldr	r0, [pc, #52]	; (80035c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800358e:	490e      	ldr	r1, [pc, #56]	; (80035c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003590:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003594:	e002      	b.n	800359c <LoopCopyDataInit>

08003596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800359a:	3304      	adds	r3, #4

0800359c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800359c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800359e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a0:	d3f9      	bcc.n	8003596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035a4:	4c0b      	ldr	r4, [pc, #44]	; (80035d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a8:	e001      	b.n	80035ae <LoopFillZerobss>

080035aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035ac:	3204      	adds	r2, #4

080035ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b0:	d3fb      	bcc.n	80035aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035b2:	f7ff ffd7 	bl	8003564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035b6:	f008 feb1 	bl	800c31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ba:	f7ff fd0b 	bl	8002fd4 <main>
  bx  lr    
 80035be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035c8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80035cc:	0800c888 	.word	0x0800c888
  ldr r2, =_sbss
 80035d0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80035d4:	20010440 	.word	0x20010440

080035d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035d8:	e7fe      	b.n	80035d8 <ADC_IRQHandler>

080035da <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80035e8:	b672      	cpsid	i
}
 80035ea:	bf00      	nop
 80035ec:	f7ff fd86 	bl	80030fc <Error_Handler>
 80035f0:	e7fe      	b.n	80035f0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7a1b      	ldrb	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d904      	bls.n	8003604 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80035fa:	b672      	cpsid	i
}
 80035fc:	bf00      	nop
 80035fe:	f7ff fd7d 	bl	80030fc <Error_Handler>
 8003602:	e7fe      	b.n	8003602 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7a1b      	ldrb	r3, [r3, #8]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	b2d1      	uxtb	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	7211      	strb	r1, [r2, #8]
 8003610:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003612:	f3ef 8211 	mrs	r2, BASEPRI
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60fa      	str	r2, [r7, #12]
 8003628:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003648:	b672      	cpsid	i
}
 800364a:	bf00      	nop
 800364c:	f7ff fd56 	bl	80030fc <Error_Handler>
 8003650:	e7fe      	b.n	8003650 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7a1b      	ldrb	r3, [r3, #8]
 8003656:	3b01      	subs	r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7a1b      	ldrb	r3, [r3, #8]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d904      	bls.n	8003670 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003666:	b672      	cpsid	i
}
 8003668:	bf00      	nop
 800366a:	f7ff fd47 	bl	80030fc <Error_Handler>
 800366e:	e7fe      	b.n	800366e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7a1b      	ldrb	r3, [r3, #8]
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003684:	bf00      	nop
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800369c:	b672      	cpsid	i
}
 800369e:	bf00      	nop
 80036a0:	f7ff fd2c 	bl	80030fc <Error_Handler>
 80036a4:	e7fe      	b.n	80036a4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff96 	bl	80035da <stm32_lock_acquire>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036c4:	b672      	cpsid	i
}
 80036c6:	bf00      	nop
 80036c8:	f7ff fd18 	bl	80030fc <Error_Handler>
 80036cc:	e7fe      	b.n	80036cc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffb2 	bl	800363a <stm32_lock_release>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_Init+0x40>)
 80036ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_Init+0x40>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_Init+0x40>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	2003      	movs	r0, #3
 800370a:	f001 fd65 	bl	80051d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800370e:	200f      	movs	r0, #15
 8003710:	f7ff fe1c 	bl	800334c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003714:	f7ff fdee 	bl	80032f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00

08003724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x20>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_IncTick+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4413      	add	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_IncTick+0x24>)
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000048 	.word	0x20000048
 8003748:	200008e4 	.word	0x200008e4

0800374c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_GetTick+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	200008e4 	.word	0x200008e4

08003764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff ffee 	bl	800374c <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d005      	beq.n	800378a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_Delay+0x44>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800378a:	bf00      	nop
 800378c:	f7ff ffde 	bl	800374c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d8f7      	bhi.n	800378c <HAL_Delay+0x28>
  {
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000048 	.word	0x20000048

080037ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e15c      	b.n	8003a7c <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a8e      	ldr	r2, [pc, #568]	; (8003a00 <HAL_ADC_Init+0x254>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_ADC_Init+0x3e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a8c      	ldr	r2, [pc, #560]	; (8003a04 <HAL_ADC_Init+0x258>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_ADC_Init+0x3e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a8b      	ldr	r2, [pc, #556]	; (8003a08 <HAL_ADC_Init+0x25c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_ADC_Init+0x3e>
 80037e0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80037e4:	4889      	ldr	r0, [pc, #548]	; (8003a0c <HAL_ADC_Init+0x260>)
 80037e6:	f7ff fc8e 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_ADC_Init+0x6e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d00e      	beq.n	800381a <HAL_ADC_Init+0x6e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003804:	d009      	beq.n	800381a <HAL_ADC_Init+0x6e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800380e:	d004      	beq.n	800381a <HAL_ADC_Init+0x6e>
 8003810:	f240 1143 	movw	r1, #323	; 0x143
 8003814:	487d      	ldr	r0, [pc, #500]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003816:	f7ff fc76 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d013      	beq.n	800384a <HAL_ADC_Init+0x9e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800382a:	d00e      	beq.n	800384a <HAL_ADC_Init+0x9e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003834:	d009      	beq.n	800384a <HAL_ADC_Init+0x9e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800383e:	d004      	beq.n	800384a <HAL_ADC_Init+0x9e>
 8003840:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003844:	4871      	ldr	r0, [pc, #452]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003846:	f7ff fc5e 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_ADC_Init+0xb8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d004      	beq.n	8003864 <HAL_ADC_Init+0xb8>
 800385a:	f240 1145 	movw	r1, #325	; 0x145
 800385e:	486b      	ldr	r0, [pc, #428]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003860:	f7ff fc51 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7e1b      	ldrb	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_ADC_Init+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7e1b      	ldrb	r3, [r3, #24]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d004      	beq.n	800387e <HAL_ADC_Init+0xd2>
 8003874:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003878:	4864      	ldr	r0, [pc, #400]	; (8003a0c <HAL_ADC_Init+0x260>)
 800387a:	f7ff fc44 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d054      	beq.n	8003930 <HAL_ADC_Init+0x184>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388e:	d04f      	beq.n	8003930 <HAL_ADC_Init+0x184>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003898:	d04a      	beq.n	8003930 <HAL_ADC_Init+0x184>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a2:	d045      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ac:	d040      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80038b6:	d03b      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038c0:	d036      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80038ca:	d031      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d4:	d02c      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80038de:	d027      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80038e8:	d022      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80038f2:	d01d      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80038fc:	d018      	beq.n	8003930 <HAL_ADC_Init+0x184>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003906:	d013      	beq.n	8003930 <HAL_ADC_Init+0x184>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003910:	d00e      	beq.n	8003930 <HAL_ADC_Init+0x184>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800391a:	d009      	beq.n	8003930 <HAL_ADC_Init+0x184>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_ADC_Init+0x264>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_ADC_Init+0x184>
 8003926:	f240 1147 	movw	r1, #327	; 0x147
 800392a:	4838      	ldr	r0, [pc, #224]	; (8003a0c <HAL_ADC_Init+0x260>)
 800392c:	f7ff fbeb 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <HAL_ADC_Init+0x1a0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003940:	d004      	beq.n	800394c <HAL_ADC_Init+0x1a0>
 8003942:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003946:	4831      	ldr	r0, [pc, #196]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003948:	f7ff fbdd 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_ADC_Init+0x1b0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b10      	cmp	r3, #16
 800395a:	d904      	bls.n	8003966 <HAL_ADC_Init+0x1ba>
 800395c:	f240 1149 	movw	r1, #329	; 0x149
 8003960:	482a      	ldr	r0, [pc, #168]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003962:	f7ff fbd0 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_ADC_Init+0x1d8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003976:	2b01      	cmp	r3, #1
 8003978:	d004      	beq.n	8003984 <HAL_ADC_Init+0x1d8>
 800397a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800397e:	4823      	ldr	r0, [pc, #140]	; (8003a0c <HAL_ADC_Init+0x260>)
 8003980:	f7ff fbc1 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00c      	beq.n	80039a6 <HAL_ADC_Init+0x1fa>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_ADC_Init+0x1fa>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_Init+0x1fa>
 800399c:	f240 114b 	movw	r1, #331	; 0x14b
 80039a0:	481a      	ldr	r0, [pc, #104]	; (8003a0c <HAL_ADC_Init+0x260>)
 80039a2:	f7ff fbb0 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_ADC_Init+0x218>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d004      	beq.n	80039c4 <HAL_ADC_Init+0x218>
 80039ba:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80039be:	4813      	ldr	r0, [pc, #76]	; (8003a0c <HAL_ADC_Init+0x260>)
 80039c0:	f7ff fba1 	bl	8003106 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_ADC_Init+0x264>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d022      	beq.n	8003a14 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01e      	beq.n	8003a14 <HAL_ADC_Init+0x268>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039de:	d019      	beq.n	8003a14 <HAL_ADC_Init+0x268>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e8:	d014      	beq.n	8003a14 <HAL_ADC_Init+0x268>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f2:	d00f      	beq.n	8003a14 <HAL_ADC_Init+0x268>
 80039f4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80039f8:	4804      	ldr	r0, [pc, #16]	; (8003a0c <HAL_ADC_Init+0x260>)
 80039fa:	f7ff fb84 	bl	8003106 <assert_failed>
 80039fe:	e009      	b.n	8003a14 <HAL_ADC_Init+0x268>
 8003a00:	40012000 	.word	0x40012000
 8003a04:	40012100 	.word	0x40012100
 8003a08:	40012200 	.word	0x40012200
 8003a0c:	0800c5b4 	.word	0x0800c5b4
 8003a10:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe fb7b 	bl	8002118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d118      	bne.n	8003a6e <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a44:	f023 0302 	bic.w	r3, r3, #2
 8003a48:	f043 0202 	orr.w	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f98d 	bl	8003d70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a6c:	e001      	b.n	8003a72 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b12      	cmp	r3, #18
 8003a98:	d909      	bls.n	8003aae <HAL_ADC_ConfigChannel+0x2a>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x2a>
 8003aa4:	f240 618b 	movw	r1, #1675	; 0x68b
 8003aa8:	4870      	ldr	r0, [pc, #448]	; (8003c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8003aaa:	f7ff fb2c 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x3a>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d904      	bls.n	8003ac8 <HAL_ADC_ConfigChannel+0x44>
 8003abe:	f240 618c 	movw	r1, #1676	; 0x68c
 8003ac2:	486a      	ldr	r0, [pc, #424]	; (8003c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8003ac4:	f7ff fb1f 	bl	8003106 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d01c      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d018      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d014      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d010      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d00c      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d008      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b07      	cmp	r3, #7
 8003b06:	d004      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x8e>
 8003b08:	f240 618d 	movw	r1, #1677	; 0x68d
 8003b0c:	4857      	ldr	r0, [pc, #348]	; (8003c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8003b0e:	f7ff fafa 	bl	8003106 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x9c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e118      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x2ce>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b09      	cmp	r3, #9
 8003b2e:	d925      	bls.n	8003b7c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4613      	mov	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4413      	add	r3, r2
 8003b44:	3b1e      	subs	r3, #30
 8003b46:	2207      	movs	r2, #7
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	400a      	ands	r2, r1
 8003b54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68d9      	ldr	r1, [r3, #12]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4618      	mov	r0, r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4403      	add	r3, r0
 8003b6e:	3b1e      	subs	r3, #30
 8003b70:	409a      	lsls	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	e022      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	2207      	movs	r2, #7
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6919      	ldr	r1, [r3, #16]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4403      	add	r3, r0
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d824      	bhi.n	8003c14 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	3b05      	subs	r3, #5
 8003bdc:	221f      	movs	r2, #31
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43da      	mvns	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	400a      	ands	r2, r1
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	3b05      	subs	r3, #5
 8003c06:	fa00 f203 	lsl.w	r2, r0, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
 8003c12:	e051      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d829      	bhi.n	8003c70 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b23      	subs	r3, #35	; 0x23
 8003c2e:	221f      	movs	r2, #31
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43da      	mvns	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	3b23      	subs	r3, #35	; 0x23
 8003c58:	fa00 f203 	lsl.w	r2, r0, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
 8003c64:	e028      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x234>
 8003c66:	bf00      	nop
 8003c68:	10000012 	.word	0x10000012
 8003c6c:	0800c5b4 	.word	0x0800c5b4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	3b41      	subs	r3, #65	; 0x41
 8003c82:	221f      	movs	r2, #31
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	400a      	ands	r2, r1
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	3b41      	subs	r3, #65	; 0x41
 8003cac:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_ADC_ConfigChannel+0x2d8>)
 8003cba:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <HAL_ADC_ConfigChannel+0x2dc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x262>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b12      	cmp	r3, #18
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <HAL_ADC_ConfigChannel+0x2dc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d12b      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x2c4>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_ADC_ConfigChannel+0x2e0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x27e>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b11      	cmp	r3, #17
 8003d00:	d122      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_ADC_ConfigChannel+0x2e0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d111      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_ADC_ConfigChannel+0x2e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <HAL_ADC_ConfigChannel+0x2e8>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9a      	lsrs	r2, r3, #18
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d3a:	e002      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f9      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40012300 	.word	0x40012300
 8003d60:	40012000 	.word	0x40012000
 8003d64:	10000012 	.word	0x10000012
 8003d68:	20000040 	.word	0x20000040
 8003d6c:	431bde83 	.word	0x431bde83

08003d70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d78:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <ADC_Init+0x208>)
 8003d7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	4a5e      	ldr	r2, [pc, #376]	; (8003f7c <ADC_Init+0x20c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e00f      	b.n	8003e6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0202 	bic.w	r2, r2, #2
 8003e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6899      	ldr	r1, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7e1b      	ldrb	r3, [r3, #24]
 8003e88:	005a      	lsls	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d028      	beq.n	8003eee <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <ADC_Init+0x13c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d904      	bls.n	8003eb6 <ADC_Init+0x146>
 8003eac:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003eb0:	4833      	ldr	r0, [pc, #204]	; (8003f80 <ADC_Init+0x210>)
 8003eb2:	f7ff f928 	bl	8003106 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ed4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	035a      	lsls	r2, r3, #13
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e007      	b.n	8003efe <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	051a      	lsls	r2, r3, #20
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f40:	025a      	lsls	r2, r3, #9
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6899      	ldr	r1, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	029a      	lsls	r2, r3, #10
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40012300 	.word	0x40012300
 8003f7c:	0f000001 	.word	0x0f000001
 8003f80:	0800c5b4 	.word	0x0800c5b4

08003f84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e243      	b.n	800441e <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a93      	ldr	r2, [pc, #588]	; (80041e8 <HAL_CAN_Init+0x264>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_CAN_Init+0x30>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a91      	ldr	r2, [pc, #580]	; (80041ec <HAL_CAN_Init+0x268>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_CAN_Init+0x30>
 8003faa:	f240 111d 	movw	r1, #285	; 0x11d
 8003fae:	4890      	ldr	r0, [pc, #576]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8003fb0:	f7ff f8a9 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7e1b      	ldrb	r3, [r3, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_CAN_Init+0x4a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7e1b      	ldrb	r3, [r3, #24]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d004      	beq.n	8003fce <HAL_CAN_Init+0x4a>
 8003fc4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003fc8:	4889      	ldr	r0, [pc, #548]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8003fca:	f7ff f89c 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7e5b      	ldrb	r3, [r3, #25]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_CAN_Init+0x64>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7e5b      	ldrb	r3, [r3, #25]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d004      	beq.n	8003fe8 <HAL_CAN_Init+0x64>
 8003fde:	f240 111f 	movw	r1, #287	; 0x11f
 8003fe2:	4883      	ldr	r0, [pc, #524]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8003fe4:	f7ff f88f 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7e9b      	ldrb	r3, [r3, #26]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_CAN_Init+0x7e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7e9b      	ldrb	r3, [r3, #26]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d004      	beq.n	8004002 <HAL_CAN_Init+0x7e>
 8003ff8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003ffc:	487c      	ldr	r0, [pc, #496]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8003ffe:	f7ff f882 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7edb      	ldrb	r3, [r3, #27]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_CAN_Init+0x98>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7edb      	ldrb	r3, [r3, #27]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d004      	beq.n	800401c <HAL_CAN_Init+0x98>
 8004012:	f240 1121 	movw	r1, #289	; 0x121
 8004016:	4876      	ldr	r0, [pc, #472]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8004018:	f7ff f875 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	7f1b      	ldrb	r3, [r3, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_CAN_Init+0xb2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7f1b      	ldrb	r3, [r3, #28]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d004      	beq.n	8004036 <HAL_CAN_Init+0xb2>
 800402c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004030:	486f      	ldr	r0, [pc, #444]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8004032:	f7ff f868 	bl	8003106 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7f5b      	ldrb	r3, [r3, #29]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_CAN_Init+0xcc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7f5b      	ldrb	r3, [r3, #29]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d004      	beq.n	8004050 <HAL_CAN_Init+0xcc>
 8004046:	f240 1123 	movw	r1, #291	; 0x123
 800404a:	4869      	ldr	r0, [pc, #420]	; (80041f0 <HAL_CAN_Init+0x26c>)
 800404c:	f7ff f85b 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_CAN_Init+0xfc>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d00e      	beq.n	8004080 <HAL_CAN_Init+0xfc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406a:	d009      	beq.n	8004080 <HAL_CAN_Init+0xfc>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004074:	d004      	beq.n	8004080 <HAL_CAN_Init+0xfc>
 8004076:	f44f 7192 	mov.w	r1, #292	; 0x124
 800407a:	485d      	ldr	r0, [pc, #372]	; (80041f0 <HAL_CAN_Init+0x26c>)
 800407c:	f7ff f843 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_CAN_Init+0x12c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004090:	d00e      	beq.n	80040b0 <HAL_CAN_Init+0x12c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800409a:	d009      	beq.n	80040b0 <HAL_CAN_Init+0x12c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a4:	d004      	beq.n	80040b0 <HAL_CAN_Init+0x12c>
 80040a6:	f240 1125 	movw	r1, #293	; 0x125
 80040aa:	4851      	ldr	r0, [pc, #324]	; (80041f0 <HAL_CAN_Init+0x26c>)
 80040ac:	f7ff f82b 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d04f      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d04a      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ca:	d045      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040d4:	d040      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040de:	d03b      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e8:	d036      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80040f2:	d031      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80040fc:	d02c      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004106:	d027      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8004110:	d022      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800411a:	d01d      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8004124:	d018      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800412e:	d013      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8004138:	d00e      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004142:	d009      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800414c:	d004      	beq.n	8004158 <HAL_CAN_Init+0x1d4>
 800414e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004152:	4827      	ldr	r0, [pc, #156]	; (80041f0 <HAL_CAN_Init+0x26c>)
 8004154:	f7fe ffd7 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d027      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d022      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004172:	d01d      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417c:	d018      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004186:	d013      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004190:	d00e      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800419a:	d009      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80041a4:	d004      	beq.n	80041b0 <HAL_CAN_Init+0x22c>
 80041a6:	f240 1127 	movw	r1, #295	; 0x127
 80041aa:	4811      	ldr	r0, [pc, #68]	; (80041f0 <HAL_CAN_Init+0x26c>)
 80041ac:	f7fe ffab 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_CAN_Init+0x23e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d904      	bls.n	80041cc <HAL_CAN_Init+0x248>
 80041c2:	f44f 7194 	mov.w	r1, #296	; 0x128
 80041c6:	480a      	ldr	r0, [pc, #40]	; (80041f0 <HAL_CAN_Init+0x26c>)
 80041c8:	f7fe ff9d 	bl	8003106 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d13d      	bne.n	8004254 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a06      	ldr	r2, [pc, #24]	; (80041f4 <HAL_CAN_Init+0x270>)
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <HAL_CAN_Init+0x274>)
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
 80041e4:	e00a      	b.n	80041fc <HAL_CAN_Init+0x278>
 80041e6:	bf00      	nop
 80041e8:	40006400 	.word	0x40006400
 80041ec:	40006800 	.word	0x40006800
 80041f0:	0800c5ec 	.word	0x0800c5ec
 80041f4:	080021a1 	.word	0x080021a1
 80041f8:	08005003 	.word	0x08005003
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a8a      	ldr	r2, [pc, #552]	; (8004428 <HAL_CAN_Init+0x4a4>)
 8004200:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a89      	ldr	r2, [pc, #548]	; (800442c <HAL_CAN_Init+0x4a8>)
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a89      	ldr	r2, [pc, #548]	; (8004430 <HAL_CAN_Init+0x4ac>)
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a88      	ldr	r2, [pc, #544]	; (8004434 <HAL_CAN_Init+0x4b0>)
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a88      	ldr	r2, [pc, #544]	; (8004438 <HAL_CAN_Init+0x4b4>)
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a87      	ldr	r2, [pc, #540]	; (800443c <HAL_CAN_Init+0x4b8>)
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a87      	ldr	r2, [pc, #540]	; (8004440 <HAL_CAN_Init+0x4bc>)
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a86      	ldr	r2, [pc, #536]	; (8004444 <HAL_CAN_Init+0x4c0>)
 800422a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a86      	ldr	r2, [pc, #536]	; (8004448 <HAL_CAN_Init+0x4c4>)
 8004230:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a85      	ldr	r2, [pc, #532]	; (800444c <HAL_CAN_Init+0x4c8>)
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a85      	ldr	r2, [pc, #532]	; (8004450 <HAL_CAN_Init+0x4cc>)
 800423c:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a82      	ldr	r2, [pc, #520]	; (8004454 <HAL_CAN_Init+0x4d0>)
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004264:	f7ff fa72 	bl	800374c <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800426a:	e012      	b.n	8004292 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800426c:	f7ff fa6e 	bl	800374c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d90b      	bls.n	8004292 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2205      	movs	r2, #5
 800428a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0c5      	b.n	800441e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0e5      	beq.n	800426c <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0202 	bic.w	r2, r2, #2
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b0:	f7ff fa4c 	bl	800374c <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042b6:	e012      	b.n	80042de <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042b8:	f7ff fa48 	bl	800374c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b0a      	cmp	r3, #10
 80042c4:	d90b      	bls.n	80042de <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2205      	movs	r2, #5
 80042d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e09f      	b.n	800441e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7e1b      	ldrb	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e007      	b.n	8004316 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7e5b      	ldrb	r3, [r3, #25]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e007      	b.n	8004340 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e9b      	ldrb	r3, [r3, #26]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d108      	bne.n	800435a <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e007      	b.n	800436a <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0220 	bic.w	r2, r2, #32
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7edb      	ldrb	r3, [r3, #27]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0210 	bic.w	r2, r2, #16
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e007      	b.n	8004394 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0210 	orr.w	r2, r2, #16
 8004392:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7f1b      	ldrb	r3, [r3, #28]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0208 	orr.w	r2, r2, #8
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7f5b      	ldrb	r3, [r3, #29]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0204 	orr.w	r2, r2, #4
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	08005017 	.word	0x08005017
 800442c:	0800502b 	.word	0x0800502b
 8004430:	08004f8b 	.word	0x08004f8b
 8004434:	08004f9f 	.word	0x08004f9f
 8004438:	08004fb3 	.word	0x08004fb3
 800443c:	08004fc7 	.word	0x08004fc7
 8004440:	08004fdb 	.word	0x08004fdb
 8004444:	08004fef 	.word	0x08004fef
 8004448:	0800503f 	.word	0x0800503f
 800444c:	08005053 	.word	0x08005053
 8004450:	08005067 	.word	0x08005067
 8004454:	08002499 	.word	0x08002499

08004458 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800446e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d003      	beq.n	800447e <HAL_CAN_ConfigFilter+0x26>
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	2b02      	cmp	r3, #2
 800447a:	f040 812c 	bne.w	80046d6 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004486:	d304      	bcc.n	8004492 <HAL_CAN_ConfigFilter+0x3a>
 8004488:	f44f 7154 	mov.w	r1, #848	; 0x350
 800448c:	4897      	ldr	r0, [pc, #604]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 800448e:	f7fe fe3a 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d304      	bcc.n	80044a6 <HAL_CAN_ConfigFilter+0x4e>
 800449c:	f240 3151 	movw	r1, #849	; 0x351
 80044a0:	4892      	ldr	r0, [pc, #584]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 80044a2:	f7fe fe30 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ae:	d304      	bcc.n	80044ba <HAL_CAN_ConfigFilter+0x62>
 80044b0:	f240 3152 	movw	r1, #850	; 0x352
 80044b4:	488d      	ldr	r0, [pc, #564]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 80044b6:	f7fe fe26 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d304      	bcc.n	80044ce <HAL_CAN_ConfigFilter+0x76>
 80044c4:	f240 3153 	movw	r1, #851	; 0x353
 80044c8:	4888      	ldr	r0, [pc, #544]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 80044ca:	f7fe fe1c 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_CAN_ConfigFilter+0x90>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d004      	beq.n	80044e8 <HAL_CAN_ConfigFilter+0x90>
 80044de:	f44f 7155 	mov.w	r1, #852	; 0x354
 80044e2:	4882      	ldr	r0, [pc, #520]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 80044e4:	f7fe fe0f 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_CAN_ConfigFilter+0xaa>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d004      	beq.n	8004502 <HAL_CAN_ConfigFilter+0xaa>
 80044f8:	f240 3155 	movw	r1, #853	; 0x355
 80044fc:	487b      	ldr	r0, [pc, #492]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 80044fe:	f7fe fe02 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_CAN_ConfigFilter+0xc4>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d004      	beq.n	800451c <HAL_CAN_ConfigFilter+0xc4>
 8004512:	f240 3156 	movw	r1, #854	; 0x356
 8004516:	4875      	ldr	r0, [pc, #468]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 8004518:	f7fe fdf5 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_CAN_ConfigFilter+0xde>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d004      	beq.n	8004536 <HAL_CAN_ConfigFilter+0xde>
 800452c:	f240 3157 	movw	r1, #855	; 0x357
 8004530:	486e      	ldr	r0, [pc, #440]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 8004532:	f7fe fde8 	bl	8003106 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004536:	4b6e      	ldr	r3, [pc, #440]	; (80046f0 <HAL_CAN_ConfigFilter+0x298>)
 8004538:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b1b      	cmp	r3, #27
 8004540:	d904      	bls.n	800454c <HAL_CAN_ConfigFilter+0xf4>
 8004542:	f240 3172 	movw	r1, #882	; 0x372
 8004546:	4869      	ldr	r0, [pc, #420]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 8004548:	f7fe fddd 	bl	8003106 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2b1b      	cmp	r3, #27
 8004552:	d904      	bls.n	800455e <HAL_CAN_ConfigFilter+0x106>
 8004554:	f240 3173 	movw	r1, #883	; 0x373
 8004558:	4864      	ldr	r0, [pc, #400]	; (80046ec <HAL_CAN_ConfigFilter+0x294>)
 800455a:	f7fe fdd4 	bl	8003106 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004574:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	431a      	orrs	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	2201      	movs	r2, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	401a      	ands	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d123      	bne.n	8004604 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	401a      	ands	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3248      	adds	r2, #72	; 0x48
 80045e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	3348      	adds	r3, #72	; 0x48
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d122      	bne.n	8004652 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	431a      	orrs	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800462c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3248      	adds	r2, #72	; 0x48
 8004632:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004646:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	3348      	adds	r3, #72	; 0x48
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43db      	mvns	r3, r3
 8004664:	401a      	ands	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800466c:	e007      	b.n	800467e <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	431a      	orrs	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004698:	e007      	b.n	80046aa <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d107      	bne.n	80046c2 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046c8:	f023 0201 	bic.w	r2, r3, #1
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e006      	b.n	80046e4 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800c5ec 	.word	0x0800c5ec
 80046f0:	40006400 	.word	0x40006400

080046f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d12e      	bne.n	8004766 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004720:	f7ff f814 	bl	800374c <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004726:	e012      	b.n	800474e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004728:	f7ff f810 	bl	800374c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b0a      	cmp	r3, #10
 8004734:	d90b      	bls.n	800474e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2205      	movs	r2, #5
 8004746:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e012      	b.n	8004774 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e006      	b.n	8004774 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004790:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_CAN_AddTxMessage+0x38>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d004      	beq.n	80047b4 <HAL_CAN_AddTxMessage+0x38>
 80047aa:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80047ae:	4884      	ldr	r0, [pc, #528]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 80047b0:	f7fe fca9 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_CAN_AddTxMessage+0x52>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d004      	beq.n	80047ce <HAL_CAN_AddTxMessage+0x52>
 80047c4:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80047c8:	487d      	ldr	r0, [pc, #500]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 80047ca:	f7fe fc9c 	bl	8003106 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d904      	bls.n	80047e0 <HAL_CAN_AddTxMessage+0x64>
 80047d6:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80047da:	4879      	ldr	r0, [pc, #484]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 80047dc:	f7fe fc93 	bl	8003106 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d30f      	bcc.n	8004812 <HAL_CAN_AddTxMessage+0x96>
 80047f2:	f240 41ee 	movw	r1, #1262	; 0x4ee
 80047f6:	4872      	ldr	r0, [pc, #456]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 80047f8:	f7fe fc85 	bl	8003106 <assert_failed>
 80047fc:	e009      	b.n	8004812 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004806:	d304      	bcc.n	8004812 <HAL_CAN_AddTxMessage+0x96>
 8004808:	f240 41f2 	movw	r1, #1266	; 0x4f2
 800480c:	486c      	ldr	r0, [pc, #432]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 800480e:	f7fe fc7a 	bl	8003106 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	7d1b      	ldrb	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_CAN_AddTxMessage+0xb0>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	7d1b      	ldrb	r3, [r3, #20]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d004      	beq.n	800482c <HAL_CAN_AddTxMessage+0xb0>
 8004822:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8004826:	4866      	ldr	r0, [pc, #408]	; (80049c0 <HAL_CAN_AddTxMessage+0x244>)
 8004828:	f7fe fc6d 	bl	8003106 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d003      	beq.n	800483a <HAL_CAN_AddTxMessage+0xbe>
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	2b02      	cmp	r3, #2
 8004836:	f040 80b8 	bne.w	80049aa <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80a0 	beq.w	800499a <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	0e1b      	lsrs	r3, r3, #24
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d907      	bls.n	800487a <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e09e      	b.n	80049b8 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800487a:	2201      	movs	r2, #1
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	409a      	lsls	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10d      	bne.n	80048a8 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	6809      	ldr	r1, [r1, #0]
 800489a:	431a      	orrs	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3318      	adds	r3, #24
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	440b      	add	r3, r1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e00f      	b.n	80048c8 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80048bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	3318      	adds	r3, #24
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	440b      	add	r3, r1
 80048c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3318      	adds	r3, #24
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	440b      	add	r3, r1
 80048d8:	3304      	adds	r3, #4
 80048da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	7d1b      	ldrb	r3, [r3, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d111      	bne.n	8004908 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3318      	adds	r3, #24
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4413      	add	r3, r2
 80048f0:	3304      	adds	r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	6811      	ldr	r1, [r2, #0]
 80048f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3318      	adds	r3, #24
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	440b      	add	r3, r1
 8004904:	3304      	adds	r3, #4
 8004906:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3307      	adds	r3, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	061a      	lsls	r2, r3, #24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3306      	adds	r3, #6
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3305      	adds	r3, #5
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	4313      	orrs	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	3204      	adds	r2, #4
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	4610      	mov	r0, r2
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	6811      	ldr	r1, [r2, #0]
 8004930:	ea43 0200 	orr.w	r2, r3, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	440b      	add	r3, r1
 800493a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800493e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3303      	adds	r3, #3
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	061a      	lsls	r2, r3, #24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3302      	adds	r3, #2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3301      	adds	r3, #1
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	4313      	orrs	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	4610      	mov	r0, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	ea43 0200 	orr.w	r2, r3, r0
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	440b      	add	r3, r1
 8004970:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004974:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3318      	adds	r3, #24
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4413      	add	r3, r2
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6811      	ldr	r1, [r2, #0]
 8004988:	f043 0201 	orr.w	r2, r3, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3318      	adds	r3, #24
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	440b      	add	r3, r1
 8004994:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e00e      	b.n	80049b8 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e006      	b.n	80049b8 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	0800c5ec 	.word	0x0800c5ec

080049c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_CAN_GetRxMessage+0x2c>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d004      	beq.n	80049f0 <HAL_CAN_GetRxMessage+0x2c>
 80049e6:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 80049ea:	4884      	ldr	r0, [pc, #528]	; (8004bfc <HAL_CAN_GetRxMessage+0x238>)
 80049ec:	f7fe fb8b 	bl	8003106 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d003      	beq.n	80049fe <HAL_CAN_GetRxMessage+0x3a>
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f040 80f3 	bne.w	8004be4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10e      	bne.n	8004a22 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0e7      	b.n	8004bf2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	331b      	adds	r3, #27
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0204 	and.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	331b      	adds	r3, #27
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	4413      	add	r3, r2
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0d5b      	lsrs	r3, r3, #21
 8004a6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	331b      	adds	r3, #27
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	4413      	add	r3, r2
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	331b      	adds	r3, #27
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0202 	and.w	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	331b      	adds	r3, #27
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 020f 	and.w	r2, r3, #15
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	331b      	adds	r3, #27
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4413      	add	r3, r2
 8004aca:	3304      	adds	r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	331b      	adds	r3, #27
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0a1a      	lsrs	r2, r3, #8
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0c1a      	lsrs	r2, r3, #16
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3302      	adds	r3, #2
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e1a      	lsrs	r2, r3, #24
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	3303      	adds	r3, #3
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	3304      	adds	r3, #4
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	0a1a      	lsrs	r2, r3, #8
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	3305      	adds	r3, #5
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0c1a      	lsrs	r2, r3, #16
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	3306      	adds	r3, #6
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	0e1a      	lsrs	r2, r3, #24
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	3307      	adds	r3, #7
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d108      	bne.n	8004bd0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0220 	orr.w	r2, r2, #32
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	e007      	b.n	8004be0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0220 	orr.w	r2, r2, #32
 8004bde:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e006      	b.n	8004bf2 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	0800c5ec 	.word	0x0800c5ec

08004c00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8083 	beq.w	8004d4e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d025      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
 8004c6c:	e017      	b.n	8004c9e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e00d      	b.n	8004c9e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	e003      	b.n	8004c9e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d026      	beq.n	8004cf6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
 8004cc4:	e017      	b.n	8004cf6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	e00d      	b.n	8004cf6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
 8004cec:	e003      	b.n	8004cf6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d026      	beq.n	8004d4e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	e017      	b.n	8004d4e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	e00d      	b.n	8004d4e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	e003      	b.n	8004d4e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d07b      	beq.n	8004f68 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d072      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d043      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03e      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee8:	2b60      	cmp	r3, #96	; 0x60
 8004eea:	d02b      	beq.n	8004f44 <HAL_CAN_IRQHandler+0x344>
 8004eec:	2b60      	cmp	r3, #96	; 0x60
 8004eee:	d82e      	bhi.n	8004f4e <HAL_CAN_IRQHandler+0x34e>
 8004ef0:	2b50      	cmp	r3, #80	; 0x50
 8004ef2:	d022      	beq.n	8004f3a <HAL_CAN_IRQHandler+0x33a>
 8004ef4:	2b50      	cmp	r3, #80	; 0x50
 8004ef6:	d82a      	bhi.n	8004f4e <HAL_CAN_IRQHandler+0x34e>
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d019      	beq.n	8004f30 <HAL_CAN_IRQHandler+0x330>
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d826      	bhi.n	8004f4e <HAL_CAN_IRQHandler+0x34e>
 8004f00:	2b30      	cmp	r3, #48	; 0x30
 8004f02:	d010      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x326>
 8004f04:	2b30      	cmp	r3, #48	; 0x30
 8004f06:	d822      	bhi.n	8004f4e <HAL_CAN_IRQHandler+0x34e>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d002      	beq.n	8004f12 <HAL_CAN_IRQHandler+0x312>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d005      	beq.n	8004f1c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004f10:	e01d      	b.n	8004f4e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f043 0308 	orr.w	r3, r3, #8
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f1a:	e019      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	f043 0310 	orr.w	r3, r3, #16
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f24:	e014      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	f043 0320 	orr.w	r3, r3, #32
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f2e:	e00f      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f38:	e00a      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f42:	e005      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004f4c:	e000      	b.n	8004f50 <HAL_CAN_IRQHandler+0x350>
            break;
 8004f4e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f5e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2204      	movs	r2, #4
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f82:	bf00      	nop
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <__NVIC_SetPriorityGrouping+0x44>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005098:	4013      	ands	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ae:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <__NVIC_SetPriorityGrouping+0x44>)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	60d3      	str	r3, [r2, #12]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <__NVIC_GetPriorityGrouping+0x18>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	f003 0307 	and.w	r3, r3, #7
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	db0b      	blt.n	800510a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	f003 021f 	and.w	r2, r3, #31
 80050f8:	4907      	ldr	r1, [pc, #28]	; (8005118 <__NVIC_EnableIRQ+0x38>)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	2001      	movs	r0, #1
 8005102:	fa00 f202 	lsl.w	r2, r0, r2
 8005106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	e000e100 	.word	0xe000e100

0800511c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db0a      	blt.n	8005146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	490c      	ldr	r1, [pc, #48]	; (8005168 <__NVIC_SetPriority+0x4c>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	440b      	add	r3, r1
 8005140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005144:	e00a      	b.n	800515c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <__NVIC_SetPriority+0x50>)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3b04      	subs	r3, #4
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	440b      	add	r3, r1
 800515a:	761a      	strb	r2, [r3, #24]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000e100 	.word	0xe000e100
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f1c3 0307 	rsb	r3, r3, #7
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf28      	it	cs
 800518e:	2304      	movcs	r3, #4
 8005190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3304      	adds	r3, #4
 8005196:	2b06      	cmp	r3, #6
 8005198:	d902      	bls.n	80051a0 <NVIC_EncodePriority+0x30>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3b03      	subs	r3, #3
 800519e:	e000      	b.n	80051a2 <NVIC_EncodePriority+0x32>
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	401a      	ands	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b8:	f04f 31ff 	mov.w	r1, #4294967295
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	43d9      	mvns	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c8:	4313      	orrs	r3, r2
         );
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b07      	cmp	r3, #7
 80051e4:	d00f      	beq.n	8005206 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d00c      	beq.n	8005206 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d009      	beq.n	8005206 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d006      	beq.n	8005206 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d003      	beq.n	8005206 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80051fe:	2190      	movs	r1, #144	; 0x90
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005202:	f7fd ff80 	bl	8003106 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ff38 	bl	800507c <__NVIC_SetPriorityGrouping>
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	0800c624 	.word	0x0800c624

08005218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d903      	bls.n	8005238 <HAL_NVIC_SetPriority+0x20>
 8005230:	21a8      	movs	r1, #168	; 0xa8
 8005232:	480e      	ldr	r0, [pc, #56]	; (800526c <HAL_NVIC_SetPriority+0x54>)
 8005234:	f7fd ff67 	bl	8003106 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	d903      	bls.n	8005246 <HAL_NVIC_SetPriority+0x2e>
 800523e:	21a9      	movs	r1, #169	; 0xa9
 8005240:	480a      	ldr	r0, [pc, #40]	; (800526c <HAL_NVIC_SetPriority+0x54>)
 8005242:	f7fd ff60 	bl	8003106 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005246:	f7ff ff3d 	bl	80050c4 <__NVIC_GetPriorityGrouping>
 800524a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f7ff ff8d 	bl	8005170 <NVIC_EncodePriority>
 8005256:	4602      	mov	r2, r0
 8005258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ff5c 	bl	800511c <__NVIC_SetPriority>
}
 8005264:	bf00      	nop
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	0800c624 	.word	0x0800c624

08005270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da03      	bge.n	800528a <HAL_NVIC_EnableIRQ+0x1a>
 8005282:	21bc      	movs	r1, #188	; 0xbc
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <HAL_NVIC_EnableIRQ+0x2c>)
 8005286:	f7fd ff3e 	bl	8003106 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff26 	bl	80050e0 <__NVIC_EnableIRQ>
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	0800c624 	.word	0x0800c624

080052a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052ac:	f7fe fa4e 	bl	800374c <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e203      	b.n	80056c4 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a8b      	ldr	r2, [pc, #556]	; (80054f0 <HAL_DMA_Init+0x250>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04e      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a8a      	ldr	r2, [pc, #552]	; (80054f4 <HAL_DMA_Init+0x254>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d049      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a88      	ldr	r2, [pc, #544]	; (80054f8 <HAL_DMA_Init+0x258>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d044      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a87      	ldr	r2, [pc, #540]	; (80054fc <HAL_DMA_Init+0x25c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03f      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a85      	ldr	r2, [pc, #532]	; (8005500 <HAL_DMA_Init+0x260>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d03a      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a84      	ldr	r2, [pc, #528]	; (8005504 <HAL_DMA_Init+0x264>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d035      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a82      	ldr	r2, [pc, #520]	; (8005508 <HAL_DMA_Init+0x268>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d030      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a81      	ldr	r2, [pc, #516]	; (800550c <HAL_DMA_Init+0x26c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d02b      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7f      	ldr	r2, [pc, #508]	; (8005510 <HAL_DMA_Init+0x270>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d026      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7e      	ldr	r2, [pc, #504]	; (8005514 <HAL_DMA_Init+0x274>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d021      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_DMA_Init+0x278>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01c      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a7b      	ldr	r2, [pc, #492]	; (800551c <HAL_DMA_Init+0x27c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d017      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a79      	ldr	r2, [pc, #484]	; (8005520 <HAL_DMA_Init+0x280>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d012      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a78      	ldr	r2, [pc, #480]	; (8005524 <HAL_DMA_Init+0x284>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00d      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a76      	ldr	r2, [pc, #472]	; (8005528 <HAL_DMA_Init+0x288>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d008      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a75      	ldr	r2, [pc, #468]	; (800552c <HAL_DMA_Init+0x28c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <HAL_DMA_Init+0xc4>
 800535c:	21b7      	movs	r1, #183	; 0xb7
 800535e:	4874      	ldr	r0, [pc, #464]	; (8005530 <HAL_DMA_Init+0x290>)
 8005360:	f7fd fed1 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d026      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005374:	d021      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800537e:	d01c      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005388:	d017      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d012      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800539c:	d00d      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053a6:	d008      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80053b0:	d003      	beq.n	80053ba <HAL_DMA_Init+0x11a>
 80053b2:	21b8      	movs	r1, #184	; 0xb8
 80053b4:	485e      	ldr	r0, [pc, #376]	; (8005530 <HAL_DMA_Init+0x290>)
 80053b6:	f7fd fea6 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_DMA_Init+0x13a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d007      	beq.n	80053da <HAL_DMA_Init+0x13a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d003      	beq.n	80053da <HAL_DMA_Init+0x13a>
 80053d2:	21b9      	movs	r1, #185	; 0xb9
 80053d4:	4856      	ldr	r0, [pc, #344]	; (8005530 <HAL_DMA_Init+0x290>)
 80053d6:	f7fd fe96 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e2:	d007      	beq.n	80053f4 <HAL_DMA_Init+0x154>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_DMA_Init+0x154>
 80053ec:	21ba      	movs	r1, #186	; 0xba
 80053ee:	4850      	ldr	r0, [pc, #320]	; (8005530 <HAL_DMA_Init+0x290>)
 80053f0:	f7fd fe89 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fc:	d007      	beq.n	800540e <HAL_DMA_Init+0x16e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_DMA_Init+0x16e>
 8005406:	21bb      	movs	r1, #187	; 0xbb
 8005408:	4849      	ldr	r0, [pc, #292]	; (8005530 <HAL_DMA_Init+0x290>)
 800540a:	f7fd fe7c 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <HAL_DMA_Init+0x192>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d008      	beq.n	8005432 <HAL_DMA_Init+0x192>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	d003      	beq.n	8005432 <HAL_DMA_Init+0x192>
 800542a:	21bc      	movs	r1, #188	; 0xbc
 800542c:	4840      	ldr	r0, [pc, #256]	; (8005530 <HAL_DMA_Init+0x290>)
 800542e:	f7fd fe6a 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <HAL_DMA_Init+0x1b6>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d008      	beq.n	8005456 <HAL_DMA_Init+0x1b6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544c:	d003      	beq.n	8005456 <HAL_DMA_Init+0x1b6>
 800544e:	21bd      	movs	r1, #189	; 0xbd
 8005450:	4837      	ldr	r0, [pc, #220]	; (8005530 <HAL_DMA_Init+0x290>)
 8005452:	f7fd fe58 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <HAL_DMA_Init+0x1d8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d007      	beq.n	8005478 <HAL_DMA_Init+0x1d8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b20      	cmp	r3, #32
 800546e:	d003      	beq.n	8005478 <HAL_DMA_Init+0x1d8>
 8005470:	21be      	movs	r1, #190	; 0xbe
 8005472:	482f      	ldr	r0, [pc, #188]	; (8005530 <HAL_DMA_Init+0x290>)
 8005474:	f7fd fe47 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_DMA_Init+0x206>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d00d      	beq.n	80054a6 <HAL_DMA_Init+0x206>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005492:	d008      	beq.n	80054a6 <HAL_DMA_Init+0x206>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800549c:	d003      	beq.n	80054a6 <HAL_DMA_Init+0x206>
 800549e:	21bf      	movs	r1, #191	; 0xbf
 80054a0:	4823      	ldr	r0, [pc, #140]	; (8005530 <HAL_DMA_Init+0x290>)
 80054a2:	f7fd fe30 	bl	8003106 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_DMA_Init+0x21e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d003      	beq.n	80054be <HAL_DMA_Init+0x21e>
 80054b6:	21c0      	movs	r1, #192	; 0xc0
 80054b8:	481d      	ldr	r0, [pc, #116]	; (8005530 <HAL_DMA_Init+0x290>)
 80054ba:	f7fd fe24 	bl	8003106 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d064      	beq.n	8005590 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d032      	beq.n	8005534 <HAL_DMA_Init+0x294>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d02e      	beq.n	8005534 <HAL_DMA_Init+0x294>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d02a      	beq.n	8005534 <HAL_DMA_Init+0x294>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d026      	beq.n	8005534 <HAL_DMA_Init+0x294>
 80054e6:	21c5      	movs	r1, #197	; 0xc5
 80054e8:	4811      	ldr	r0, [pc, #68]	; (8005530 <HAL_DMA_Init+0x290>)
 80054ea:	f7fd fe0c 	bl	8003106 <assert_failed>
 80054ee:	e021      	b.n	8005534 <HAL_DMA_Init+0x294>
 80054f0:	40026010 	.word	0x40026010
 80054f4:	40026028 	.word	0x40026028
 80054f8:	40026040 	.word	0x40026040
 80054fc:	40026058 	.word	0x40026058
 8005500:	40026070 	.word	0x40026070
 8005504:	40026088 	.word	0x40026088
 8005508:	400260a0 	.word	0x400260a0
 800550c:	400260b8 	.word	0x400260b8
 8005510:	40026410 	.word	0x40026410
 8005514:	40026428 	.word	0x40026428
 8005518:	40026440 	.word	0x40026440
 800551c:	40026458 	.word	0x40026458
 8005520:	40026470 	.word	0x40026470
 8005524:	40026488 	.word	0x40026488
 8005528:	400264a0 	.word	0x400264a0
 800552c:	400264b8 	.word	0x400264b8
 8005530:	0800c660 	.word	0x0800c660
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <HAL_DMA_Init+0x2c2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005544:	d00d      	beq.n	8005562 <HAL_DMA_Init+0x2c2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800554e:	d008      	beq.n	8005562 <HAL_DMA_Init+0x2c2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005558:	d003      	beq.n	8005562 <HAL_DMA_Init+0x2c2>
 800555a:	21c6      	movs	r1, #198	; 0xc6
 800555c:	485b      	ldr	r0, [pc, #364]	; (80056cc <HAL_DMA_Init+0x42c>)
 800555e:	f7fd fdd2 	bl	8003106 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d012      	beq.n	8005590 <HAL_DMA_Init+0x2f0>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d00d      	beq.n	8005590 <HAL_DMA_Init+0x2f0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557c:	d008      	beq.n	8005590 <HAL_DMA_Init+0x2f0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005586:	d003      	beq.n	8005590 <HAL_DMA_Init+0x2f0>
 8005588:	21c7      	movs	r1, #199	; 0xc7
 800558a:	4850      	ldr	r0, [pc, #320]	; (80056cc <HAL_DMA_Init+0x42c>)
 800558c:	f7fd fdbb 	bl	8003106 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b0:	e00f      	b.n	80055d2 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b2:	f7fe f8cb 	bl	800374c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d908      	bls.n	80055d2 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e078      	b.n	80056c4 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e8      	bne.n	80055b2 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <HAL_DMA_Init+0x430>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b04      	cmp	r3, #4
 800562a:	d107      	bne.n	800563c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4313      	orrs	r3, r2
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b04      	cmp	r3, #4
 8005664:	d117      	bne.n	8005696 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa1b 	bl	8005ab4 <DMA_CheckFifoParam>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005692:	2301      	movs	r3, #1
 8005694:	e016      	b.n	80056c4 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9d2 	bl	8005a48 <DMA_CalcBaseAndBitshift>
 80056a4:	4603      	mov	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	223f      	movs	r2, #63	; 0x3f
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	0800c660 	.word	0x0800c660
 80056d0:	f010803f 	.word	0xf010803f

080056d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e00c      	b.n	800570c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2205      	movs	r2, #5
 80056f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005724:	4b8e      	ldr	r3, [pc, #568]	; (8005960 <HAL_DMA_IRQHandler+0x248>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a8e      	ldr	r2, [pc, #568]	; (8005964 <HAL_DMA_IRQHandler+0x24c>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	2208      	movs	r2, #8
 8005744:	409a      	lsls	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0204 	bic.w	r2, r2, #4
 800576a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	2208      	movs	r2, #8
 8005772:	409a      	lsls	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	2201      	movs	r2, #1
 800578a:	409a      	lsls	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d012      	beq.n	80057ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a6:	2201      	movs	r2, #1
 80057a8:	409a      	lsls	r2, r3
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f043 0202 	orr.w	r2, r3, #2
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	2204      	movs	r2, #4
 80057c0:	409a      	lsls	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d012      	beq.n	80057f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	2204      	movs	r2, #4
 80057de:	409a      	lsls	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f4:	2210      	movs	r2, #16
 80057f6:	409a      	lsls	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d043      	beq.n	8005888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d03c      	beq.n	8005888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	2210      	movs	r2, #16
 8005814:	409a      	lsls	r2, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d018      	beq.n	800585a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d024      	beq.n	8005888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
 8005846:	e01f      	b.n	8005888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
 8005858:	e016      	b.n	8005888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d107      	bne.n	8005878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0208 	bic.w	r2, r2, #8
 8005876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	2220      	movs	r2, #32
 800588e:	409a      	lsls	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 808f 	beq.w	80059b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8087 	beq.w	80059b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	2220      	movs	r2, #32
 80058b0:	409a      	lsls	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d136      	bne.n	8005930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0216 	bic.w	r2, r2, #22
 80058d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_DMA_IRQHandler+0x1da>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0208 	bic.w	r2, r2, #8
 8005900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	223f      	movs	r2, #63	; 0x3f
 8005908:	409a      	lsls	r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005922:	2b00      	cmp	r3, #0
 8005924:	d07e      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
        }
        return;
 800592e:	e079      	b.n	8005a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01d      	beq.n	800597a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	2b00      	cmp	r3, #0
 8005952:	d031      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	e02c      	b.n	80059b8 <HAL_DMA_IRQHandler+0x2a0>
 800595e:	bf00      	nop
 8005960:	20000040 	.word	0x20000040
 8005964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
 8005978:	e01e      	b.n	80059b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10f      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0210 	bic.w	r2, r2, #16
 8005996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d032      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2205      	movs	r2, #5
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d307      	bcc.n	8005a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f2      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x2cc>
 80059fe:	e000      	b.n	8005a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
 8005a22:	e000      	b.n	8005a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a24:	bf00      	nop
    }
  }
}
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a3a:	b2db      	uxtb	r3, r3
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	3b10      	subs	r3, #16
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <DMA_CalcBaseAndBitshift+0x64>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d909      	bls.n	8005a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	659a      	str	r2, [r3, #88]	; 0x58
 8005a88:	e007      	b.n	8005a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	aaaaaaab 	.word	0xaaaaaaab
 8005ab0:	0800c810 	.word	0x0800c810

08005ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d11f      	bne.n	8005b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d856      	bhi.n	8005b82 <DMA_CheckFifoParam+0xce>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <DMA_CheckFifoParam+0x28>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005aff 	.word	0x08005aff
 8005ae4:	08005aed 	.word	0x08005aed
 8005ae8:	08005b83 	.word	0x08005b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d046      	beq.n	8005b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005afc:	e043      	b.n	8005b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b06:	d140      	bne.n	8005b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0c:	e03d      	b.n	8005b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d121      	bne.n	8005b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d837      	bhi.n	8005b8e <DMA_CheckFifoParam+0xda>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <DMA_CheckFifoParam+0x70>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b35 	.word	0x08005b35
 8005b28:	08005b3b 	.word	0x08005b3b
 8005b2c:	08005b35 	.word	0x08005b35
 8005b30:	08005b4d 	.word	0x08005b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
      break;
 8005b38:	e030      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d025      	beq.n	8005b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b4a:	e022      	b.n	8005b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b54:	d11f      	bne.n	8005b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b5a:	e01c      	b.n	8005b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d903      	bls.n	8005b6a <DMA_CheckFifoParam+0xb6>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d003      	beq.n	8005b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b68:	e018      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6e:	e015      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e00b      	b.n	8005b9a <DMA_CheckFifoParam+0xe6>
      break;
 8005b82:	bf00      	nop
 8005b84:	e00a      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;
 8005b86:	bf00      	nop
 8005b88:	e008      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e006      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e004      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <DMA_CheckFifoParam+0xe8>
      break;
 8005b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <HAL_GPIO_Init+0xf8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01f      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a36      	ldr	r2, [pc, #216]	; (8005ca8 <HAL_GPIO_Init+0xfc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01b      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a35      	ldr	r2, [pc, #212]	; (8005cac <HAL_GPIO_Init+0x100>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d017      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_GPIO_Init+0x104>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a33      	ldr	r2, [pc, #204]	; (8005cb4 <HAL_GPIO_Init+0x108>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a32      	ldr	r2, [pc, #200]	; (8005cb8 <HAL_GPIO_Init+0x10c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a31      	ldr	r2, [pc, #196]	; (8005cbc <HAL_GPIO_Init+0x110>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a30      	ldr	r2, [pc, #192]	; (8005cc0 <HAL_GPIO_Init+0x114>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_Init+0x5e>
 8005c02:	21ac      	movs	r1, #172	; 0xac
 8005c04:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <HAL_GPIO_Init+0x118>)
 8005c06:	f7fd fa7e 	bl	8003106 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_GPIO_Init+0x74>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x7c>
 8005c20:	21ad      	movs	r1, #173	; 0xad
 8005c22:	4828      	ldr	r0, [pc, #160]	; (8005cc4 <HAL_GPIO_Init+0x118>)
 8005c24:	f7fd fa6f 	bl	8003106 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d035      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d031      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b11      	cmp	r3, #17
 8005c3e:	d02d      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d029      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b12      	cmp	r3, #18
 8005c4e:	d025      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005c58:	d020      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005c62:	d01b      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005c6c:	d016      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005c76:	d011      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005c80:	d00c      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005c8a:	d007      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0xf0>
 8005c94:	21ae      	movs	r1, #174	; 0xae
 8005c96:	480b      	ldr	r0, [pc, #44]	; (8005cc4 <HAL_GPIO_Init+0x118>)
 8005c98:	f7fd fa35 	bl	8003106 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e289      	b.n	80061b6 <HAL_GPIO_Init+0x60a>
 8005ca2:	bf00      	nop
 8005ca4:	40020000 	.word	0x40020000
 8005ca8:	40020400 	.word	0x40020400
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	40020c00 	.word	0x40020c00
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40021400 	.word	0x40021400
 8005cbc:	40021800 	.word	0x40021800
 8005cc0:	40021c00 	.word	0x40021c00
 8005cc4:	0800c698 	.word	0x0800c698
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	f040 8265 	bne.w	80061b0 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d005      	beq.n	8005cfe <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d144      	bne.n	8005d88 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <HAL_GPIO_Init+0x17a>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d00b      	beq.n	8005d26 <HAL_GPIO_Init+0x17a>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d007      	beq.n	8005d26 <HAL_GPIO_Init+0x17a>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x17a>
 8005d1e:	21c0      	movs	r1, #192	; 0xc0
 8005d20:	4831      	ldr	r0, [pc, #196]	; (8005de8 <HAL_GPIO_Init+0x23c>)
 8005d22:	f7fd f9f0 	bl	8003106 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	2203      	movs	r2, #3
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 0201 	and.w	r2, r3, #1
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d02b      	beq.n	8005dec <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_GPIO_Init+0x208>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <HAL_GPIO_Init+0x208>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x208>
 8005dac:	21d1      	movs	r1, #209	; 0xd1
 8005dae:	480e      	ldr	r0, [pc, #56]	; (8005de8 <HAL_GPIO_Init+0x23c>)
 8005db0:	f7fd f9a9 	bl	8003106 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	2203      	movs	r2, #3
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	e002      	b.n	8005dec <HAL_GPIO_Init+0x240>
 8005de6:	bf00      	nop
 8005de8:	0800c698 	.word	0x0800c698
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	f040 810c 	bne.w	8006012 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80e3 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	f000 80de 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80d9 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80d4 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80cf 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80ca 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	f000 80c5 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f000 80c0 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	f000 80bb 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f000 80b6 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	f000 80b1 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	f000 80ac 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	f000 80a7 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	f000 80a2 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	f000 809d 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	f000 8098 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	f000 8093 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	f000 808e 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	f000 8089 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	f000 8084 	beq.w	8005fca <HAL_GPIO_Init+0x41e>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	d07f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d07b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b07      	cmp	r3, #7
 8005ed8:	d077      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d073      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d06f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d06b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b09      	cmp	r3, #9
 8005ef8:	d067      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b09      	cmp	r3, #9
 8005f00:	d063      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b0a      	cmp	r3, #10
 8005f08:	d05f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b0a      	cmp	r3, #10
 8005f10:	d05b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b0b      	cmp	r3, #11
 8005f18:	d057      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	d053      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b0c      	cmp	r3, #12
 8005f28:	d04f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b0d      	cmp	r3, #13
 8005f30:	d04b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d047      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d043      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d03f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d03b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d037      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d033      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d02f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d02b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b06      	cmp	r3, #6
 8005f78:	d027      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b07      	cmp	r3, #7
 8005f80:	d023      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b07      	cmp	r3, #7
 8005f88:	d01f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	d01b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	d017      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d00f      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d00b      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b0a      	cmp	r3, #10
 8005fb8:	d007      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b0a      	cmp	r3, #10
 8005fc0:	d003      	beq.n	8005fca <HAL_GPIO_Init+0x41e>
 8005fc2:	21de      	movs	r1, #222	; 0xde
 8005fc4:	4880      	ldr	r0, [pc, #512]	; (80061c8 <HAL_GPIO_Init+0x61c>)
 8005fc6:	f7fd f89e 	bl	8003106 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	08da      	lsrs	r2, r3, #3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3208      	adds	r2, #8
 8005fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	220f      	movs	r2, #15
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4013      	ands	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	08da      	lsrs	r2, r3, #3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3208      	adds	r2, #8
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	2203      	movs	r2, #3
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 0203 	and.w	r2, r3, #3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80ae 	beq.w	80061b0 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b5c      	ldr	r3, [pc, #368]	; (80061cc <HAL_GPIO_Init+0x620>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	4a5b      	ldr	r2, [pc, #364]	; (80061cc <HAL_GPIO_Init+0x620>)
 800605e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006062:	6453      	str	r3, [r2, #68]	; 0x44
 8006064:	4b59      	ldr	r3, [pc, #356]	; (80061cc <HAL_GPIO_Init+0x620>)
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006070:	4a57      	ldr	r2, [pc, #348]	; (80061d0 <HAL_GPIO_Init+0x624>)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	3302      	adds	r3, #2
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	220f      	movs	r2, #15
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4013      	ands	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a4f      	ldr	r2, [pc, #316]	; (80061d4 <HAL_GPIO_Init+0x628>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d025      	beq.n	80060e8 <HAL_GPIO_Init+0x53c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a4e      	ldr	r2, [pc, #312]	; (80061d8 <HAL_GPIO_Init+0x62c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d01f      	beq.n	80060e4 <HAL_GPIO_Init+0x538>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a4d      	ldr	r2, [pc, #308]	; (80061dc <HAL_GPIO_Init+0x630>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d019      	beq.n	80060e0 <HAL_GPIO_Init+0x534>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a4c      	ldr	r2, [pc, #304]	; (80061e0 <HAL_GPIO_Init+0x634>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <HAL_GPIO_Init+0x530>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a4b      	ldr	r2, [pc, #300]	; (80061e4 <HAL_GPIO_Init+0x638>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00d      	beq.n	80060d8 <HAL_GPIO_Init+0x52c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a4a      	ldr	r2, [pc, #296]	; (80061e8 <HAL_GPIO_Init+0x63c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <HAL_GPIO_Init+0x528>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a49      	ldr	r2, [pc, #292]	; (80061ec <HAL_GPIO_Init+0x640>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <HAL_GPIO_Init+0x524>
 80060cc:	2306      	movs	r3, #6
 80060ce:	e00c      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060d0:	2307      	movs	r3, #7
 80060d2:	e00a      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060d4:	2305      	movs	r3, #5
 80060d6:	e008      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060d8:	2304      	movs	r3, #4
 80060da:	e006      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060dc:	2303      	movs	r3, #3
 80060de:	e004      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e002      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <HAL_GPIO_Init+0x53e>
 80060e8:	2300      	movs	r3, #0
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	f002 0203 	and.w	r2, r2, #3
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	4093      	lsls	r3, r2
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060fa:	4935      	ldr	r1, [pc, #212]	; (80061d0 <HAL_GPIO_Init+0x624>)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	3302      	adds	r3, #2
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <HAL_GPIO_Init+0x644>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800612c:	4a30      	ldr	r2, [pc, #192]	; (80061f0 <HAL_GPIO_Init+0x644>)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <HAL_GPIO_Init+0x644>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006156:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <HAL_GPIO_Init+0x644>)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800615c:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <HAL_GPIO_Init+0x644>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006180:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <HAL_GPIO_Init+0x644>)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_GPIO_Init+0x644>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061aa:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <HAL_GPIO_Init+0x644>)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	f67f ad85 	bls.w	8005cc8 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	0800c698 	.word	0x0800c698
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40013800 	.word	0x40013800
 80061d4:	40020000 	.word	0x40020000
 80061d8:	40020400 	.word	0x40020400
 80061dc:	40020800 	.word	0x40020800
 80061e0:	40020c00 	.word	0x40020c00
 80061e4:	40021000 	.word	0x40021000
 80061e8:	40021400 	.word	0x40021400
 80061ec:	40021800 	.word	0x40021800
 80061f0:	40013c00 	.word	0x40013c00

080061f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
 8006200:	4613      	mov	r3, r2
 8006202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <HAL_GPIO_WritePin+0x20>
 800620a:	887b      	ldrh	r3, [r7, #2]
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <HAL_GPIO_WritePin+0x2a>
 8006214:	f240 119d 	movw	r1, #413	; 0x19d
 8006218:	480e      	ldr	r0, [pc, #56]	; (8006254 <HAL_GPIO_WritePin+0x60>)
 800621a:	f7fc ff74 	bl	8003106 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800621e:	787b      	ldrb	r3, [r7, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_GPIO_WritePin+0x40>
 8006224:	787b      	ldrb	r3, [r7, #1]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d004      	beq.n	8006234 <HAL_GPIO_WritePin+0x40>
 800622a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800622e:	4809      	ldr	r0, [pc, #36]	; (8006254 <HAL_GPIO_WritePin+0x60>)
 8006230:	f7fc ff69 	bl	8003106 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006234:	787b      	ldrb	r3, [r7, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006240:	e003      	b.n	800624a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	041a      	lsls	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	0800c698 	.word	0x0800c698

08006258 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006264:	887b      	ldrh	r3, [r7, #2]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <HAL_GPIO_TogglePin+0x1c>
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	0c1b      	lsrs	r3, r3, #16
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <HAL_GPIO_TogglePin+0x26>
 8006274:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8006278:	480a      	ldr	r0, [pc, #40]	; (80062a4 <HAL_GPIO_TogglePin+0x4c>)
 800627a:	f7fc ff44 	bl	8003106 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4013      	ands	r3, r2
 800628a:	041a      	lsls	r2, r3, #16
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	43d9      	mvns	r1, r3
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	400b      	ands	r3, r1
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	619a      	str	r2, [r3, #24]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	0800c698 	.word	0x0800c698

080062a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e1bd      	b.n	8006636 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a93      	ldr	r2, [pc, #588]	; (800650c <HAL_I2C_Init+0x264>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_I2C_Init+0x3a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a91      	ldr	r2, [pc, #580]	; (8006510 <HAL_I2C_Init+0x268>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_I2C_Init+0x3a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a90      	ldr	r2, [pc, #576]	; (8006514 <HAL_I2C_Init+0x26c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_I2C_Init+0x3a>
 80062d8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80062dc:	488e      	ldr	r0, [pc, #568]	; (8006518 <HAL_I2C_Init+0x270>)
 80062de:	f7fc ff12 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <HAL_I2C_Init+0x4c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4a8b      	ldr	r2, [pc, #556]	; (800651c <HAL_I2C_Init+0x274>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d904      	bls.n	80062fe <HAL_I2C_Init+0x56>
 80062f4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80062f8:	4887      	ldr	r0, [pc, #540]	; (8006518 <HAL_I2C_Init+0x270>)
 80062fa:	f7fc ff04 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_I2C_Init+0x72>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630e:	d004      	beq.n	800631a <HAL_I2C_Init+0x72>
 8006310:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006314:	4880      	ldr	r0, [pc, #512]	; (8006518 <HAL_I2C_Init+0x270>)
 8006316:	f7fc fef6 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <HAL_I2C_Init+0x8c>
 800632a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800632e:	487a      	ldr	r0, [pc, #488]	; (8006518 <HAL_I2C_Init+0x270>)
 8006330:	f7fc fee9 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633c:	d009      	beq.n	8006352 <HAL_I2C_Init+0xaa>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006346:	d004      	beq.n	8006352 <HAL_I2C_Init+0xaa>
 8006348:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800634c:	4872      	ldr	r0, [pc, #456]	; (8006518 <HAL_I2C_Init+0x270>)
 800634e:	f7fc feda 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_I2C_Init+0xc4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d004      	beq.n	800636c <HAL_I2C_Init+0xc4>
 8006362:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006366:	486c      	ldr	r0, [pc, #432]	; (8006518 <HAL_I2C_Init+0x270>)
 8006368:	f7fc fecd 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <HAL_I2C_Init+0xda>
 8006378:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800637c:	4866      	ldr	r0, [pc, #408]	; (8006518 <HAL_I2C_Init+0x270>)
 800637e:	f7fc fec2 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_I2C_Init+0xf4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d004      	beq.n	800639c <HAL_I2C_Init+0xf4>
 8006392:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006396:	4860      	ldr	r0, [pc, #384]	; (8006518 <HAL_I2C_Init+0x270>)
 8006398:	f7fc feb5 	bl	8003106 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_I2C_Init+0x10e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d004      	beq.n	80063b6 <HAL_I2C_Init+0x10e>
 80063ac:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80063b0:	4859      	ldr	r0, [pc, #356]	; (8006518 <HAL_I2C_Init+0x270>)
 80063b2:	f7fc fea8 	bl	8003106 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc fd44 	bl	8002e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006408:	f001 fff8 	bl	80083fc <HAL_RCC_GetPCLK1Freq>
 800640c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <HAL_I2C_Init+0x278>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d807      	bhi.n	8006428 <HAL_I2C_Init+0x180>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a42      	ldr	r2, [pc, #264]	; (8006524 <HAL_I2C_Init+0x27c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	bf94      	ite	ls
 8006420:	2301      	movls	r3, #1
 8006422:	2300      	movhi	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e006      	b.n	8006436 <HAL_I2C_Init+0x18e>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4a3f      	ldr	r2, [pc, #252]	; (8006528 <HAL_I2C_Init+0x280>)
 800642c:	4293      	cmp	r3, r2
 800642e:	bf94      	ite	ls
 8006430:	2301      	movls	r3, #1
 8006432:	2300      	movhi	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e0fb      	b.n	8006636 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a3a      	ldr	r2, [pc, #232]	; (800652c <HAL_I2C_Init+0x284>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	0c9b      	lsrs	r3, r3, #18
 8006448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <HAL_I2C_Init+0x278>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d802      	bhi.n	8006478 <HAL_I2C_Init+0x1d0>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3301      	adds	r3, #1
 8006476:	e009      	b.n	800648c <HAL_I2C_Init+0x1e4>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <HAL_I2C_Init+0x288>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	099b      	lsrs	r3, r3, #6
 800648a:	3301      	adds	r3, #1
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	430b      	orrs	r3, r1
 8006492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800649e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	491e      	ldr	r1, [pc, #120]	; (8006520 <HAL_I2C_Init+0x278>)
 80064a8:	428b      	cmp	r3, r1
 80064aa:	d819      	bhi.n	80064e0 <HAL_I2C_Init+0x238>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1e59      	subs	r1, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80064ba:	1c59      	adds	r1, r3, #1
 80064bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064c0:	400b      	ands	r3, r1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_I2C_Init+0x234>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1e59      	subs	r1, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80064d4:	3301      	adds	r3, #1
 80064d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064da:	e065      	b.n	80065a8 <HAL_I2C_Init+0x300>
 80064dc:	2304      	movs	r3, #4
 80064de:	e063      	b.n	80065a8 <HAL_I2C_Init+0x300>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d125      	bne.n	8006534 <HAL_I2C_Init+0x28c>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1e58      	subs	r0, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	440b      	add	r3, r1
 80064f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064fa:	3301      	adds	r3, #1
 80064fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e026      	b.n	800655a <HAL_I2C_Init+0x2b2>
 800650c:	40005400 	.word	0x40005400
 8006510:	40005800 	.word	0x40005800
 8006514:	40005c00 	.word	0x40005c00
 8006518:	0800c6d4 	.word	0x0800c6d4
 800651c:	00061a80 	.word	0x00061a80
 8006520:	000186a0 	.word	0x000186a0
 8006524:	001e847f 	.word	0x001e847f
 8006528:	003d08ff 	.word	0x003d08ff
 800652c:	431bde83 	.word	0x431bde83
 8006530:	10624dd3 	.word	0x10624dd3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1e58      	subs	r0, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	0099      	lsls	r1, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	fbb0 f3f3 	udiv	r3, r0, r3
 800654a:	3301      	adds	r3, #1
 800654c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf0c      	ite	eq
 8006554:	2301      	moveq	r3, #1
 8006556:	2300      	movne	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Init+0x2ba>
 800655e:	2301      	movs	r3, #1
 8006560:	e022      	b.n	80065a8 <HAL_I2C_Init+0x300>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10e      	bne.n	8006588 <HAL_I2C_Init+0x2e0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1e58      	subs	r0, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	440b      	add	r3, r1
 8006578:	fbb0 f3f3 	udiv	r3, r0, r3
 800657c:	3301      	adds	r3, #1
 800657e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006586:	e00f      	b.n	80065a8 <HAL_I2C_Init+0x300>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1e58      	subs	r0, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6859      	ldr	r1, [r3, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	0099      	lsls	r1, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	fbb0 f3f3 	udiv	r3, r0, r3
 800659e:	3301      	adds	r3, #1
 80065a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	6809      	ldr	r1, [r1, #0]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80065d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6911      	ldr	r1, [r2, #16]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68d2      	ldr	r2, [r2, #12]
 80065e2:	4311      	orrs	r1, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006660:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b10      	cmp	r3, #16
 800666e:	d003      	beq.n	8006678 <HAL_I2C_EV_IRQHandler+0x38>
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	f040 80c1 	bne.w	80067fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10d      	bne.n	80066ae <HAL_I2C_EV_IRQHandler+0x6e>
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006698:	d003      	beq.n	80066a2 <HAL_I2C_EV_IRQHandler+0x62>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066a0:	d101      	bne.n	80066a6 <HAL_I2C_EV_IRQHandler+0x66>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <HAL_I2C_EV_IRQHandler+0x68>
 80066a6:	2300      	movs	r3, #0
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	f000 8132 	beq.w	8006912 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_I2C_EV_IRQHandler+0x92>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	0a5b      	lsrs	r3, r3, #9
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fc7b 	bl	8007fc0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fd83 	bl	80071d6 <I2C_Master_SB>
 80066d0:	e092      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	08db      	lsrs	r3, r3, #3
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	0a5b      	lsrs	r3, r3, #9
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fdf9 	bl	80072e2 <I2C_Master_ADD10>
 80066f0:	e082      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0xd2>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	0a5b      	lsrs	r3, r3, #9
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fe13 	bl	8007336 <I2C_Master_ADDR>
 8006710:	e072      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03b      	beq.n	8006796 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672c:	f000 80f3 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <HAL_I2C_EV_IRQHandler+0x11c>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	0a9b      	lsrs	r3, r3, #10
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_I2C_EV_IRQHandler+0x11c>
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9f3 	bl	8006b40 <I2C_MasterTransmit_TXE>
 800675a:	e04d      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	089b      	lsrs	r3, r3, #2
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80d6 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	0a5b      	lsrs	r3, r3, #9
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80cf 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b21      	cmp	r3, #33	; 0x21
 800677c:	d103      	bne.n	8006786 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa7a 	bl	8006c78 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006784:	e0c7      	b.n	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	f040 80c4 	bne.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fae8 	bl	8006d64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006794:	e0bf      	b.n	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a4:	f000 80b7 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	099b      	lsrs	r3, r3, #6
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00f      	beq.n	80067d4 <HAL_I2C_EV_IRQHandler+0x194>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	0a9b      	lsrs	r3, r3, #10
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <HAL_I2C_EV_IRQHandler+0x194>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb5d 	bl	8006e8c <I2C_MasterReceive_RXNE>
 80067d2:	e011      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 809a 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	0a5b      	lsrs	r3, r3, #9
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8093 	beq.w	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc06 	bl	8007002 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067f6:	e08e      	b.n	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
 80067f8:	e08d      	b.n	8006916 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e007      	b.n	800681c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d012      	beq.n	800684e <HAL_I2C_EV_IRQHandler+0x20e>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	0a5b      	lsrs	r3, r3, #9
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 ffc4 	bl	80077d4 <I2C_Slave_ADDR>
 800684c:	e066      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	091b      	lsrs	r3, r3, #4
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x22e>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	0a5b      	lsrs	r3, r3, #9
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fffe 	bl	8007868 <I2C_Slave_STOPF>
 800686c:	e056      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b21      	cmp	r3, #33	; 0x21
 8006872:	d002      	beq.n	800687a <HAL_I2C_EV_IRQHandler+0x23a>
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b29      	cmp	r3, #41	; 0x29
 8006878:	d125      	bne.n	80068c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <HAL_I2C_EV_IRQHandler+0x266>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	0a9b      	lsrs	r3, r3, #10
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <HAL_I2C_EV_IRQHandler+0x266>
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	089b      	lsrs	r3, r3, #2
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 feda 	bl	8007658 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068a4:	e039      	b.n	800691a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d033      	beq.n	800691a <HAL_I2C_EV_IRQHandler+0x2da>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d02d      	beq.n	800691a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 ff07 	bl	80076d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068c4:	e029      	b.n	800691a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	099b      	lsrs	r3, r3, #6
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00f      	beq.n	80068f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	0a9b      	lsrs	r3, r3, #10
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 ff12 	bl	8007714 <I2C_SlaveReceive_RXNE>
 80068f0:	e014      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	089b      	lsrs	r3, r3, #2
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	0a5b      	lsrs	r3, r3, #9
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 ff40 	bl	8007790 <I2C_SlaveReceive_BTF>
 8006910:	e004      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006912:	bf00      	nop
 8006914:	e002      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800691a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b08a      	sub	sp, #40	; 0x28
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800693a:	2300      	movs	r3, #0
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006944:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	0a1b      	lsrs	r3, r3, #8
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00e      	beq.n	8006970 <HAL_I2C_ER_IRQHandler+0x4e>
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	0a1b      	lsrs	r3, r3, #8
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800696e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <HAL_I2C_ER_IRQHandler+0x78>
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f043 0302 	orr.w	r3, r3, #2
 800698e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006998:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	0a9b      	lsrs	r3, r3, #10
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03f      	beq.n	8006a26 <HAL_I2C_ER_IRQHandler+0x104>
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d039      	beq.n	8006a26 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80069b2:	7efb      	ldrb	r3, [r7, #27]
 80069b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80069cc:	7ebb      	ldrb	r3, [r7, #26]
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d112      	bne.n	80069f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b21      	cmp	r3, #33	; 0x21
 80069dc:	d008      	beq.n	80069f0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80069de:	7cfb      	ldrb	r3, [r7, #19]
 80069e0:	2b29      	cmp	r3, #41	; 0x29
 80069e2:	d005      	beq.n	80069f0 <HAL_I2C_ER_IRQHandler+0xce>
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	2b28      	cmp	r3, #40	; 0x28
 80069e8:	d106      	bne.n	80069f8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b21      	cmp	r3, #33	; 0x21
 80069ee:	d103      	bne.n	80069f8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f869 	bl	8007ac8 <I2C_Slave_AF>
 80069f6:	e016      	b.n	8006a26 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a00:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a0a:	7efb      	ldrb	r3, [r7, #27]
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d002      	beq.n	8006a16 <HAL_I2C_ER_IRQHandler+0xf4>
 8006a10:	7efb      	ldrb	r3, [r7, #27]
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d107      	bne.n	8006a26 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a24:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	0adb      	lsrs	r3, r3, #11
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <HAL_I2C_ER_IRQHandler+0x12e>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	f043 0308 	orr.w	r3, r3, #8
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006a4e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f8a0 	bl	8007ba8 <I2C_ITError>
  }
}
 8006a68:	bf00      	nop
 8006a6a:	3728      	adds	r7, #40	; 0x28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
 8006acc:	4613      	mov	r3, r2
 8006ace:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d150      	bne.n	8006c08 <I2C_MasterTransmit_TXE+0xc8>
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b21      	cmp	r3, #33	; 0x21
 8006b6a:	d14d      	bne.n	8006c08 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d01d      	beq.n	8006bae <I2C_MasterTransmit_TXE+0x6e>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d01a      	beq.n	8006bae <I2C_MasterTransmit_TXE+0x6e>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b7e:	d016      	beq.n	8006bae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b8e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2211      	movs	r2, #17
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff ff62 	bl	8006a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bac:	e060      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bbc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bcc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d107      	bne.n	8006bf8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff7d 	bl	8006af0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bf6:	e03b      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff35 	bl	8006a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c06:	e033      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b21      	cmp	r3, #33	; 0x21
 8006c0c:	d005      	beq.n	8006c1a <I2C_MasterTransmit_TXE+0xda>
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d12d      	bne.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b22      	cmp	r3, #34	; 0x22
 8006c18:	d12a      	bne.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d108      	bne.n	8006c36 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c34:	e01c      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d103      	bne.n	8006c4a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f88e 	bl	8006d64 <I2C_MemoryTransmit_TXE_BTF>
}
 8006c48:	e012      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	781a      	ldrb	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c6e:	e7ff      	b.n	8006c70 <I2C_MasterTransmit_TXE+0x130>
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b21      	cmp	r3, #33	; 0x21
 8006c90:	d164      	bne.n	8006d5c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006cc0:	e04c      	b.n	8006d5c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d01d      	beq.n	8006d04 <I2C_MasterTransmit_BTF+0x8c>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d01a      	beq.n	8006d04 <I2C_MasterTransmit_BTF+0x8c>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cd4:	d016      	beq.n	8006d04 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ce4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2211      	movs	r2, #17
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff feb7 	bl	8006a70 <HAL_I2C_MasterTxCpltCallback>
}
 8006d02:	e02b      	b.n	8006d5c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d12:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d22:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d107      	bne.n	8006d4e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fed2 	bl	8006af0 <HAL_I2C_MemTxCpltCallback>
}
 8006d4c:	e006      	b.n	8006d5c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe8a 	bl	8006a70 <HAL_I2C_MasterTxCpltCallback>
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11d      	bne.n	8006db8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10b      	bne.n	8006d9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006d9a:	e073      	b.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	121b      	asrs	r3, r3, #8
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006db6:	e065      	b.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10b      	bne.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006dd6:	e055      	b.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d151      	bne.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b22      	cmp	r3, #34	; 0x22
 8006de4:	d10d      	bne.n	8006e02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e00:	e040      	b.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d015      	beq.n	8006e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b21      	cmp	r3, #33	; 0x21
 8006e10:	d112      	bne.n	8006e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e36:	e025      	b.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d120      	bne.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b21      	cmp	r3, #33	; 0x21
 8006e46:	d11d      	bne.n	8006e84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fe36 	bl	8006af0 <HAL_I2C_MemTxCpltCallback>
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b22      	cmp	r3, #34	; 0x22
 8006e9e:	f040 80ac 	bne.w	8006ffa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d921      	bls.n	8006ef4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	f040 808c 	bne.w	8006ffa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006ef2:	e082      	b.n	8006ffa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d075      	beq.n	8006fe8 <I2C_MasterReceive_RXNE+0x15c>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d002      	beq.n	8006f08 <I2C_MasterReceive_RXNE+0x7c>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d16f      	bne.n	8006fe8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 f827 	bl	8007f5c <I2C_WaitOnSTOPRequestThroughIT>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d142      	bne.n	8006f9a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d10a      	bne.n	8006f84 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fdc1 	bl	8006b04 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f82:	e03a      	b.n	8006ffa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2212      	movs	r2, #18
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fd76 	bl	8006a84 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f98:	e02f      	b.n	8006ffa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fa8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fd99 	bl	8006b18 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fe6:	e008      	b.n	8006ffa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff6:	605a      	str	r2, [r3, #4]
}
 8006ff8:	e7ff      	b.n	8006ffa <I2C_MasterReceive_RXNE+0x16e>
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b04      	cmp	r3, #4
 8007018:	d11b      	bne.n	8007052 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007028:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007050:	e0bd      	b.n	80071ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d129      	bne.n	80070b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800706a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <I2C_MasterReceive_BTF+0x86>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b02      	cmp	r3, #2
 8007076:	d007      	beq.n	8007088 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070ae:	e08e      	b.n	80071ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d176      	bne.n	80071a8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d002      	beq.n	80070c6 <I2C_MasterReceive_BTF+0xc4>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d108      	bne.n	80070d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e019      	b.n	800710c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d002      	beq.n	80070e4 <I2C_MasterReceive_BTF+0xe2>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d108      	bne.n	80070f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e00a      	b.n	800710c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d007      	beq.n	800710c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800710a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007166:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d10a      	bne.n	8007192 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fcba 	bl	8006b04 <HAL_I2C_MemRxCpltCallback>
}
 8007190:	e01d      	b.n	80071ce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2212      	movs	r2, #18
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fc6f 	bl	8006a84 <HAL_I2C_MasterRxCpltCallback>
}
 80071a6:	e012      	b.n	80071ce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d117      	bne.n	800721a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007202:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007204:	e067      	b.n	80072d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	611a      	str	r2, [r3, #16]
}
 8007218:	e05d      	b.n	80072d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007222:	d133      	bne.n	800728c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b21      	cmp	r3, #33	; 0x21
 800722e:	d109      	bne.n	8007244 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	b2db      	uxtb	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007240:	611a      	str	r2, [r3, #16]
 8007242:	e008      	b.n	8007256 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <I2C_Master_SB+0x92>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d032      	beq.n	80072d6 <I2C_Master_SB+0x100>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d02d      	beq.n	80072d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007288:	605a      	str	r2, [r3, #4]
}
 800728a:	e024      	b.n	80072d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10e      	bne.n	80072b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	b29b      	uxth	r3, r3
 800729a:	11db      	asrs	r3, r3, #7
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0306 	and.w	r3, r3, #6
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f063 030f 	orn	r3, r3, #15
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	611a      	str	r2, [r3, #16]
}
 80072b0:	e011      	b.n	80072d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10d      	bne.n	80072d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	b29b      	uxth	r3, r3
 80072c0:	11db      	asrs	r3, r3, #7
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0306 	and.w	r3, r3, #6
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f063 030e 	orn	r3, r3, #14
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	611a      	str	r2, [r3, #16]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <I2C_Master_ADD10+0x26>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <I2C_Master_ADD10+0x48>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007328:	605a      	str	r2, [r3, #4]
  }
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007336:	b480      	push	{r7}
 8007338:	b091      	sub	sp, #68	; 0x44
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b22      	cmp	r3, #34	; 0x22
 800735e:	f040 8169 	bne.w	8007634 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10f      	bne.n	800738a <I2C_Master_ADDR+0x54>
 800736a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d10b      	bne.n	800738a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007372:	2300      	movs	r3, #0
 8007374:	633b      	str	r3, [r7, #48]	; 0x30
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	633b      	str	r3, [r7, #48]	; 0x30
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	e160      	b.n	800764c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d11d      	bne.n	80073ce <I2C_Master_ADDR+0x98>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800739a:	d118      	bne.n	80073ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800739c:	2300      	movs	r3, #0
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	651a      	str	r2, [r3, #80]	; 0x50
 80073cc:	e13e      	b.n	800764c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d113      	bne.n	8007400 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d8:	2300      	movs	r3, #0
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e115      	b.n	800762c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	f040 808a 	bne.w	8007520 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007412:	d137      	bne.n	8007484 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007432:	d113      	bne.n	800745c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007442:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	e0e7      	b.n	800762c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745c:	2300      	movs	r3, #0
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e0d3      	b.n	800762c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b08      	cmp	r3, #8
 8007488:	d02e      	beq.n	80074e8 <I2C_Master_ADDR+0x1b2>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b20      	cmp	r3, #32
 800748e:	d02b      	beq.n	80074e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	2b12      	cmp	r3, #18
 8007494:	d102      	bne.n	800749c <I2C_Master_ADDR+0x166>
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	2b01      	cmp	r3, #1
 800749a:	d125      	bne.n	80074e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d00e      	beq.n	80074c0 <I2C_Master_ADDR+0x18a>
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d00b      	beq.n	80074c0 <I2C_Master_ADDR+0x18a>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	2b10      	cmp	r3, #16
 80074ac:	d008      	beq.n	80074c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e007      	b.n	80074d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	e0a1      	b.n	800762c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e085      	b.n	800762c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d14d      	bne.n	80075c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2b04      	cmp	r3, #4
 800752e:	d016      	beq.n	800755e <I2C_Master_ADDR+0x228>
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b02      	cmp	r3, #2
 8007534:	d013      	beq.n	800755e <I2C_Master_ADDR+0x228>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	2b10      	cmp	r3, #16
 800753a:	d010      	beq.n	800755e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e007      	b.n	800756e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800756c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757c:	d117      	bne.n	80075ae <I2C_Master_ADDR+0x278>
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007584:	d00b      	beq.n	800759e <I2C_Master_ADDR+0x268>
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	2b01      	cmp	r3, #1
 800758a:	d008      	beq.n	800759e <I2C_Master_ADDR+0x268>
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	2b08      	cmp	r3, #8
 8007590:	d005      	beq.n	800759e <I2C_Master_ADDR+0x268>
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2b10      	cmp	r3, #16
 8007596:	d002      	beq.n	800759e <I2C_Master_ADDR+0x268>
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	2b20      	cmp	r3, #32
 800759c:	d107      	bne.n	80075ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	e032      	b.n	800762c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d117      	bne.n	8007616 <I2C_Master_ADDR+0x2e0>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075ec:	d00b      	beq.n	8007606 <I2C_Master_ADDR+0x2d0>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d008      	beq.n	8007606 <I2C_Master_ADDR+0x2d0>
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d005      	beq.n	8007606 <I2C_Master_ADDR+0x2d0>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d002      	beq.n	8007606 <I2C_Master_ADDR+0x2d0>
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b20      	cmp	r3, #32
 8007604:	d107      	bne.n	8007616 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007632:	e00b      	b.n	800764c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	e7ff      	b.n	800764c <I2C_Master_ADDR+0x316>
 800764c:	bf00      	nop
 800764e:	3744      	adds	r7, #68	; 0x44
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d02b      	beq.n	80076ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d114      	bne.n	80076ca <I2C_SlaveTransmit_TXE+0x72>
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b29      	cmp	r3, #41	; 0x29
 80076a4:	d111      	bne.n	80076ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2221      	movs	r2, #33	; 0x21
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2228      	movs	r2, #40	; 0x28
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff f9e7 	bl	8006a98 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d011      	beq.n	8007708 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02c      	beq.n	8007788 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d114      	bne.n	8007788 <I2C_SlaveReceive_RXNE+0x74>
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b2a      	cmp	r3, #42	; 0x2a
 8007762:	d111      	bne.n	8007788 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007772:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2222      	movs	r2, #34	; 0x22
 8007778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2228      	movs	r2, #40	; 0x28
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff f992 	bl	8006aac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007788:	bf00      	nop
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d012      	beq.n	80077c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077ee:	2b28      	cmp	r3, #40	; 0x28
 80077f0:	d127      	bne.n	8007842 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007800:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	089b      	lsrs	r3, r3, #2
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800780e:	2301      	movs	r3, #1
 8007810:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	09db      	lsrs	r3, r3, #7
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	81bb      	strh	r3, [r7, #12]
 8007824:	e002      	b.n	800782c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007834:	89ba      	ldrh	r2, [r7, #12]
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f940 	bl	8006ac0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007840:	e00e      	b.n	8007860 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007876:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007886:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007888:	2300      	movs	r3, #0
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c4:	d172      	bne.n	80079ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b22      	cmp	r3, #34	; 0x22
 80078ca:	d002      	beq.n	80078d2 <I2C_Slave_STOPF+0x6a>
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b2a      	cmp	r3, #42	; 0x2a
 80078d0:	d135      	bne.n	800793e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0204 	orr.w	r2, r3, #4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007904:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe f88e 	bl	8005a2c <HAL_DMA_GetState>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d049      	beq.n	80079aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	4a69      	ldr	r2, [pc, #420]	; (8007ac0 <I2C_Slave_STOPF+0x258>)
 800791c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd fed6 	bl	80056d4 <HAL_DMA_Abort_IT>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d03d      	beq.n	80079aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800793c:	e035      	b.n	80079aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f043 0204 	orr.w	r2, r3, #4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f858 	bl	8005a2c <HAL_DMA_GetState>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d014      	beq.n	80079ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	4a4e      	ldr	r2, [pc, #312]	; (8007ac0 <I2C_Slave_STOPF+0x258>)
 8007988:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	4618      	mov	r0, r3
 8007990:	f7fd fea0 	bl	80056d4 <HAL_DMA_Abort_IT>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	e000      	b.n	80079ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d03e      	beq.n	8007a34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d112      	bne.n	80079ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d112      	bne.n	8007a1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f043 0204 	orr.w	r2, r3, #4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8b3 	bl	8007ba8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a42:	e039      	b.n	8007ab8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	2b2a      	cmp	r3, #42	; 0x2a
 8007a48:	d109      	bne.n	8007a5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2228      	movs	r2, #40	; 0x28
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff f827 	bl	8006aac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b28      	cmp	r3, #40	; 0x28
 8007a68:	d111      	bne.n	8007a8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <I2C_Slave_STOPF+0x25c>)
 8007a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff f828 	bl	8006adc <HAL_I2C_ListenCpltCallback>
}
 8007a8c:	e014      	b.n	8007ab8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	2b22      	cmp	r3, #34	; 0x22
 8007a94:	d002      	beq.n	8007a9c <I2C_Slave_STOPF+0x234>
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	2b22      	cmp	r3, #34	; 0x22
 8007a9a:	d10d      	bne.n	8007ab8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fe fffa 	bl	8006aac <HAL_I2C_SlaveRxCpltCallback>
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08007e0d 	.word	0x08007e0d
 8007ac4:	ffff0000 	.word	0xffff0000

08007ac8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d002      	beq.n	8007aea <I2C_Slave_AF+0x22>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d129      	bne.n	8007b3e <I2C_Slave_AF+0x76>
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b28      	cmp	r3, #40	; 0x28
 8007aee:	d126      	bne.n	8007b3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a2c      	ldr	r2, [pc, #176]	; (8007ba4 <I2C_Slave_AF+0xdc>)
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fe ffd0 	bl	8006adc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007b3c:	e02e      	b.n	8007b9c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b21      	cmp	r3, #33	; 0x21
 8007b42:	d126      	bne.n	8007b92 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a17      	ldr	r2, [pc, #92]	; (8007ba4 <I2C_Slave_AF+0xdc>)
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2221      	movs	r2, #33	; 0x21
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b88:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe ff84 	bl	8006a98 <HAL_I2C_SlaveTxCpltCallback>
}
 8007b90:	e004      	b.n	8007b9c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9a:	615a      	str	r2, [r3, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	ffff0000 	.word	0xffff0000

08007ba8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d002      	beq.n	8007bcc <I2C_ITError+0x24>
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d10a      	bne.n	8007be2 <I2C_ITError+0x3a>
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b22      	cmp	r3, #34	; 0x22
 8007bd0:	d107      	bne.n	8007be2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007be0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007be8:	2b28      	cmp	r3, #40	; 0x28
 8007bea:	d107      	bne.n	8007bfc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2228      	movs	r2, #40	; 0x28
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bfa:	e015      	b.n	8007c28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	d00a      	beq.n	8007c22 <I2C_ITError+0x7a>
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b60      	cmp	r3, #96	; 0x60
 8007c10:	d007      	beq.n	8007c22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c36:	d162      	bne.n	8007cfe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d020      	beq.n	8007c98 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	4a6a      	ldr	r2, [pc, #424]	; (8007e04 <I2C_ITError+0x25c>)
 8007c5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd fd36 	bl	80056d4 <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 8089 	beq.w	8007d82 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c92:	4610      	mov	r0, r2
 8007c94:	4798      	blx	r3
 8007c96:	e074      	b.n	8007d82 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	4a59      	ldr	r2, [pc, #356]	; (8007e04 <I2C_ITError+0x25c>)
 8007c9e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fd fd15 	bl	80056d4 <HAL_DMA_Abort_IT>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d068      	beq.n	8007d82 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d10b      	bne.n	8007cd6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	e041      	b.n	8007d82 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b60      	cmp	r3, #96	; 0x60
 8007d08:	d125      	bne.n	8007d56 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d10b      	bne.n	8007d3e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fe feec 	bl	8006b2c <HAL_I2C_AbortCpltCallback>
 8007d54:	e015      	b.n	8007d82 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d10b      	bne.n	8007d7c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fe fecb 	bl	8006b18 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10e      	bne.n	8007db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dbe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d113      	bne.n	8007dfc <I2C_ITError+0x254>
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b28      	cmp	r3, #40	; 0x28
 8007dd8:	d110      	bne.n	8007dfc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <I2C_ITError+0x260>)
 8007dde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe fe70 	bl	8006adc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	08007e0d 	.word	0x08007e0d
 8007e08:	ffff0000 	.word	0xffff0000

08007e0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e26:	4b4b      	ldr	r3, [pc, #300]	; (8007f54 <I2C_DMAAbort+0x148>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	08db      	lsrs	r3, r3, #3
 8007e2c:	4a4a      	ldr	r2, [pc, #296]	; (8007f58 <I2C_DMAAbort+0x14c>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	0a1a      	lsrs	r2, r3, #8
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	00da      	lsls	r2, r3, #3
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f043 0220 	orr.w	r2, r3, #32
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007e52:	e00a      	b.n	8007e6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e68:	d0ea      	beq.n	8007e40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	2200      	movs	r2, #0
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	2200      	movs	r2, #0
 8007e88:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	2200      	movs	r2, #0
 8007eae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b60      	cmp	r3, #96	; 0x60
 8007eda:	d10e      	bne.n	8007efa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7fe fe1a 	bl	8006b2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ef8:	e027      	b.n	8007f4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007efa:	7cfb      	ldrb	r3, [r7, #19]
 8007efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f00:	2b28      	cmp	r3, #40	; 0x28
 8007f02:	d117      	bne.n	8007f34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0201 	orr.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2200      	movs	r2, #0
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2228      	movs	r2, #40	; 0x28
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f32:	e007      	b.n	8007f44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f44:	6978      	ldr	r0, [r7, #20]
 8007f46:	f7fe fde7 	bl	8006b18 <HAL_I2C_ErrorCallback>
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000040 	.word	0x20000040
 8007f58:	14f8b589 	.word	0x14f8b589

08007f5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f68:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	08db      	lsrs	r3, r3, #3
 8007f6e:	4a13      	ldr	r2, [pc, #76]	; (8007fbc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0a1a      	lsrs	r2, r3, #8
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d107      	bne.n	8007f9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0220 	orr.w	r2, r3, #32
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e008      	b.n	8007fac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa8:	d0e9      	beq.n	8007f7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20000040 	.word	0x20000040
 8007fbc:	14f8b589 	.word	0x14f8b589

08007fc0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007fd0:	d103      	bne.n	8007fda <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007fd8:	e007      	b.n	8007fea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007fe2:	d102      	bne.n	8007fea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
	...

08007ff8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008002:	2300      	movs	r3, #0
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	4b20      	ldr	r3, [pc, #128]	; (8008088 <HAL_PWREx_EnableOverDrive+0x90>)
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	4a1f      	ldr	r2, [pc, #124]	; (8008088 <HAL_PWREx_EnableOverDrive+0x90>)
 800800c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008010:	6413      	str	r3, [r2, #64]	; 0x40
 8008012:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <HAL_PWREx_EnableOverDrive+0x90>)
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <HAL_PWREx_EnableOverDrive+0x94>)
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008024:	f7fb fb92 	bl	800374c <HAL_GetTick>
 8008028:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800802a:	e009      	b.n	8008040 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800802c:	f7fb fb8e 	bl	800374c <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800803a:	d901      	bls.n	8008040 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e01f      	b.n	8008080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <HAL_PWREx_EnableOverDrive+0x98>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d1ee      	bne.n	800802c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800804e:	4b11      	ldr	r3, [pc, #68]	; (8008094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008050:	2201      	movs	r2, #1
 8008052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008054:	f7fb fb7a 	bl	800374c <HAL_GetTick>
 8008058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800805a:	e009      	b.n	8008070 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800805c:	f7fb fb76 	bl	800374c <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800806a:	d901      	bls.n	8008070 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e007      	b.n	8008080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <HAL_PWREx_EnableOverDrive+0x98>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800807c:	d1ee      	bne.n	800805c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40023800 	.word	0x40023800
 800808c:	420e0040 	.word	0x420e0040
 8008090:	40007000 	.word	0x40007000
 8008094:	420e0044 	.word	0x420e0044

08008098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e18c      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_RCC_ClockConfig+0x24>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d904      	bls.n	80080c6 <HAL_RCC_ClockConfig+0x2e>
 80080bc:	f240 215a 	movw	r1, #602	; 0x25a
 80080c0:	4887      	ldr	r0, [pc, #540]	; (80082e0 <HAL_RCC_ClockConfig+0x248>)
 80080c2:	f7fb f820 	bl	8003106 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d031      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d02e      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d02b      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d028      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d025      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	d022      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d01f      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b07      	cmp	r3, #7
 80080f4:	d01c      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d019      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d016      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b0a      	cmp	r3, #10
 8008106:	d013      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b0b      	cmp	r3, #11
 800810c:	d010      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b0c      	cmp	r3, #12
 8008112:	d00d      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b0d      	cmp	r3, #13
 8008118:	d00a      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b0e      	cmp	r3, #14
 800811e:	d007      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d004      	beq.n	8008130 <HAL_RCC_ClockConfig+0x98>
 8008126:	f240 215b 	movw	r1, #603	; 0x25b
 800812a:	486d      	ldr	r0, [pc, #436]	; (80082e0 <HAL_RCC_ClockConfig+0x248>)
 800812c:	f7fa ffeb 	bl	8003106 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008130:	4b6c      	ldr	r3, [pc, #432]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d90c      	bls.n	8008158 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813e:	4b69      	ldr	r3, [pc, #420]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008146:	4b67      	ldr	r3, [pc, #412]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d001      	beq.n	8008158 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e136      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d049      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008170:	4b5d      	ldr	r3, [pc, #372]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	4a5c      	ldr	r2, [pc, #368]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800817a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008188:	4b57      	ldr	r3, [pc, #348]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a56      	ldr	r2, [pc, #344]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 800818e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d024      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b80      	cmp	r3, #128	; 0x80
 80081a2:	d020      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b90      	cmp	r3, #144	; 0x90
 80081aa:	d01c      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2ba0      	cmp	r3, #160	; 0xa0
 80081b2:	d018      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2bb0      	cmp	r3, #176	; 0xb0
 80081ba:	d014      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2bc0      	cmp	r3, #192	; 0xc0
 80081c2:	d010      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	2bd0      	cmp	r3, #208	; 0xd0
 80081ca:	d00c      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2be0      	cmp	r3, #224	; 0xe0
 80081d2:	d008      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2bf0      	cmp	r3, #240	; 0xf0
 80081da:	d004      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x14e>
 80081dc:	f240 217e 	movw	r1, #638	; 0x27e
 80081e0:	483f      	ldr	r0, [pc, #252]	; (80082e0 <HAL_RCC_ClockConfig+0x248>)
 80081e2:	f7fa ff90 	bl	8003106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081e6:	4b40      	ldr	r3, [pc, #256]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	493d      	ldr	r1, [pc, #244]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d059      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_RCC_ClockConfig+0x196>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d00c      	beq.n	800822e <HAL_RCC_ClockConfig+0x196>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d008      	beq.n	800822e <HAL_RCC_ClockConfig+0x196>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d004      	beq.n	800822e <HAL_RCC_ClockConfig+0x196>
 8008224:	f240 2185 	movw	r1, #645	; 0x285
 8008228:	482d      	ldr	r0, [pc, #180]	; (80082e0 <HAL_RCC_ClockConfig+0x248>)
 800822a:	f7fa ff6c 	bl	8003106 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d119      	bne.n	8008276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e0bf      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d003      	beq.n	8008256 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008252:	2b03      	cmp	r3, #3
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008256:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e0af      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e0a7      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008276:	4b1c      	ldr	r3, [pc, #112]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 0203 	bic.w	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4919      	ldr	r1, [pc, #100]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 8008284:	4313      	orrs	r3, r2
 8008286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008288:	f7fb fa60 	bl	800374c <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	e00a      	b.n	80082a6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008290:	f7fb fa5c 	bl	800374c <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	; 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e08f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <HAL_RCC_ClockConfig+0x250>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 020c 	and.w	r2, r3, #12
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1eb      	bne.n	8008290 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d212      	bcs.n	80082ec <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_ClockConfig+0x24c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d007      	beq.n	80082ec <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e072      	b.n	80083c6 <HAL_RCC_ClockConfig+0x32e>
 80082e0:	0800c70c 	.word	0x0800c70c
 80082e4:	40023c00 	.word	0x40023c00
 80082e8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d025      	beq.n	8008344 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d018      	beq.n	8008332 <HAL_RCC_ClockConfig+0x29a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008308:	d013      	beq.n	8008332 <HAL_RCC_ClockConfig+0x29a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008312:	d00e      	beq.n	8008332 <HAL_RCC_ClockConfig+0x29a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800831c:	d009      	beq.n	8008332 <HAL_RCC_ClockConfig+0x29a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008326:	d004      	beq.n	8008332 <HAL_RCC_ClockConfig+0x29a>
 8008328:	f240 21c3 	movw	r1, #707	; 0x2c3
 800832c:	4828      	ldr	r0, [pc, #160]	; (80083d0 <HAL_RCC_ClockConfig+0x338>)
 800832e:	f7fa feea 	bl	8003106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008332:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <HAL_RCC_ClockConfig+0x33c>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	4925      	ldr	r1, [pc, #148]	; (80083d4 <HAL_RCC_ClockConfig+0x33c>)
 8008340:	4313      	orrs	r3, r2
 8008342:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0308 	and.w	r3, r3, #8
 800834c:	2b00      	cmp	r3, #0
 800834e:	d026      	beq.n	800839e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d018      	beq.n	800838a <HAL_RCC_ClockConfig+0x2f2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008360:	d013      	beq.n	800838a <HAL_RCC_ClockConfig+0x2f2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800836a:	d00e      	beq.n	800838a <HAL_RCC_ClockConfig+0x2f2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008374:	d009      	beq.n	800838a <HAL_RCC_ClockConfig+0x2f2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800837e:	d004      	beq.n	800838a <HAL_RCC_ClockConfig+0x2f2>
 8008380:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008384:	4812      	ldr	r0, [pc, #72]	; (80083d0 <HAL_RCC_ClockConfig+0x338>)
 8008386:	f7fa febe 	bl	8003106 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_RCC_ClockConfig+0x33c>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	490e      	ldr	r1, [pc, #56]	; (80083d4 <HAL_RCC_ClockConfig+0x33c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800839e:	f000 f887 	bl	80084b0 <HAL_RCC_GetSysClockFreq>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCC_ClockConfig+0x33c>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <HAL_RCC_ClockConfig+0x340>)
 80083b0:	5ccb      	ldrb	r3, [r1, r3]
 80083b2:	fa22 f303 	lsr.w	r3, r2, r3
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <HAL_RCC_ClockConfig+0x344>)
 80083b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_RCC_ClockConfig+0x348>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fa ffc4 	bl	800334c <HAL_InitTick>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	0800c70c 	.word	0x0800c70c
 80083d4:	40023800 	.word	0x40023800
 80083d8:	0800c7f8 	.word	0x0800c7f8
 80083dc:	20000040 	.word	0x20000040
 80083e0:	20000044 	.word	0x20000044

080083e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083e8:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80083ea:	681b      	ldr	r3, [r3, #0]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000040 	.word	0x20000040

080083fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008400:	f7ff fff0 	bl	80083e4 <HAL_RCC_GetHCLKFreq>
 8008404:	4602      	mov	r2, r0
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	0a9b      	lsrs	r3, r3, #10
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	4903      	ldr	r1, [pc, #12]	; (8008420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008412:	5ccb      	ldrb	r3, [r1, r3]
 8008414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40023800 	.word	0x40023800
 8008420:	0800c808 	.word	0x0800c808

08008424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008428:	f7ff ffdc 	bl	80083e4 <HAL_RCC_GetHCLKFreq>
 800842c:	4602      	mov	r2, r0
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	0b5b      	lsrs	r3, r3, #13
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	4903      	ldr	r1, [pc, #12]	; (8008448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800843a:	5ccb      	ldrb	r3, [r1, r3]
 800843c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008440:	4618      	mov	r0, r3
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40023800 	.word	0x40023800
 8008448:	0800c808 	.word	0x0800c808

0800844c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	220f      	movs	r2, #15
 800845a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800845c:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <HAL_RCC_GetClockConfig+0x5c>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 0203 	and.w	r2, r3, #3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008468:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <HAL_RCC_GetClockConfig+0x5c>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008480:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	08db      	lsrs	r3, r3, #3
 8008486:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <HAL_RCC_GetClockConfig+0x60>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 020f 	and.w	r2, r3, #15
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40023c00 	.word	0x40023c00

080084b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b4:	b0ae      	sub	sp, #184	; 0xb8
 80084b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084d6:	4bcb      	ldr	r3, [pc, #812]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
 80084de:	2b0c      	cmp	r3, #12
 80084e0:	f200 8206 	bhi.w	80088f0 <HAL_RCC_GetSysClockFreq+0x440>
 80084e4:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008521 	.word	0x08008521
 80084f0:	080088f1 	.word	0x080088f1
 80084f4:	080088f1 	.word	0x080088f1
 80084f8:	080088f1 	.word	0x080088f1
 80084fc:	08008529 	.word	0x08008529
 8008500:	080088f1 	.word	0x080088f1
 8008504:	080088f1 	.word	0x080088f1
 8008508:	080088f1 	.word	0x080088f1
 800850c:	08008531 	.word	0x08008531
 8008510:	080088f1 	.word	0x080088f1
 8008514:	080088f1 	.word	0x080088f1
 8008518:	080088f1 	.word	0x080088f1
 800851c:	08008721 	.word	0x08008721
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008520:	4bb9      	ldr	r3, [pc, #740]	; (8008808 <HAL_RCC_GetSysClockFreq+0x358>)
 8008522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008526:	e1e7      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008528:	4bb8      	ldr	r3, [pc, #736]	; (800880c <HAL_RCC_GetSysClockFreq+0x35c>)
 800852a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800852e:	e1e3      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008530:	4bb4      	ldr	r3, [pc, #720]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800853c:	4bb1      	ldr	r3, [pc, #708]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d071      	beq.n	800862c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008548:	4bae      	ldr	r3, [pc, #696]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	099b      	lsrs	r3, r3, #6
 800854e:	2200      	movs	r2, #0
 8008550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008554:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800855c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008564:	2300      	movs	r3, #0
 8008566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800856a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800856e:	4622      	mov	r2, r4
 8008570:	462b      	mov	r3, r5
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f04f 0100 	mov.w	r1, #0
 800857a:	0159      	lsls	r1, r3, #5
 800857c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008580:	0150      	lsls	r0, r2, #5
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4621      	mov	r1, r4
 8008588:	1a51      	subs	r1, r2, r1
 800858a:	6439      	str	r1, [r7, #64]	; 0x40
 800858c:	4629      	mov	r1, r5
 800858e:	eb63 0301 	sbc.w	r3, r3, r1
 8008592:	647b      	str	r3, [r7, #68]	; 0x44
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80085a0:	4649      	mov	r1, r9
 80085a2:	018b      	lsls	r3, r1, #6
 80085a4:	4641      	mov	r1, r8
 80085a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085aa:	4641      	mov	r1, r8
 80085ac:	018a      	lsls	r2, r1, #6
 80085ae:	4641      	mov	r1, r8
 80085b0:	1a51      	subs	r1, r2, r1
 80085b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80085b4:	4649      	mov	r1, r9
 80085b6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80085c8:	4649      	mov	r1, r9
 80085ca:	00cb      	lsls	r3, r1, #3
 80085cc:	4641      	mov	r1, r8
 80085ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d2:	4641      	mov	r1, r8
 80085d4:	00ca      	lsls	r2, r1, #3
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	4622      	mov	r2, r4
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	633b      	str	r3, [r7, #48]	; 0x30
 80085e2:	462b      	mov	r3, r5
 80085e4:	460a      	mov	r2, r1
 80085e6:	eb42 0303 	adc.w	r3, r2, r3
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80085f8:	4629      	mov	r1, r5
 80085fa:	024b      	lsls	r3, r1, #9
 80085fc:	4621      	mov	r1, r4
 80085fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008602:	4621      	mov	r1, r4
 8008604:	024a      	lsls	r2, r1, #9
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800860e:	2200      	movs	r2, #0
 8008610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008618:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800861c:	f7f8 fa16 	bl	8000a4c <__aeabi_uldivmod>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4613      	mov	r3, r2
 8008626:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800862a:	e067      	b.n	80086fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800862c:	4b75      	ldr	r3, [pc, #468]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	099b      	lsrs	r3, r3, #6
 8008632:	2200      	movs	r2, #0
 8008634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008638:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800863c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	67bb      	str	r3, [r7, #120]	; 0x78
 8008646:	2300      	movs	r3, #0
 8008648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800864a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800864e:	4622      	mov	r2, r4
 8008650:	462b      	mov	r3, r5
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f04f 0100 	mov.w	r1, #0
 800865a:	0159      	lsls	r1, r3, #5
 800865c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008660:	0150      	lsls	r0, r2, #5
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4621      	mov	r1, r4
 8008668:	1a51      	subs	r1, r2, r1
 800866a:	62b9      	str	r1, [r7, #40]	; 0x28
 800866c:	4629      	mov	r1, r5
 800866e:	eb63 0301 	sbc.w	r3, r3, r1
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008680:	4649      	mov	r1, r9
 8008682:	018b      	lsls	r3, r1, #6
 8008684:	4641      	mov	r1, r8
 8008686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800868a:	4641      	mov	r1, r8
 800868c:	018a      	lsls	r2, r1, #6
 800868e:	4641      	mov	r1, r8
 8008690:	ebb2 0a01 	subs.w	sl, r2, r1
 8008694:	4649      	mov	r1, r9
 8008696:	eb63 0b01 	sbc.w	fp, r3, r1
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ae:	4692      	mov	sl, r2
 80086b0:	469b      	mov	fp, r3
 80086b2:	4623      	mov	r3, r4
 80086b4:	eb1a 0303 	adds.w	r3, sl, r3
 80086b8:	623b      	str	r3, [r7, #32]
 80086ba:	462b      	mov	r3, r5
 80086bc:	eb4b 0303 	adc.w	r3, fp, r3
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80086ce:	4629      	mov	r1, r5
 80086d0:	028b      	lsls	r3, r1, #10
 80086d2:	4621      	mov	r1, r4
 80086d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086d8:	4621      	mov	r1, r4
 80086da:	028a      	lsls	r2, r1, #10
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e4:	2200      	movs	r2, #0
 80086e6:	673b      	str	r3, [r7, #112]	; 0x70
 80086e8:	677a      	str	r2, [r7, #116]	; 0x74
 80086ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80086ee:	f7f8 f9ad 	bl	8000a4c <__aeabi_uldivmod>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4613      	mov	r3, r2
 80086f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086fc:	4b41      	ldr	r3, [pc, #260]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	0c1b      	lsrs	r3, r3, #16
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	3301      	adds	r3, #1
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800870e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008716:	fbb2 f3f3 	udiv	r3, r2, r3
 800871a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800871e:	e0eb      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008720:	4b38      	ldr	r3, [pc, #224]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800872c:	4b35      	ldr	r3, [pc, #212]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d06b      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008738:	4b32      	ldr	r3, [pc, #200]	; (8008804 <HAL_RCC_GetSysClockFreq+0x354>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	099b      	lsrs	r3, r3, #6
 800873e:	2200      	movs	r2, #0
 8008740:	66bb      	str	r3, [r7, #104]	; 0x68
 8008742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874a:	663b      	str	r3, [r7, #96]	; 0x60
 800874c:	2300      	movs	r3, #0
 800874e:	667b      	str	r3, [r7, #100]	; 0x64
 8008750:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008754:	4622      	mov	r2, r4
 8008756:	462b      	mov	r3, r5
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	f04f 0100 	mov.w	r1, #0
 8008760:	0159      	lsls	r1, r3, #5
 8008762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008766:	0150      	lsls	r0, r2, #5
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4621      	mov	r1, r4
 800876e:	1a51      	subs	r1, r2, r1
 8008770:	61b9      	str	r1, [r7, #24]
 8008772:	4629      	mov	r1, r5
 8008774:	eb63 0301 	sbc.w	r3, r3, r1
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	f04f 0300 	mov.w	r3, #0
 8008782:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008786:	4659      	mov	r1, fp
 8008788:	018b      	lsls	r3, r1, #6
 800878a:	4651      	mov	r1, sl
 800878c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008790:	4651      	mov	r1, sl
 8008792:	018a      	lsls	r2, r1, #6
 8008794:	4651      	mov	r1, sl
 8008796:	ebb2 0801 	subs.w	r8, r2, r1
 800879a:	4659      	mov	r1, fp
 800879c:	eb63 0901 	sbc.w	r9, r3, r1
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b4:	4690      	mov	r8, r2
 80087b6:	4699      	mov	r9, r3
 80087b8:	4623      	mov	r3, r4
 80087ba:	eb18 0303 	adds.w	r3, r8, r3
 80087be:	613b      	str	r3, [r7, #16]
 80087c0:	462b      	mov	r3, r5
 80087c2:	eb49 0303 	adc.w	r3, r9, r3
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80087d4:	4629      	mov	r1, r5
 80087d6:	024b      	lsls	r3, r1, #9
 80087d8:	4621      	mov	r1, r4
 80087da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087de:	4621      	mov	r1, r4
 80087e0:	024a      	lsls	r2, r1, #9
 80087e2:	4610      	mov	r0, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ea:	2200      	movs	r2, #0
 80087ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80087f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087f4:	f7f8 f92a 	bl	8000a4c <__aeabi_uldivmod>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4613      	mov	r3, r2
 80087fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008802:	e065      	b.n	80088d0 <HAL_RCC_GetSysClockFreq+0x420>
 8008804:	40023800 	.word	0x40023800
 8008808:	00f42400 	.word	0x00f42400
 800880c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008810:	4b3d      	ldr	r3, [pc, #244]	; (8008908 <HAL_RCC_GetSysClockFreq+0x458>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	099b      	lsrs	r3, r3, #6
 8008816:	2200      	movs	r2, #0
 8008818:	4618      	mov	r0, r3
 800881a:	4611      	mov	r1, r2
 800881c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008820:	653b      	str	r3, [r7, #80]	; 0x50
 8008822:	2300      	movs	r3, #0
 8008824:	657b      	str	r3, [r7, #84]	; 0x54
 8008826:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800882a:	4642      	mov	r2, r8
 800882c:	464b      	mov	r3, r9
 800882e:	f04f 0000 	mov.w	r0, #0
 8008832:	f04f 0100 	mov.w	r1, #0
 8008836:	0159      	lsls	r1, r3, #5
 8008838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800883c:	0150      	lsls	r0, r2, #5
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4641      	mov	r1, r8
 8008844:	1a51      	subs	r1, r2, r1
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	4649      	mov	r1, r9
 800884a:	eb63 0301 	sbc.w	r3, r3, r1
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800885c:	4659      	mov	r1, fp
 800885e:	018b      	lsls	r3, r1, #6
 8008860:	4651      	mov	r1, sl
 8008862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008866:	4651      	mov	r1, sl
 8008868:	018a      	lsls	r2, r1, #6
 800886a:	4651      	mov	r1, sl
 800886c:	1a54      	subs	r4, r2, r1
 800886e:	4659      	mov	r1, fp
 8008870:	eb63 0501 	sbc.w	r5, r3, r1
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	00eb      	lsls	r3, r5, #3
 800887e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008882:	00e2      	lsls	r2, r4, #3
 8008884:	4614      	mov	r4, r2
 8008886:	461d      	mov	r5, r3
 8008888:	4643      	mov	r3, r8
 800888a:	18e3      	adds	r3, r4, r3
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	464b      	mov	r3, r9
 8008890:	eb45 0303 	adc.w	r3, r5, r3
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	f04f 0300 	mov.w	r3, #0
 800889e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088a2:	4629      	mov	r1, r5
 80088a4:	028b      	lsls	r3, r1, #10
 80088a6:	4621      	mov	r1, r4
 80088a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088ac:	4621      	mov	r1, r4
 80088ae:	028a      	lsls	r2, r1, #10
 80088b0:	4610      	mov	r0, r2
 80088b2:	4619      	mov	r1, r3
 80088b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088b8:	2200      	movs	r2, #0
 80088ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80088bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80088be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088c2:	f7f8 f8c3 	bl	8000a4c <__aeabi_uldivmod>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4613      	mov	r3, r2
 80088cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <HAL_RCC_GetSysClockFreq+0x458>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	0f1b      	lsrs	r3, r3, #28
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80088de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80088ee:	e003      	b.n	80088f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088f0:	4b06      	ldr	r3, [pc, #24]	; (800890c <HAL_RCC_GetSysClockFreq+0x45c>)
 80088f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80088f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	37b8      	adds	r7, #184	; 0xb8
 8008900:	46bd      	mov	sp, r7
 8008902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008906:	bf00      	nop
 8008908:	40023800 	.word	0x40023800
 800890c:	00f42400 	.word	0x00f42400

08008910 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e347      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d904      	bls.n	8008934 <HAL_RCC_OscConfig+0x24>
 800892a:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800892e:	4893      	ldr	r0, [pc, #588]	; (8008b7c <HAL_RCC_OscConfig+0x26c>)
 8008930:	f7fa fbe9 	bl	8003106 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8096 	beq.w	8008a6e <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <HAL_RCC_OscConfig+0x58>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008952:	d009      	beq.n	8008968 <HAL_RCC_OscConfig+0x58>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800895c:	d004      	beq.n	8008968 <HAL_RCC_OscConfig+0x58>
 800895e:	f640 5115 	movw	r1, #3349	; 0xd15
 8008962:	4886      	ldr	r0, [pc, #536]	; (8008b7c <HAL_RCC_OscConfig+0x26c>)
 8008964:	f7fa fbcf 	bl	8003106 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008968:	4b85      	ldr	r3, [pc, #532]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 030c 	and.w	r3, r3, #12
 8008970:	2b04      	cmp	r3, #4
 8008972:	d019      	beq.n	80089a8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008974:	4b82      	ldr	r3, [pc, #520]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800897c:	2b08      	cmp	r3, #8
 800897e:	d106      	bne.n	800898e <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008980:	4b7f      	ldr	r3, [pc, #508]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800898c:	d00c      	beq.n	80089a8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800898e:	4b7c      	ldr	r3, [pc, #496]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008996:	2b0c      	cmp	r3, #12
 8008998:	d112      	bne.n	80089c0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800899a:	4b79      	ldr	r3, [pc, #484]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089a6:	d10b      	bne.n	80089c0 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089a8:	4b75      	ldr	r3, [pc, #468]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05b      	beq.n	8008a6c <HAL_RCC_OscConfig+0x15c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d157      	bne.n	8008a6c <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e2f8      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c8:	d106      	bne.n	80089d8 <HAL_RCC_OscConfig+0xc8>
 80089ca:	4b6d      	ldr	r3, [pc, #436]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a6c      	ldr	r2, [pc, #432]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e01d      	b.n	8008a14 <HAL_RCC_OscConfig+0x104>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089e0:	d10c      	bne.n	80089fc <HAL_RCC_OscConfig+0xec>
 80089e2:	4b67      	ldr	r3, [pc, #412]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a66      	ldr	r2, [pc, #408]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	4b64      	ldr	r3, [pc, #400]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a63      	ldr	r2, [pc, #396]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_OscConfig+0x104>
 80089fc:	4b60      	ldr	r3, [pc, #384]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a5f      	ldr	r2, [pc, #380]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	4b5d      	ldr	r3, [pc, #372]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a5c      	ldr	r2, [pc, #368]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d013      	beq.n	8008a44 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1c:	f7fa fe96 	bl	800374c <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a24:	f7fa fe92 	bl	800374c <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b64      	cmp	r3, #100	; 0x64
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e2bd      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a36:	4b52      	ldr	r3, [pc, #328]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0x114>
 8008a42:	e014      	b.n	8008a6e <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a44:	f7fa fe82 	bl	800374c <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a4c:	f7fa fe7e 	bl	800374c <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e2a9      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a5e:	4b48      	ldr	r3, [pc, #288]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f0      	bne.n	8008a4c <HAL_RCC_OscConfig+0x13c>
 8008a6a:	e000      	b.n	8008a6e <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 808c 	beq.w	8008b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d008      	beq.n	8008a96 <HAL_RCC_OscConfig+0x186>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d004      	beq.n	8008a96 <HAL_RCC_OscConfig+0x186>
 8008a8c:	f640 514d 	movw	r1, #3405	; 0xd4d
 8008a90:	483a      	ldr	r0, [pc, #232]	; (8008b7c <HAL_RCC_OscConfig+0x26c>)
 8008a92:	f7fa fb38 	bl	8003106 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b1f      	cmp	r3, #31
 8008a9c:	d904      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x198>
 8008a9e:	f640 514e 	movw	r1, #3406	; 0xd4e
 8008aa2:	4836      	ldr	r0, [pc, #216]	; (8008b7c <HAL_RCC_OscConfig+0x26c>)
 8008aa4:	f7fa fb2f 	bl	8003106 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008aa8:	4b35      	ldr	r3, [pc, #212]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 030c 	and.w	r3, r3, #12
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d017      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ab4:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d105      	bne.n	8008acc <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ac0:	4b2f      	ldr	r3, [pc, #188]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008acc:	4b2c      	ldr	r3, [pc, #176]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ad4:	2b0c      	cmp	r3, #12
 8008ad6:	d11c      	bne.n	8008b12 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ad8:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d116      	bne.n	8008b12 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ae4:	4b26      	ldr	r3, [pc, #152]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_OscConfig+0x1ec>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e25a      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008afc:	4b20      	ldr	r3, [pc, #128]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	491d      	ldr	r1, [pc, #116]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b10:	e040      	b.n	8008b94 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d020      	beq.n	8008b5c <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b1a:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <HAL_RCC_OscConfig+0x274>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fa fe14 	bl	800374c <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b28:	f7fa fe10 	bl	800374c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e23b      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b3a:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b46:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	490a      	ldr	r1, [pc, #40]	; (8008b80 <HAL_RCC_OscConfig+0x270>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	600b      	str	r3, [r1, #0]
 8008b5a:	e01b      	b.n	8008b94 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b5c:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <HAL_RCC_OscConfig+0x274>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b62:	f7fa fdf3 	bl	800374c <HAL_GetTick>
 8008b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b68:	e00e      	b.n	8008b88 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b6a:	f7fa fdef 	bl	800374c <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d907      	bls.n	8008b88 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e21a      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
 8008b7c:	0800c744 	.word	0x0800c744
 8008b80:	40023800 	.word	0x40023800
 8008b84:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b88:	4b74      	ldr	r3, [pc, #464]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1ea      	bne.n	8008b6a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d03d      	beq.n	8008c1c <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d008      	beq.n	8008bba <HAL_RCC_OscConfig+0x2aa>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d004      	beq.n	8008bba <HAL_RCC_OscConfig+0x2aa>
 8008bb0:	f640 5194 	movw	r1, #3476	; 0xd94
 8008bb4:	486a      	ldr	r0, [pc, #424]	; (8008d60 <HAL_RCC_OscConfig+0x450>)
 8008bb6:	f7fa faa6 	bl	8003106 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d016      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bc2:	4b68      	ldr	r3, [pc, #416]	; (8008d64 <HAL_RCC_OscConfig+0x454>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc8:	f7fa fdc0 	bl	800374c <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bd0:	f7fa fdbc 	bl	800374c <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e1e7      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008be2:	4b5e      	ldr	r3, [pc, #376]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f0      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x2c0>
 8008bee:	e015      	b.n	8008c1c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bf0:	4b5c      	ldr	r3, [pc, #368]	; (8008d64 <HAL_RCC_OscConfig+0x454>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf6:	f7fa fda9 	bl	800374c <HAL_GetTick>
 8008bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bfc:	e008      	b.n	8008c10 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bfe:	f7fa fda5 	bl	800374c <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e1d0      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c10:	4b52      	ldr	r3, [pc, #328]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1f0      	bne.n	8008bfe <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80b0 	beq.w	8008d8a <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <HAL_RCC_OscConfig+0x340>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d008      	beq.n	8008c50 <HAL_RCC_OscConfig+0x340>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d004      	beq.n	8008c50 <HAL_RCC_OscConfig+0x340>
 8008c46:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8008c4a:	4845      	ldr	r0, [pc, #276]	; (8008d60 <HAL_RCC_OscConfig+0x450>)
 8008c4c:	f7fa fa5b 	bl	8003106 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c50:	4b42      	ldr	r3, [pc, #264]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10f      	bne.n	8008c7c <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60bb      	str	r3, [r7, #8]
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	4a3d      	ldr	r2, [pc, #244]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c74:	60bb      	str	r3, [r7, #8]
 8008c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c7c:	4b3a      	ldr	r3, [pc, #232]	; (8008d68 <HAL_RCC_OscConfig+0x458>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d118      	bne.n	8008cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c88:	4b37      	ldr	r3, [pc, #220]	; (8008d68 <HAL_RCC_OscConfig+0x458>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a36      	ldr	r2, [pc, #216]	; (8008d68 <HAL_RCC_OscConfig+0x458>)
 8008c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c94:	f7fa fd5a 	bl	800374c <HAL_GetTick>
 8008c98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c9c:	f7fa fd56 	bl	800374c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e181      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cae:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <HAL_RCC_OscConfig+0x458>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0f0      	beq.n	8008c9c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d106      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x3c0>
 8008cc2:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc6:	4a25      	ldr	r2, [pc, #148]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cc8:	f043 0301 	orr.w	r3, r3, #1
 8008ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cce:	e01c      	b.n	8008d0a <HAL_RCC_OscConfig+0x3fa>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	2b05      	cmp	r3, #5
 8008cd6:	d10c      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x3e2>
 8008cd8:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cdc:	4a1f      	ldr	r2, [pc, #124]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cde:	f043 0304 	orr.w	r3, r3, #4
 8008ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce8:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	6713      	str	r3, [r2, #112]	; 0x70
 8008cf0:	e00b      	b.n	8008d0a <HAL_RCC_OscConfig+0x3fa>
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	4a19      	ldr	r2, [pc, #100]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfe:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d02:	4a16      	ldr	r2, [pc, #88]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008d04:	f023 0304 	bic.w	r3, r3, #4
 8008d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d015      	beq.n	8008d3e <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d12:	f7fa fd1b 	bl	800374c <HAL_GetTick>
 8008d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d18:	e00a      	b.n	8008d30 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7fa fd17 	bl	800374c <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e140      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <HAL_RCC_OscConfig+0x44c>)
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0ee      	beq.n	8008d1a <HAL_RCC_OscConfig+0x40a>
 8008d3c:	e01c      	b.n	8008d78 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d3e:	f7fa fd05 	bl	800374c <HAL_GetTick>
 8008d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d44:	e012      	b.n	8008d6c <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d46:	f7fa fd01 	bl	800374c <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d909      	bls.n	8008d6c <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e12a      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	0800c744 	.word	0x0800c744
 8008d64:	42470e80 	.word	0x42470e80
 8008d68:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d6c:	4b93      	ldr	r3, [pc, #588]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e6      	bne.n	8008d46 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d105      	bne.n	8008d8a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d7e:	4b8f      	ldr	r3, [pc, #572]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	4a8e      	ldr	r2, [pc, #568]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00c      	beq.n	8008dac <HAL_RCC_OscConfig+0x49c>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d008      	beq.n	8008dac <HAL_RCC_OscConfig+0x49c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d004      	beq.n	8008dac <HAL_RCC_OscConfig+0x49c>
 8008da2:	f640 6103 	movw	r1, #3587	; 0xe03
 8008da6:	4886      	ldr	r0, [pc, #536]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008da8:	f7fa f9ad 	bl	8003106 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80fd 	beq.w	8008fb0 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008db6:	4b81      	ldr	r3, [pc, #516]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 030c 	and.w	r3, r3, #12
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	f000 80b6 	beq.w	8008f30 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	f040 809a 	bne.w	8008f02 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <HAL_RCC_OscConfig+0x4da>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dde:	d004      	beq.n	8008dea <HAL_RCC_OscConfig+0x4da>
 8008de0:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008de4:	4876      	ldr	r0, [pc, #472]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008de6:	f7fa f98e 	bl	8003106 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	2b3f      	cmp	r3, #63	; 0x3f
 8008df0:	d904      	bls.n	8008dfc <HAL_RCC_OscConfig+0x4ec>
 8008df2:	f640 610d 	movw	r1, #3597	; 0xe0d
 8008df6:	4872      	ldr	r0, [pc, #456]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008df8:	f7fa f985 	bl	8003106 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b31      	cmp	r3, #49	; 0x31
 8008e02:	d904      	bls.n	8008e0e <HAL_RCC_OscConfig+0x4fe>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008e0c:	d904      	bls.n	8008e18 <HAL_RCC_OscConfig+0x508>
 8008e0e:	f640 610e 	movw	r1, #3598	; 0xe0e
 8008e12:	486b      	ldr	r0, [pc, #428]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008e14:	f7fa f977 	bl	8003106 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d010      	beq.n	8008e42 <HAL_RCC_OscConfig+0x532>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d00c      	beq.n	8008e42 <HAL_RCC_OscConfig+0x532>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	2b06      	cmp	r3, #6
 8008e2e:	d008      	beq.n	8008e42 <HAL_RCC_OscConfig+0x532>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d004      	beq.n	8008e42 <HAL_RCC_OscConfig+0x532>
 8008e38:	f640 610f 	movw	r1, #3599	; 0xe0f
 8008e3c:	4860      	ldr	r0, [pc, #384]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008e3e:	f7fa f962 	bl	8003106 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d903      	bls.n	8008e52 <HAL_RCC_OscConfig+0x542>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	2b0f      	cmp	r3, #15
 8008e50:	d904      	bls.n	8008e5c <HAL_RCC_OscConfig+0x54c>
 8008e52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008e56:	485a      	ldr	r0, [pc, #360]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008e58:	f7fa f955 	bl	8003106 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d903      	bls.n	8008e6c <HAL_RCC_OscConfig+0x55c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	d904      	bls.n	8008e76 <HAL_RCC_OscConfig+0x566>
 8008e6c:	f640 6111 	movw	r1, #3601	; 0xe11
 8008e70:	4853      	ldr	r0, [pc, #332]	; (8008fc0 <HAL_RCC_OscConfig+0x6b0>)
 8008e72:	f7fa f948 	bl	8003106 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e76:	4b53      	ldr	r3, [pc, #332]	; (8008fc4 <HAL_RCC_OscConfig+0x6b4>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fa fc66 	bl	800374c <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e84:	f7fa fc62 	bl	800374c <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e08d      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e96:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f0      	bne.n	8008e84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69da      	ldr	r2, [r3, #28]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	019b      	lsls	r3, r3, #6
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb8:	085b      	lsrs	r3, r3, #1
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	061b      	lsls	r3, r3, #24
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	071b      	lsls	r3, r3, #28
 8008ece:	493b      	ldr	r1, [pc, #236]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ed4:	4b3b      	ldr	r3, [pc, #236]	; (8008fc4 <HAL_RCC_OscConfig+0x6b4>)
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eda:	f7fa fc37 	bl	800374c <HAL_GetTick>
 8008ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ee0:	e008      	b.n	8008ef4 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ee2:	f7fa fc33 	bl	800374c <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d901      	bls.n	8008ef4 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e05e      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ef4:	4b31      	ldr	r3, [pc, #196]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d0f0      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x5d2>
 8008f00:	e056      	b.n	8008fb0 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f02:	4b30      	ldr	r3, [pc, #192]	; (8008fc4 <HAL_RCC_OscConfig+0x6b4>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f08:	f7fa fc20 	bl	800374c <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f0e:	e008      	b.n	8008f22 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f10:	f7fa fc1c 	bl	800374c <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d901      	bls.n	8008f22 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e047      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f22:	4b26      	ldr	r3, [pc, #152]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <HAL_RCC_OscConfig+0x600>
 8008f2e:	e03f      	b.n	8008fb0 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e03a      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f3c:	4b1f      	ldr	r3, [pc, #124]	; (8008fbc <HAL_RCC_OscConfig+0x6ac>)
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d030      	beq.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d129      	bne.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d122      	bne.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d119      	bne.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	3b01      	subs	r3, #1
 8008f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d10f      	bne.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d107      	bne.n	8008fac <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d001      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	0800c744 	.word	0x0800c744
 8008fc4:	42470060 	.word	0x42470060

08008fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e1a4      	b.n	8009324 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a72      	ldr	r2, [pc, #456]	; (80091a8 <HAL_SPI_Init+0x1e0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d013      	beq.n	800900c <HAL_SPI_Init+0x44>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a70      	ldr	r2, [pc, #448]	; (80091ac <HAL_SPI_Init+0x1e4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00e      	beq.n	800900c <HAL_SPI_Init+0x44>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a6f      	ldr	r2, [pc, #444]	; (80091b0 <HAL_SPI_Init+0x1e8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d009      	beq.n	800900c <HAL_SPI_Init+0x44>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a6d      	ldr	r2, [pc, #436]	; (80091b4 <HAL_SPI_Init+0x1ec>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <HAL_SPI_Init+0x44>
 8009002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009006:	486c      	ldr	r0, [pc, #432]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 8009008:	f7fa f87d 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <HAL_SPI_Init+0x60>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800901c:	d004      	beq.n	8009028 <HAL_SPI_Init+0x60>
 800901e:	f240 1141 	movw	r1, #321	; 0x141
 8009022:	4865      	ldr	r0, [pc, #404]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 8009024:	f7fa f86f 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00e      	beq.n	800904e <HAL_SPI_Init+0x86>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009038:	d009      	beq.n	800904e <HAL_SPI_Init+0x86>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009042:	d004      	beq.n	800904e <HAL_SPI_Init+0x86>
 8009044:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009048:	485b      	ldr	r0, [pc, #364]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 800904a:	f7fa f85c 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009056:	d008      	beq.n	800906a <HAL_SPI_Init+0xa2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <HAL_SPI_Init+0xa2>
 8009060:	f240 1143 	movw	r1, #323	; 0x143
 8009064:	4854      	ldr	r0, [pc, #336]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 8009066:	f7fa f84e 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009072:	d00d      	beq.n	8009090 <HAL_SPI_Init+0xc8>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d009      	beq.n	8009090 <HAL_SPI_Init+0xc8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009084:	d004      	beq.n	8009090 <HAL_SPI_Init+0xc8>
 8009086:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800908a:	484b      	ldr	r0, [pc, #300]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 800908c:	f7fa f83b 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <HAL_SPI_Init+0x112>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d01c      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	69db      	ldr	r3, [r3, #28]
 80090a4:	2b10      	cmp	r3, #16
 80090a6:	d018      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	2b18      	cmp	r3, #24
 80090ae:	d014      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d010      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	2b28      	cmp	r3, #40	; 0x28
 80090be:	d00c      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	2b30      	cmp	r3, #48	; 0x30
 80090c6:	d008      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	2b38      	cmp	r3, #56	; 0x38
 80090ce:	d004      	beq.n	80090da <HAL_SPI_Init+0x112>
 80090d0:	f240 1145 	movw	r1, #325	; 0x145
 80090d4:	4838      	ldr	r0, [pc, #224]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 80090d6:	f7fa f816 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d008      	beq.n	80090f4 <HAL_SPI_Init+0x12c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	2b80      	cmp	r3, #128	; 0x80
 80090e8:	d004      	beq.n	80090f4 <HAL_SPI_Init+0x12c>
 80090ea:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80090ee:	4832      	ldr	r0, [pc, #200]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 80090f0:	f7fa f809 	bl	8003106 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d008      	beq.n	800910e <HAL_SPI_Init+0x146>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	2b10      	cmp	r3, #16
 8009102:	d004      	beq.n	800910e <HAL_SPI_Init+0x146>
 8009104:	f240 1147 	movw	r1, #327	; 0x147
 8009108:	482b      	ldr	r0, [pc, #172]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 800910a:	f7f9 fffc 	bl	8003106 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d152      	bne.n	80091bc <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <HAL_SPI_Init+0x168>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b02      	cmp	r3, #2
 8009124:	d004      	beq.n	8009130 <HAL_SPI_Init+0x168>
 8009126:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800912a:	4823      	ldr	r0, [pc, #140]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 800912c:	f7f9 ffeb 	bl	8003106 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <HAL_SPI_Init+0x182>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d004      	beq.n	800914a <HAL_SPI_Init+0x182>
 8009140:	f240 114b 	movw	r1, #331	; 0x14b
 8009144:	481c      	ldr	r0, [pc, #112]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 8009146:	f7f9 ffde 	bl	8003106 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009152:	d125      	bne.n	80091a0 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d05a      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	2b08      	cmp	r3, #8
 8009162:	d056      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	2b10      	cmp	r3, #16
 800916a:	d052      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	2b18      	cmp	r3, #24
 8009172:	d04e      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	2b20      	cmp	r3, #32
 800917a:	d04a      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	2b28      	cmp	r3, #40	; 0x28
 8009182:	d046      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	2b30      	cmp	r3, #48	; 0x30
 800918a:	d042      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	2b38      	cmp	r3, #56	; 0x38
 8009192:	d03e      	beq.n	8009212 <HAL_SPI_Init+0x24a>
 8009194:	f240 114f 	movw	r1, #335	; 0x14f
 8009198:	4807      	ldr	r0, [pc, #28]	; (80091b8 <HAL_SPI_Init+0x1f0>)
 800919a:	f7f9 ffb4 	bl	8003106 <assert_failed>
 800919e:	e038      	b.n	8009212 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	61da      	str	r2, [r3, #28]
 80091a6:	e034      	b.n	8009212 <HAL_SPI_Init+0x24a>
 80091a8:	40013000 	.word	0x40013000
 80091ac:	40003800 	.word	0x40003800
 80091b0:	40003c00 	.word	0x40003c00
 80091b4:	40013400 	.word	0x40013400
 80091b8:	0800c780 	.word	0x0800c780
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d020      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d01c      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	2b10      	cmp	r3, #16
 80091d2:	d018      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	2b18      	cmp	r3, #24
 80091da:	d014      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d010      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	2b28      	cmp	r3, #40	; 0x28
 80091ea:	d00c      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	d008      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	2b38      	cmp	r3, #56	; 0x38
 80091fa:	d004      	beq.n	8009206 <HAL_SPI_Init+0x23e>
 80091fc:	f240 1159 	movw	r1, #345	; 0x159
 8009200:	484a      	ldr	r0, [pc, #296]	; (800932c <HAL_SPI_Init+0x364>)
 8009202:	f7f9 ff80 	bl	8003106 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d126      	bne.n	8009272 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a40      	ldr	r2, [pc, #256]	; (8009330 <HAL_SPI_Init+0x368>)
 8009230:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a3f      	ldr	r2, [pc, #252]	; (8009334 <HAL_SPI_Init+0x36c>)
 8009236:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a3f      	ldr	r2, [pc, #252]	; (8009338 <HAL_SPI_Init+0x370>)
 800923c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a3e      	ldr	r2, [pc, #248]	; (800933c <HAL_SPI_Init+0x374>)
 8009242:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a3e      	ldr	r2, [pc, #248]	; (8009340 <HAL_SPI_Init+0x378>)
 8009248:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a3d      	ldr	r2, [pc, #244]	; (8009344 <HAL_SPI_Init+0x37c>)
 800924e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a3d      	ldr	r2, [pc, #244]	; (8009348 <HAL_SPI_Init+0x380>)
 8009254:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a3c      	ldr	r2, [pc, #240]	; (800934c <HAL_SPI_Init+0x384>)
 800925a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a3a      	ldr	r2, [pc, #232]	; (8009350 <HAL_SPI_Init+0x388>)
 8009268:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2202      	movs	r2, #2
 8009276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	ea42 0103 	orr.w	r1, r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	0c1b      	lsrs	r3, r3, #16
 80092f0:	f003 0104 	and.w	r1, r3, #4
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	f003 0210 	and.w	r2, r3, #16
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69da      	ldr	r2, [r3, #28]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	0800c780 	.word	0x0800c780
 8009330:	080098b1 	.word	0x080098b1
 8009334:	080098c5 	.word	0x080098c5
 8009338:	080098d9 	.word	0x080098d9
 800933c:	080098ed 	.word	0x080098ed
 8009340:	08009901 	.word	0x08009901
 8009344:	08009915 	.word	0x08009915
 8009348:	08009929 	.word	0x08009929
 800934c:	0800993d 	.word	0x0800993d
 8009350:	08003189 	.word	0x08003189

08009354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08c      	sub	sp, #48	; 0x30
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009362:	2301      	movs	r3, #1
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <HAL_SPI_TransmitReceive+0x2a>
 8009374:	f240 417c 	movw	r1, #1148	; 0x47c
 8009378:	4884      	ldr	r0, [pc, #528]	; (800958c <HAL_SPI_TransmitReceive+0x238>)
 800937a:	f7f9 fec4 	bl	8003106 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_SPI_TransmitReceive+0x38>
 8009388:	2302      	movs	r3, #2
 800938a:	e18d      	b.n	80096a8 <HAL_SPI_TransmitReceive+0x354>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009394:	f7fa f9da 	bl	800374c <HAL_GetTick>
 8009398:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d00f      	beq.n	80093d6 <HAL_SPI_TransmitReceive+0x82>
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093bc:	d107      	bne.n	80093ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d103      	bne.n	80093ce <HAL_SPI_TransmitReceive+0x7a>
 80093c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d003      	beq.n	80093d6 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80093ce:	2302      	movs	r3, #2
 80093d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80093d4:	e15e      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <HAL_SPI_TransmitReceive+0x94>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_SPI_TransmitReceive+0x94>
 80093e2:	887b      	ldrh	r3, [r7, #2]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80093ee:	e151      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d003      	beq.n	8009404 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2205      	movs	r2, #5
 8009400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	887a      	ldrh	r2, [r7, #2]
 8009414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	887a      	ldrh	r2, [r7, #2]
 800941a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	887a      	ldrh	r2, [r7, #2]
 8009426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	887a      	ldrh	r2, [r7, #2]
 800942c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b40      	cmp	r3, #64	; 0x40
 8009446:	d007      	beq.n	8009458 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009460:	d178      	bne.n	8009554 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <HAL_SPI_TransmitReceive+0x11c>
 800946a:	8b7b      	ldrh	r3, [r7, #26]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d166      	bne.n	800953e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	881a      	ldrh	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009494:	e053      	b.n	800953e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d11b      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x188>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d016      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x188>
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d113      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	881a      	ldrh	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c4:	1c9a      	adds	r2, r3, #2
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d119      	bne.n	800951e <HAL_SPI_TransmitReceive+0x1ca>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d014      	beq.n	800951e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	b292      	uxth	r2, r2
 8009500:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	1c9a      	adds	r2, r3, #2
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800951a:	2301      	movs	r3, #1
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800951e:	f7fa f915 	bl	800374c <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800952a:	429a      	cmp	r2, r3
 800952c:	d807      	bhi.n	800953e <HAL_SPI_TransmitReceive+0x1ea>
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d003      	beq.n	800953e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800953c:	e0aa      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009542:	b29b      	uxth	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1a6      	bne.n	8009496 <HAL_SPI_TransmitReceive+0x142>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1a1      	bne.n	8009496 <HAL_SPI_TransmitReceive+0x142>
 8009552:	e07f      	b.n	8009654 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_SPI_TransmitReceive+0x20e>
 800955c:	8b7b      	ldrh	r3, [r7, #26]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d16e      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	330c      	adds	r3, #12
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009588:	e05a      	b.n	8009640 <HAL_SPI_TransmitReceive+0x2ec>
 800958a:	bf00      	nop
 800958c:	0800c780 	.word	0x0800c780
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b02      	cmp	r3, #2
 800959c:	d11c      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x284>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d017      	beq.n	80095d8 <HAL_SPI_TransmitReceive+0x284>
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d114      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d119      	bne.n	800961a <HAL_SPI_TransmitReceive+0x2c6>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d014      	beq.n	800961a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009616:	2301      	movs	r3, #1
 8009618:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800961a:	f7fa f897 	bl	800374c <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009626:	429a      	cmp	r2, r3
 8009628:	d803      	bhi.n	8009632 <HAL_SPI_TransmitReceive+0x2de>
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009630:	d102      	bne.n	8009638 <HAL_SPI_TransmitReceive+0x2e4>
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800963e:	e029      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1a2      	bne.n	8009590 <HAL_SPI_TransmitReceive+0x23c>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964e:	b29b      	uxth	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d19d      	bne.n	8009590 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fa17 	bl	8009a8c <SPI_EndRxTxTransaction>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d006      	beq.n	8009672 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2220      	movs	r2, #32
 800966e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009670:	e010      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	e000      	b.n	8009694 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8009692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3730      	adds	r7, #48	; 0x30
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	099b      	lsrs	r3, r3, #6
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10f      	bne.n	80096f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	099b      	lsrs	r3, r3, #6
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
    return;
 80096f2:	e0d8      	b.n	80098a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	085b      	lsrs	r3, r3, #1
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <HAL_SPI_IRQHandler+0x66>
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	09db      	lsrs	r3, r3, #7
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
    return;
 8009714:	e0c7      	b.n	80098a6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	095b      	lsrs	r3, r3, #5
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10c      	bne.n	800973c <HAL_SPI_IRQHandler+0x8c>
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	099b      	lsrs	r3, r3, #6
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80b5 	beq.w	80098a6 <HAL_SPI_IRQHandler+0x1f6>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 80ae 	beq.w	80098a6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	099b      	lsrs	r3, r3, #6
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d023      	beq.n	800979e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d011      	beq.n	8009786 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f043 0204 	orr.w	r2, r3, #4
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	617b      	str	r3, [r7, #20]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	e00b      	b.n	800979e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009786:	2300      	movs	r3, #0
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
        return;
 800979c:	e083      	b.n	80098a6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d014      	beq.n	80097d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ae:	f043 0201 	orr.w	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	f043 0208 	orr.w	r2, r3, #8
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	60bb      	str	r3, [r7, #8]
 80097f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d050      	beq.n	80098a4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009810:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <HAL_SPI_IRQHandler+0x17e>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d034      	beq.n	8009898 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0203 	bic.w	r2, r2, #3
 800983c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d011      	beq.n	800986a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984a:	4a18      	ldr	r2, [pc, #96]	; (80098ac <HAL_SPI_IRQHandler+0x1fc>)
 800984c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	4618      	mov	r0, r3
 8009854:	f7fb ff3e 	bl	80056d4 <HAL_DMA_Abort_IT>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009876:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <HAL_SPI_IRQHandler+0x1fc>)
 8009878:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987e:	4618      	mov	r0, r3
 8009880:	f7fb ff28 	bl	80056d4 <HAL_DMA_Abort_IT>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009896:	e004      	b.n	80098a2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80098a0:	e000      	b.n	80098a4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80098a2:	bf00      	nop
    return;
 80098a4:	bf00      	nop
  }
}
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	08009951 	.word	0x08009951

080098b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800998c:	f7f9 fede 	bl	800374c <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4413      	add	r3, r2
 800999a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800999c:	f7f9 fed6 	bl	800374c <HAL_GetTick>
 80099a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099a2:	4b39      	ldr	r3, [pc, #228]	; (8009a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	015b      	lsls	r3, r3, #5
 80099a8:	0d1b      	lsrs	r3, r3, #20
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	fb02 f303 	mul.w	r3, r2, r3
 80099b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099b2:	e054      	b.n	8009a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d050      	beq.n	8009a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099bc:	f7f9 fec6 	bl	800374c <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d902      	bls.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d13d      	bne.n	8009a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ea:	d111      	bne.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099f4:	d004      	beq.n	8009a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099fe:	d107      	bne.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a18:	d10f      	bne.n	8009a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e017      	b.n	8009a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4013      	ands	r3, r2
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	bf0c      	ite	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	2300      	movne	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d19b      	bne.n	80099b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3720      	adds	r7, #32
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000040 	.word	0x20000040

08009a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af02      	add	r7, sp, #8
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <SPI_EndRxTxTransaction+0x7c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <SPI_EndRxTxTransaction+0x80>)
 8009a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa2:	0d5b      	lsrs	r3, r3, #21
 8009aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009aa8:	fb02 f303 	mul.w	r3, r2, r3
 8009aac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ab6:	d112      	bne.n	8009ade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2180      	movs	r1, #128	; 0x80
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7ff ff5a 	bl	800997c <SPI_WaitFlagStateUntilTimeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d016      	beq.n	8009afc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad2:	f043 0220 	orr.w	r2, r3, #32
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e00f      	b.n	8009afe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af4:	2b80      	cmp	r3, #128	; 0x80
 8009af6:	d0f2      	beq.n	8009ade <SPI_EndRxTxTransaction+0x52>
 8009af8:	e000      	b.n	8009afc <SPI_EndRxTxTransaction+0x70>
        break;
 8009afa:	bf00      	nop
  }

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000040 	.word	0x20000040
 8009b0c:	165e9f81 	.word	0x165e9f81

08009b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e0c5      	b.n	8009cae <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a64      	ldr	r2, [pc, #400]	; (8009cb8 <HAL_TIM_Base_Init+0x1a8>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d045      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b34:	d040      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a60      	ldr	r2, [pc, #384]	; (8009cbc <HAL_TIM_Base_Init+0x1ac>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d03b      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a5e      	ldr	r2, [pc, #376]	; (8009cc0 <HAL_TIM_Base_Init+0x1b0>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d036      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a5d      	ldr	r2, [pc, #372]	; (8009cc4 <HAL_TIM_Base_Init+0x1b4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d031      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a5b      	ldr	r2, [pc, #364]	; (8009cc8 <HAL_TIM_Base_Init+0x1b8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d02c      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a5a      	ldr	r2, [pc, #360]	; (8009ccc <HAL_TIM_Base_Init+0x1bc>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d027      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a58      	ldr	r2, [pc, #352]	; (8009cd0 <HAL_TIM_Base_Init+0x1c0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d022      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a57      	ldr	r2, [pc, #348]	; (8009cd4 <HAL_TIM_Base_Init+0x1c4>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d01d      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a55      	ldr	r2, [pc, #340]	; (8009cd8 <HAL_TIM_Base_Init+0x1c8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d018      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a54      	ldr	r2, [pc, #336]	; (8009cdc <HAL_TIM_Base_Init+0x1cc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d013      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a52      	ldr	r2, [pc, #328]	; (8009ce0 <HAL_TIM_Base_Init+0x1d0>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00e      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a51      	ldr	r2, [pc, #324]	; (8009ce4 <HAL_TIM_Base_Init+0x1d4>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d009      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a4f      	ldr	r2, [pc, #316]	; (8009ce8 <HAL_TIM_Base_Init+0x1d8>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d004      	beq.n	8009bb8 <HAL_TIM_Base_Init+0xa8>
 8009bae:	f240 1113 	movw	r1, #275	; 0x113
 8009bb2:	484e      	ldr	r0, [pc, #312]	; (8009cec <HAL_TIM_Base_Init+0x1dc>)
 8009bb4:	f7f9 faa7 	bl	8003106 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d014      	beq.n	8009bea <HAL_TIM_Base_Init+0xda>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d010      	beq.n	8009bea <HAL_TIM_Base_Init+0xda>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d00c      	beq.n	8009bea <HAL_TIM_Base_Init+0xda>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	d008      	beq.n	8009bea <HAL_TIM_Base_Init+0xda>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	2b60      	cmp	r3, #96	; 0x60
 8009bde:	d004      	beq.n	8009bea <HAL_TIM_Base_Init+0xda>
 8009be0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009be4:	4841      	ldr	r0, [pc, #260]	; (8009cec <HAL_TIM_Base_Init+0x1dc>)
 8009be6:	f7f9 fa8e 	bl	8003106 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <HAL_TIM_Base_Init+0x100>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfa:	d009      	beq.n	8009c10 <HAL_TIM_Base_Init+0x100>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c04:	d004      	beq.n	8009c10 <HAL_TIM_Base_Init+0x100>
 8009c06:	f240 1115 	movw	r1, #277	; 0x115
 8009c0a:	4838      	ldr	r0, [pc, #224]	; (8009cec <HAL_TIM_Base_Init+0x1dc>)
 8009c0c:	f7f9 fa7b 	bl	8003106 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d008      	beq.n	8009c2a <HAL_TIM_Base_Init+0x11a>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b80      	cmp	r3, #128	; 0x80
 8009c1e:	d004      	beq.n	8009c2a <HAL_TIM_Base_Init+0x11a>
 8009c20:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009c24:	4831      	ldr	r0, [pc, #196]	; (8009cec <HAL_TIM_Base_Init+0x1dc>)
 8009c26:	f7f9 fa6e 	bl	8003106 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f856 	bl	8009cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f000 fa4a 	bl	800a0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40000800 	.word	0x40000800
 8009cc4:	40000c00 	.word	0x40000c00
 8009cc8:	40001000 	.word	0x40001000
 8009ccc:	40001400 	.word	0x40001400
 8009cd0:	40010400 	.word	0x40010400
 8009cd4:	40014000 	.word	0x40014000
 8009cd8:	40014400 	.word	0x40014400
 8009cdc:	40014800 	.word	0x40014800
 8009ce0:	40001800 	.word	0x40001800
 8009ce4:	40001c00 	.word	0x40001c00
 8009ce8:	40002000 	.word	0x40002000
 8009cec:	0800c7b8 	.word	0x0800c7b8

08009cf0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a51      	ldr	r2, [pc, #324]	; (8009e58 <HAL_TIM_Base_Start_IT+0x154>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d045      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1e:	d040      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a4d      	ldr	r2, [pc, #308]	; (8009e5c <HAL_TIM_Base_Start_IT+0x158>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d03b      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a4c      	ldr	r2, [pc, #304]	; (8009e60 <HAL_TIM_Base_Start_IT+0x15c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d036      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a4a      	ldr	r2, [pc, #296]	; (8009e64 <HAL_TIM_Base_Start_IT+0x160>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d031      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a49      	ldr	r2, [pc, #292]	; (8009e68 <HAL_TIM_Base_Start_IT+0x164>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d02c      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a47      	ldr	r2, [pc, #284]	; (8009e6c <HAL_TIM_Base_Start_IT+0x168>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d027      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a46      	ldr	r2, [pc, #280]	; (8009e70 <HAL_TIM_Base_Start_IT+0x16c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a44      	ldr	r2, [pc, #272]	; (8009e74 <HAL_TIM_Base_Start_IT+0x170>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01d      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a43      	ldr	r2, [pc, #268]	; (8009e78 <HAL_TIM_Base_Start_IT+0x174>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a41      	ldr	r2, [pc, #260]	; (8009e7c <HAL_TIM_Base_Start_IT+0x178>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a40      	ldr	r2, [pc, #256]	; (8009e80 <HAL_TIM_Base_Start_IT+0x17c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a3e      	ldr	r2, [pc, #248]	; (8009e84 <HAL_TIM_Base_Start_IT+0x180>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a3d      	ldr	r2, [pc, #244]	; (8009e88 <HAL_TIM_Base_Start_IT+0x184>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_TIM_Base_Start_IT+0x9e>
 8009d98:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009d9c:	483b      	ldr	r0, [pc, #236]	; (8009e8c <HAL_TIM_Base_Start_IT+0x188>)
 8009d9e:	f7f9 f9b2 	bl	8003106 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e04e      	b.n	8009e50 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2202      	movs	r2, #2
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0201 	orr.w	r2, r2, #1
 8009dc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <HAL_TIM_Base_Start_IT+0x154>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d022      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ddc:	d01d      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1e      	ldr	r2, [pc, #120]	; (8009e5c <HAL_TIM_Base_Start_IT+0x158>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d018      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1c      	ldr	r2, [pc, #112]	; (8009e60 <HAL_TIM_Base_Start_IT+0x15c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d013      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1b      	ldr	r2, [pc, #108]	; (8009e64 <HAL_TIM_Base_Start_IT+0x160>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <HAL_TIM_Base_Start_IT+0x16c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <HAL_TIM_Base_Start_IT+0x170>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIM_Base_Start_IT+0x116>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1a      	ldr	r2, [pc, #104]	; (8009e80 <HAL_TIM_Base_Start_IT+0x17c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d111      	bne.n	8009e3e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d010      	beq.n	8009e4e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	e007      	b.n	8009e4e <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800
 8009e64:	40000c00 	.word	0x40000c00
 8009e68:	40001000 	.word	0x40001000
 8009e6c:	40001400 	.word	0x40001400
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800
 8009e80:	40001800 	.word	0x40001800
 8009e84:	40001c00 	.word	0x40001c00
 8009e88:	40002000 	.word	0x40002000
 8009e8c:	0800c7b8 	.word	0x0800c7b8

08009e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d122      	bne.n	8009eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d11b      	bne.n	8009eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f06f 0202 	mvn.w	r2, #2
 8009ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f8ee 	bl	800a0b4 <HAL_TIM_IC_CaptureCallback>
 8009ed8:	e005      	b.n	8009ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f8e0 	bl	800a0a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f8f1 	bl	800a0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d122      	bne.n	8009f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d11b      	bne.n	8009f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f06f 0204 	mvn.w	r2, #4
 8009f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f8c4 	bl	800a0b4 <HAL_TIM_IC_CaptureCallback>
 8009f2c:	e005      	b.n	8009f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f8b6 	bl	800a0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f8c7 	bl	800a0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0308 	and.w	r3, r3, #8
 8009f4a:	2b08      	cmp	r3, #8
 8009f4c:	d122      	bne.n	8009f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f003 0308 	and.w	r3, r3, #8
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d11b      	bne.n	8009f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f06f 0208 	mvn.w	r2, #8
 8009f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2204      	movs	r2, #4
 8009f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	f003 0303 	and.w	r3, r3, #3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f89a 	bl	800a0b4 <HAL_TIM_IC_CaptureCallback>
 8009f80:	e005      	b.n	8009f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f88c 	bl	800a0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f89d 	bl	800a0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d122      	bne.n	8009fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b10      	cmp	r3, #16
 8009fae:	d11b      	bne.n	8009fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0210 	mvn.w	r2, #16
 8009fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f870 	bl	800a0b4 <HAL_TIM_IC_CaptureCallback>
 8009fd4:	e005      	b.n	8009fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f862 	bl	800a0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f873 	bl	800a0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d10e      	bne.n	800a014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b01      	cmp	r3, #1
 800a002:	d107      	bne.n	800a014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f06f 0201 	mvn.w	r2, #1
 800a00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7f9 f862 	bl	80030d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01e:	2b80      	cmp	r3, #128	; 0x80
 800a020:	d10e      	bne.n	800a040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02c:	2b80      	cmp	r3, #128	; 0x80
 800a02e:	d107      	bne.n	800a040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f902 	bl	800a244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04a:	2b40      	cmp	r3, #64	; 0x40
 800a04c:	d10e      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d107      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f838 	bl	800a0dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b20      	cmp	r3, #32
 800a078:	d10e      	bne.n	800a098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b20      	cmp	r3, #32
 800a086:	d107      	bne.n	800a098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f06f 0220 	mvn.w	r2, #32
 800a090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f8cc 	bl	800a230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a40      	ldr	r2, [pc, #256]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d013      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a10e:	d00f      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a3d      	ldr	r2, [pc, #244]	; (800a208 <TIM_Base_SetConfig+0x118>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00b      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a3c      	ldr	r2, [pc, #240]	; (800a20c <TIM_Base_SetConfig+0x11c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d007      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a3b      	ldr	r2, [pc, #236]	; (800a210 <TIM_Base_SetConfig+0x120>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d003      	beq.n	800a130 <TIM_Base_SetConfig+0x40>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a3a      	ldr	r2, [pc, #232]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d108      	bne.n	800a142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a2f      	ldr	r2, [pc, #188]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d02b      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a150:	d027      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a2c      	ldr	r2, [pc, #176]	; (800a208 <TIM_Base_SetConfig+0x118>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d023      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a2b      	ldr	r2, [pc, #172]	; (800a20c <TIM_Base_SetConfig+0x11c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d01f      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a2a      	ldr	r2, [pc, #168]	; (800a210 <TIM_Base_SetConfig+0x120>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d01b      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a29      	ldr	r2, [pc, #164]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d017      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a28      	ldr	r2, [pc, #160]	; (800a218 <TIM_Base_SetConfig+0x128>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d013      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a27      	ldr	r2, [pc, #156]	; (800a21c <TIM_Base_SetConfig+0x12c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d00f      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a26      	ldr	r2, [pc, #152]	; (800a220 <TIM_Base_SetConfig+0x130>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d00b      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a25      	ldr	r2, [pc, #148]	; (800a224 <TIM_Base_SetConfig+0x134>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d007      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a24      	ldr	r2, [pc, #144]	; (800a228 <TIM_Base_SetConfig+0x138>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d003      	beq.n	800a1a2 <TIM_Base_SetConfig+0xb2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a23      	ldr	r2, [pc, #140]	; (800a22c <TIM_Base_SetConfig+0x13c>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d108      	bne.n	800a1b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <TIM_Base_SetConfig+0x114>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_Base_SetConfig+0xf8>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <TIM_Base_SetConfig+0x124>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d103      	bne.n	800a1f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	615a      	str	r2, [r3, #20]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	40010000 	.word	0x40010000
 800a208:	40000400 	.word	0x40000400
 800a20c:	40000800 	.word	0x40000800
 800a210:	40000c00 	.word	0x40000c00
 800a214:	40010400 	.word	0x40010400
 800a218:	40014000 	.word	0x40014000
 800a21c:	40014400 	.word	0x40014400
 800a220:	40014800 	.word	0x40014800
 800a224:	40001800 	.word	0x40001800
 800a228:	40001c00 	.word	0x40001c00
 800a22c:	40002000 	.word	0x40002000

0800a230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26e:	d10e      	bne.n	800a28e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d107      	bne.n	800a28e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f06f 0201 	mvn.w	r2, #1
 800a286:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f804 	bl	800a296 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a2b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2bc:	2b84      	cmp	r3, #132	; 0x84
 800a2be:	d005      	beq.n	800a2cc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a2c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3303      	adds	r3, #3
 800a2ca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a2de:	f000 fef9 	bl	800b0d4 <vTaskStartScheduler>
  
  return osOK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ea:	b089      	sub	sp, #36	; 0x24
 800a2ec:	af04      	add	r7, sp, #16
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d020      	beq.n	800a33c <osThreadCreate+0x54>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d01c      	beq.n	800a33c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685c      	ldr	r4, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681d      	ldr	r5, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691e      	ldr	r6, [r3, #16]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff ffc8 	bl	800a2aa <makeFreeRtosPriority>
 800a31a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a324:	9202      	str	r2, [sp, #8]
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	9100      	str	r1, [sp, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	4632      	mov	r2, r6
 800a32e:	4629      	mov	r1, r5
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fca7 	bl	800ac84 <xTaskCreateStatic>
 800a336:	4603      	mov	r3, r0
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e01c      	b.n	800a376 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685c      	ldr	r4, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a348:	b29e      	uxth	r6, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff ffaa 	bl	800a2aa <makeFreeRtosPriority>
 800a356:	4602      	mov	r2, r0
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	9200      	str	r2, [sp, #0]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	4632      	mov	r2, r6
 800a364:	4629      	mov	r1, r5
 800a366:	4620      	mov	r0, r4
 800a368:	f000 fce9 	bl	800ad3e <xTaskCreate>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d001      	beq.n	800a376 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	e000      	b.n	800a378 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a376:	68fb      	ldr	r3, [r7, #12]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f103 0208 	add.w	r2, r3, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f04f 32ff 	mov.w	r2, #4294967295
 800a398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f103 0208 	add.w	r2, r3, #8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f103 0208 	add.w	r2, r3, #8
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
}
 800a416:	bf00      	nop
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a422:	b480      	push	{r7}
 800a424:	b085      	sub	sp, #20
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d103      	bne.n	800a442 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e00c      	b.n	800a45c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3308      	adds	r3, #8
 800a446:	60fb      	str	r3, [r7, #12]
 800a448:	e002      	b.n	800a450 <vListInsert+0x2e>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d2f6      	bcs.n	800a44a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]
}
 800a488:	bf00      	nop
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6892      	ldr	r2, [r2, #8]
 800a4aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6852      	ldr	r2, [r2, #4]
 800a4b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d103      	bne.n	800a4c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	1e5a      	subs	r2, r3, #1
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <xQueueGenericReset+0x2a>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	60bb      	str	r3, [r7, #8]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a512:	f001 fc37 	bl	800bd84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a522:	fb01 f303 	mul.w	r3, r1, r3
 800a526:	441a      	add	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a542:	3b01      	subs	r3, #1
 800a544:	68f9      	ldr	r1, [r7, #12]
 800a546:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	441a      	add	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	22ff      	movs	r2, #255	; 0xff
 800a556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	22ff      	movs	r2, #255	; 0xff
 800a55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d114      	bne.n	800a592 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d01a      	beq.n	800a5a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3310      	adds	r3, #16
 800a574:	4618      	mov	r0, r3
 800a576:	f001 f80f 	bl	800b598 <xTaskRemoveFromEventList>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d012      	beq.n	800a5a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a580:	4b0c      	ldr	r3, [pc, #48]	; (800a5b4 <xQueueGenericReset+0xcc>)
 800a582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	e009      	b.n	800a5a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3310      	adds	r3, #16
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fef2 	bl	800a380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3324      	adds	r3, #36	; 0x24
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff feed 	bl	800a380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5a6:	f001 fc1d 	bl	800bde4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5aa:	2301      	movs	r3, #1
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10a      	bne.n	800a5e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	613b      	str	r3, [r7, #16]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	3348      	adds	r3, #72	; 0x48
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fca9 	bl	800bf48 <pvPortMalloc>
 800a5f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d011      	beq.n	800a622 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3348      	adds	r3, #72	; 0x48
 800a606:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a610:	79fa      	ldrb	r2, [r7, #7]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4613      	mov	r3, r2
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f805 	bl	800a62c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a622:	69bb      	ldr	r3, [r7, #24]
	}
 800a624:	4618      	mov	r0, r3
 800a626:	3720      	adds	r7, #32
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e002      	b.n	800a64e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a65a:	2101      	movs	r1, #1
 800a65c:	69b8      	ldr	r0, [r7, #24]
 800a65e:	f7ff ff43 	bl	800a4e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08e      	sub	sp, #56	; 0x38
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
 800a678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a67a:	2300      	movs	r3, #0
 800a67c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueGenericSend+0x32>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <xQueueGenericSend+0x40>
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <xQueueGenericSend+0x44>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <xQueueGenericSend+0x46>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10a      	bne.n	800a6cc <xQueueGenericSend+0x60>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d103      	bne.n	800a6da <xQueueGenericSend+0x6e>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <xQueueGenericSend+0x72>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <xQueueGenericSend+0x74>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <xQueueGenericSend+0x8e>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	623b      	str	r3, [r7, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6fa:	f001 f90d 	bl	800b918 <xTaskGetSchedulerState>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <xQueueGenericSend+0x9e>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <xQueueGenericSend+0xa2>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <xQueueGenericSend+0xa4>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueGenericSend+0xbe>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	61fb      	str	r3, [r7, #28]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a72a:	f001 fb2b 	bl	800bd84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a736:	429a      	cmp	r2, r3
 800a738:	d302      	bcc.n	800a740 <xQueueGenericSend+0xd4>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d129      	bne.n	800a794 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a746:	f000 f98d 	bl	800aa64 <prvCopyDataToQueue>
 800a74a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b00      	cmp	r3, #0
 800a752:	d010      	beq.n	800a776 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	3324      	adds	r3, #36	; 0x24
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 ff1d 	bl	800b598 <xTaskRemoveFromEventList>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d013      	beq.n	800a78c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a764:	4b3f      	ldr	r3, [pc, #252]	; (800a864 <xQueueGenericSend+0x1f8>)
 800a766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	e00a      	b.n	800a78c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a77c:	4b39      	ldr	r3, [pc, #228]	; (800a864 <xQueueGenericSend+0x1f8>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a78c:	f001 fb2a 	bl	800bde4 <vPortExitCritical>
				return pdPASS;
 800a790:	2301      	movs	r3, #1
 800a792:	e063      	b.n	800a85c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a79a:	f001 fb23 	bl	800bde4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e05c      	b.n	800a85c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d106      	bne.n	800a7b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7a8:	f107 0314 	add.w	r3, r7, #20
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 ff55 	bl	800b65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7b6:	f001 fb15 	bl	800bde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ba:	f000 fcf5 	bl	800b1a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7be:	f001 fae1 	bl	800bd84 <vPortEnterCritical>
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7c8:	b25b      	sxtb	r3, r3
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d103      	bne.n	800a7d8 <xQueueGenericSend+0x16c>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7de:	b25b      	sxtb	r3, r3
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d103      	bne.n	800a7ee <xQueueGenericSend+0x182>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7ee:	f001 faf9 	bl	800bde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7f2:	1d3a      	adds	r2, r7, #4
 800a7f4:	f107 0314 	add.w	r3, r7, #20
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 ff44 	bl	800b688 <xTaskCheckForTimeOut>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d124      	bne.n	800a850 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a808:	f000 fa24 	bl	800ac54 <prvIsQueueFull>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d018      	beq.n	800a844 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	3310      	adds	r3, #16
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fe98 	bl	800b550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a822:	f000 f9af 	bl	800ab84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a826:	f000 fccd 	bl	800b1c4 <xTaskResumeAll>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f47f af7c 	bne.w	800a72a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a832:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <xQueueGenericSend+0x1f8>)
 800a834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	e772      	b.n	800a72a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a846:	f000 f99d 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a84a:	f000 fcbb 	bl	800b1c4 <xTaskResumeAll>
 800a84e:	e76c      	b.n	800a72a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a852:	f000 f997 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a856:	f000 fcb5 	bl	800b1c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a85a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3738      	adds	r7, #56	; 0x38
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08c      	sub	sp, #48	; 0x30
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a874:	2300      	movs	r3, #0
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10a      	bne.n	800a898 <xQueueReceive+0x30>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	623b      	str	r3, [r7, #32]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d103      	bne.n	800a8a6 <xQueueReceive+0x3e>
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <xQueueReceive+0x42>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <xQueueReceive+0x44>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xQueueReceive+0x5e>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	61fb      	str	r3, [r7, #28]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8c6:	f001 f827 	bl	800b918 <xTaskGetSchedulerState>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <xQueueReceive+0x6e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <xQueueReceive+0x72>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <xQueueReceive+0x74>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <xQueueReceive+0x8e>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61bb      	str	r3, [r7, #24]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8f6:	f001 fa45 	bl	800bd84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01f      	beq.n	800a946 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a90a:	f000 f915 	bl	800ab38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	1e5a      	subs	r2, r3, #1
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00f      	beq.n	800a93e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	3310      	adds	r3, #16
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fe38 	bl	800b598 <xTaskRemoveFromEventList>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a92e:	4b3d      	ldr	r3, [pc, #244]	; (800aa24 <xQueueReceive+0x1bc>)
 800a930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a93e:	f001 fa51 	bl	800bde4 <vPortExitCritical>
				return pdPASS;
 800a942:	2301      	movs	r3, #1
 800a944:	e069      	b.n	800aa1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a94c:	f001 fa4a 	bl	800bde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a950:	2300      	movs	r3, #0
 800a952:	e062      	b.n	800aa1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a95a:	f107 0310 	add.w	r3, r7, #16
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 fe7c 	bl	800b65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a968:	f001 fa3c 	bl	800bde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a96c:	f000 fc1c 	bl	800b1a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a970:	f001 fa08 	bl	800bd84 <vPortEnterCritical>
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d103      	bne.n	800a98a <xQueueReceive+0x122>
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a990:	b25b      	sxtb	r3, r3
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d103      	bne.n	800a9a0 <xQueueReceive+0x138>
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9a0:	f001 fa20 	bl	800bde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a4:	1d3a      	adds	r2, r7, #4
 800a9a6:	f107 0310 	add.w	r3, r7, #16
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fe6b 	bl	800b688 <xTaskCheckForTimeOut>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d123      	bne.n	800aa00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ba:	f000 f935 	bl	800ac28 <prvIsQueueEmpty>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d017      	beq.n	800a9f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	3324      	adds	r3, #36	; 0x24
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fdbf 	bl	800b550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d4:	f000 f8d6 	bl	800ab84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9d8:	f000 fbf4 	bl	800b1c4 <xTaskResumeAll>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d189      	bne.n	800a8f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a9e2:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <xQueueReceive+0x1bc>)
 800a9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	e780      	b.n	800a8f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f6:	f000 f8c5 	bl	800ab84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9fa:	f000 fbe3 	bl	800b1c4 <xTaskResumeAll>
 800a9fe:	e77a      	b.n	800a8f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa02:	f000 f8bf 	bl	800ab84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa06:	f000 fbdd 	bl	800b1c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0c:	f000 f90c 	bl	800ac28 <prvIsQueueEmpty>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f43f af6f 	beq.w	800a8f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3730      	adds	r7, #48	; 0x30
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	60bb      	str	r3, [r7, #8]
}
 800aa48:	bf00      	nop
 800aa4a:	e7fe      	b.n	800aa4a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800aa4c:	f001 f99a 	bl	800bd84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800aa56:	f001 f9c5 	bl	800bde4 <vPortExitCritical>

	return uxReturn;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10d      	bne.n	800aa9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14d      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 ff60 	bl	800b954 <xTaskPriorityDisinherit>
 800aa94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	609a      	str	r2, [r3, #8]
 800aa9c:	e043      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d119      	bne.n	800aad8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6858      	ldr	r0, [r3, #4]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaac:	461a      	mov	r2, r3
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	f001 fc58 	bl	800c364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabc:	441a      	add	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d32b      	bcc.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
 800aad6:	e026      	b.n	800ab26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68d8      	ldr	r0, [r3, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae0:	461a      	mov	r2, r3
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	f001 fc3e 	bl	800c364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	441a      	add	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d207      	bcs.n	800ab14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	441a      	add	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d105      	bne.n	800ab26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	1c5a      	adds	r2, r3, #1
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab2e:	697b      	ldr	r3, [r7, #20]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d018      	beq.n	800ab7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	441a      	add	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d303      	bcc.n	800ab6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68d9      	ldr	r1, [r3, #12]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	6838      	ldr	r0, [r7, #0]
 800ab78:	f001 fbf4 	bl	800c364 <memcpy>
	}
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab8c:	f001 f8fa 	bl	800bd84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab98:	e011      	b.n	800abbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d012      	beq.n	800abc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	3324      	adds	r3, #36	; 0x24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fcf6 	bl	800b598 <xTaskRemoveFromEventList>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d001      	beq.n	800abb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abb2:	f000 fdcb 	bl	800b74c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	3b01      	subs	r3, #1
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dce9      	bgt.n	800ab9a <prvUnlockQueue+0x16>
 800abc6:	e000      	b.n	800abca <prvUnlockQueue+0x46>
					break;
 800abc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abd2:	f001 f907 	bl	800bde4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abd6:	f001 f8d5 	bl	800bd84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe2:	e011      	b.n	800ac08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d012      	beq.n	800ac12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3310      	adds	r3, #16
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fcd1 	bl	800b598 <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abfc:	f000 fda6 	bl	800b74c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dce9      	bgt.n	800abe4 <prvUnlockQueue+0x60>
 800ac10:	e000      	b.n	800ac14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 f8e2 	bl	800bde4 <vPortExitCritical>
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac30:	f001 f8a8 	bl	800bd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e001      	b.n	800ac46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac46:	f001 f8cd 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac5c:	f001 f892 	bl	800bd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d102      	bne.n	800ac72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e001      	b.n	800ac76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac76:	f001 f8b5 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08e      	sub	sp, #56	; 0x38
 800ac88:	af04      	add	r7, sp, #16
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	623b      	str	r3, [r7, #32]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xTaskCreateStatic+0x46>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	61fb      	str	r3, [r7, #28]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acca:	23b4      	movs	r3, #180	; 0xb4
 800accc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2bb4      	cmp	r3, #180	; 0xb4
 800acd2:	d00a      	beq.n	800acea <xTaskCreateStatic+0x66>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	61bb      	str	r3, [r7, #24]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01e      	beq.n	800ad30 <xTaskCreateStatic+0xac>
 800acf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01b      	beq.n	800ad30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	2202      	movs	r2, #2
 800ad06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9303      	str	r3, [sp, #12]
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	9302      	str	r3, [sp, #8]
 800ad12:	f107 0314 	add.w	r3, r7, #20
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f850 	bl	800adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad2a:	f000 f8eb 	bl	800af04 <prvAddNewTaskToReadyList>
 800ad2e:	e001      	b.n	800ad34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad34:	697b      	ldr	r3, [r7, #20]
	}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3728      	adds	r7, #40	; 0x28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b08c      	sub	sp, #48	; 0x30
 800ad42:	af04      	add	r7, sp, #16
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	603b      	str	r3, [r7, #0]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 f8f8 	bl	800bf48 <pvPortMalloc>
 800ad58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00e      	beq.n	800ad7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad60:	20b4      	movs	r0, #180	; 0xb4
 800ad62:	f001 f8f1 	bl	800bf48 <pvPortMalloc>
 800ad66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	631a      	str	r2, [r3, #48]	; 0x30
 800ad74:	e005      	b.n	800ad82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f001 f9b2 	bl	800c0e0 <vPortFree>
 800ad7c:	e001      	b.n	800ad82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d017      	beq.n	800adb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad90:	88fa      	ldrh	r2, [r7, #6]
 800ad92:	2300      	movs	r3, #0
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	9302      	str	r3, [sp, #8]
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f80e 	bl	800adc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adac:	69f8      	ldr	r0, [r7, #28]
 800adae:	f000 f8a9 	bl	800af04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adb2:	2301      	movs	r3, #1
 800adb4:	61bb      	str	r3, [r7, #24]
 800adb6:	e002      	b.n	800adbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adb8:	f04f 33ff 	mov.w	r3, #4294967295
 800adbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adbe:	69bb      	ldr	r3, [r7, #24]
	}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ade0:	3b01      	subs	r3, #1
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f023 0307 	bic.w	r3, r3, #7
 800adee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	f003 0307 	and.w	r3, r3, #7
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <prvInitialiseNewTask+0x48>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	617b      	str	r3, [r7, #20]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01f      	beq.n	800ae56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae16:	2300      	movs	r3, #0
 800ae18:	61fb      	str	r3, [r7, #28]
 800ae1a:	e012      	b.n	800ae42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	4413      	add	r3, r2
 800ae22:	7819      	ldrb	r1, [r3, #0]
 800ae24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3334      	adds	r3, #52	; 0x34
 800ae2c:	460a      	mov	r2, r1
 800ae2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b0f      	cmp	r3, #15
 800ae46:	d9e9      	bls.n	800ae1c <prvInitialiseNewTask+0x54>
 800ae48:	e000      	b.n	800ae4c <prvInitialiseNewTask+0x84>
			{
				break;
 800ae4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae54:	e003      	b.n	800ae5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	2b06      	cmp	r3, #6
 800ae62:	d901      	bls.n	800ae68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae64:	2306      	movs	r3, #6
 800ae66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	2200      	movs	r2, #0
 800ae78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff fa9e 	bl	800a3c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	3318      	adds	r3, #24
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff fa99 	bl	800a3c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	f1c3 0207 	rsb	r2, r3, #7
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	2200      	movs	r2, #0
 800aea8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	334c      	adds	r3, #76	; 0x4c
 800aeb8:	2260      	movs	r2, #96	; 0x60
 800aeba:	2100      	movs	r1, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fa5f 	bl	800c380 <memset>
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	4a0c      	ldr	r2, [pc, #48]	; (800aef8 <prvInitialiseNewTask+0x130>)
 800aec6:	651a      	str	r2, [r3, #80]	; 0x50
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	4a0c      	ldr	r2, [pc, #48]	; (800aefc <prvInitialiseNewTask+0x134>)
 800aecc:	655a      	str	r2, [r3, #84]	; 0x54
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	4a0b      	ldr	r2, [pc, #44]	; (800af00 <prvInitialiseNewTask+0x138>)
 800aed2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	68f9      	ldr	r1, [r7, #12]
 800aed8:	69b8      	ldr	r0, [r7, #24]
 800aeda:	f000 fe27 	bl	800bb2c <pxPortInitialiseStack>
 800aede:	4602      	mov	r2, r0
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef0:	bf00      	nop
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	0800c838 	.word	0x0800c838
 800aefc:	0800c858 	.word	0x0800c858
 800af00:	0800c818 	.word	0x0800c818

0800af04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af0c:	f000 ff3a 	bl	800bd84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af10:	4b2a      	ldr	r3, [pc, #168]	; (800afbc <prvAddNewTaskToReadyList+0xb8>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	4a29      	ldr	r2, [pc, #164]	; (800afbc <prvAddNewTaskToReadyList+0xb8>)
 800af18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af1a:	4b29      	ldr	r3, [pc, #164]	; (800afc0 <prvAddNewTaskToReadyList+0xbc>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d109      	bne.n	800af36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af22:	4a27      	ldr	r2, [pc, #156]	; (800afc0 <prvAddNewTaskToReadyList+0xbc>)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af28:	4b24      	ldr	r3, [pc, #144]	; (800afbc <prvAddNewTaskToReadyList+0xb8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d110      	bne.n	800af52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af30:	f000 fc30 	bl	800b794 <prvInitialiseTaskLists>
 800af34:	e00d      	b.n	800af52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af36:	4b23      	ldr	r3, [pc, #140]	; (800afc4 <prvAddNewTaskToReadyList+0xc0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d109      	bne.n	800af52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af3e:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <prvAddNewTaskToReadyList+0xbc>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	429a      	cmp	r2, r3
 800af4a:	d802      	bhi.n	800af52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af4c:	4a1c      	ldr	r2, [pc, #112]	; (800afc0 <prvAddNewTaskToReadyList+0xbc>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af52:	4b1d      	ldr	r3, [pc, #116]	; (800afc8 <prvAddNewTaskToReadyList+0xc4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3301      	adds	r3, #1
 800af58:	4a1b      	ldr	r2, [pc, #108]	; (800afc8 <prvAddNewTaskToReadyList+0xc4>)
 800af5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	2201      	movs	r2, #1
 800af62:	409a      	lsls	r2, r3
 800af64:	4b19      	ldr	r3, [pc, #100]	; (800afcc <prvAddNewTaskToReadyList+0xc8>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4313      	orrs	r3, r2
 800af6a:	4a18      	ldr	r2, [pc, #96]	; (800afcc <prvAddNewTaskToReadyList+0xc8>)
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af72:	4613      	mov	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4a15      	ldr	r2, [pc, #84]	; (800afd0 <prvAddNewTaskToReadyList+0xcc>)
 800af7c:	441a      	add	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3304      	adds	r3, #4
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7ff fa28 	bl	800a3da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af8a:	f000 ff2b 	bl	800bde4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af8e:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <prvAddNewTaskToReadyList+0xc0>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00e      	beq.n	800afb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af96:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <prvAddNewTaskToReadyList+0xbc>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d207      	bcs.n	800afb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afa4:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <prvAddNewTaskToReadyList+0xd0>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	200009e8 	.word	0x200009e8
 800afc0:	200008e8 	.word	0x200008e8
 800afc4:	200009f4 	.word	0x200009f4
 800afc8:	20000a04 	.word	0x20000a04
 800afcc:	200009f0 	.word	0x200009f0
 800afd0:	200008ec 	.word	0x200008ec
 800afd4:	e000ed04 	.word	0xe000ed04

0800afd8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <vTaskDelayUntil+0x2a>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	617b      	str	r3, [r7, #20]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <vTaskDelayUntil+0x46>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	613b      	str	r3, [r7, #16]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b01e:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <vTaskDelayUntil+0xf0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <vTaskDelayUntil+0x64>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	60fb      	str	r3, [r7, #12]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b03c:	f000 f8b4 	bl	800b1a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b040:	4b22      	ldr	r3, [pc, #136]	; (800b0cc <vTaskDelayUntil+0xf4>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	429a      	cmp	r2, r3
 800b058:	d20b      	bcs.n	800b072 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	429a      	cmp	r2, r3
 800b062:	d211      	bcs.n	800b088 <vTaskDelayUntil+0xb0>
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d90d      	bls.n	800b088 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b06c:	2301      	movs	r3, #1
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24
 800b070:	e00a      	b.n	800b088 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d303      	bcc.n	800b084 <vTaskDelayUntil+0xac>
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	429a      	cmp	r2, r3
 800b082:	d901      	bls.n	800b088 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b084:	2301      	movs	r3, #1
 800b086:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	2b00      	cmp	r3, #0
 800b092:	d006      	beq.n	800b0a2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b094:	69fa      	ldr	r2, [r7, #28]
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fcdf 	bl	800ba60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b0a2:	f000 f88f 	bl	800b1c4 <xTaskResumeAll>
 800b0a6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b0ae:	4b08      	ldr	r3, [pc, #32]	; (800b0d0 <vTaskDelayUntil+0xf8>)
 800b0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0be:	bf00      	nop
 800b0c0:	3728      	adds	r7, #40	; 0x28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000a10 	.word	0x20000a10
 800b0cc:	200009ec 	.word	0x200009ec
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0e2:	463a      	mov	r2, r7
 800b0e4:	1d39      	adds	r1, r7, #4
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f7 fc6c 	bl	80029c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	9202      	str	r2, [sp, #8]
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	460a      	mov	r2, r1
 800b102:	4921      	ldr	r1, [pc, #132]	; (800b188 <vTaskStartScheduler+0xb4>)
 800b104:	4821      	ldr	r0, [pc, #132]	; (800b18c <vTaskStartScheduler+0xb8>)
 800b106:	f7ff fdbd 	bl	800ac84 <xTaskCreateStatic>
 800b10a:	4603      	mov	r3, r0
 800b10c:	4a20      	ldr	r2, [pc, #128]	; (800b190 <vTaskStartScheduler+0xbc>)
 800b10e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b110:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <vTaskStartScheduler+0xbc>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b118:	2301      	movs	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e001      	b.n	800b122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b11e:	2300      	movs	r3, #0
 800b120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d11b      	bne.n	800b160 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	613b      	str	r3, [r7, #16]
}
 800b13a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b13c:	4b15      	ldr	r3, [pc, #84]	; (800b194 <vTaskStartScheduler+0xc0>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	334c      	adds	r3, #76	; 0x4c
 800b142:	4a15      	ldr	r2, [pc, #84]	; (800b198 <vTaskStartScheduler+0xc4>)
 800b144:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b146:	4b15      	ldr	r3, [pc, #84]	; (800b19c <vTaskStartScheduler+0xc8>)
 800b148:	f04f 32ff 	mov.w	r2, #4294967295
 800b14c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b14e:	4b14      	ldr	r3, [pc, #80]	; (800b1a0 <vTaskStartScheduler+0xcc>)
 800b150:	2201      	movs	r2, #1
 800b152:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b154:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <vTaskStartScheduler+0xd0>)
 800b156:	2200      	movs	r2, #0
 800b158:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b15a:	f000 fd71 	bl	800bc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b15e:	e00e      	b.n	800b17e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b166:	d10a      	bne.n	800b17e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	60fb      	str	r3, [r7, #12]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <vTaskStartScheduler+0xa8>
}
 800b17e:	bf00      	nop
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0800c7f0 	.word	0x0800c7f0
 800b18c:	0800b765 	.word	0x0800b765
 800b190:	20000a0c 	.word	0x20000a0c
 800b194:	200008e8 	.word	0x200008e8
 800b198:	20000050 	.word	0x20000050
 800b19c:	20000a08 	.word	0x20000a08
 800b1a0:	200009f4 	.word	0x200009f4
 800b1a4:	200009ec 	.word	0x200009ec

0800b1a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1ac:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <vTaskSuspendAll+0x18>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	4a03      	ldr	r2, [pc, #12]	; (800b1c0 <vTaskSuspendAll+0x18>)
 800b1b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1b6:	bf00      	nop
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20000a10 	.word	0x20000a10

0800b1c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1d2:	4b41      	ldr	r3, [pc, #260]	; (800b2d8 <xTaskResumeAll+0x114>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	603b      	str	r3, [r7, #0]
}
 800b1ec:	bf00      	nop
 800b1ee:	e7fe      	b.n	800b1ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1f0:	f000 fdc8 	bl	800bd84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1f4:	4b38      	ldr	r3, [pc, #224]	; (800b2d8 <xTaskResumeAll+0x114>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	4a37      	ldr	r2, [pc, #220]	; (800b2d8 <xTaskResumeAll+0x114>)
 800b1fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1fe:	4b36      	ldr	r3, [pc, #216]	; (800b2d8 <xTaskResumeAll+0x114>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d161      	bne.n	800b2ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b206:	4b35      	ldr	r3, [pc, #212]	; (800b2dc <xTaskResumeAll+0x118>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d05d      	beq.n	800b2ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b20e:	e02e      	b.n	800b26e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b210:	4b33      	ldr	r3, [pc, #204]	; (800b2e0 <xTaskResumeAll+0x11c>)
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3318      	adds	r3, #24
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff f939 	bl	800a494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff f934 	bl	800a494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	2201      	movs	r2, #1
 800b232:	409a      	lsls	r2, r3
 800b234:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <xTaskResumeAll+0x120>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4313      	orrs	r3, r2
 800b23a:	4a2a      	ldr	r2, [pc, #168]	; (800b2e4 <xTaskResumeAll+0x120>)
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4a27      	ldr	r2, [pc, #156]	; (800b2e8 <xTaskResumeAll+0x124>)
 800b24c:	441a      	add	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3304      	adds	r3, #4
 800b252:	4619      	mov	r1, r3
 800b254:	4610      	mov	r0, r2
 800b256:	f7ff f8c0 	bl	800a3da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25e:	4b23      	ldr	r3, [pc, #140]	; (800b2ec <xTaskResumeAll+0x128>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b268:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <xTaskResumeAll+0x12c>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b26e:	4b1c      	ldr	r3, [pc, #112]	; (800b2e0 <xTaskResumeAll+0x11c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1cc      	bne.n	800b210 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b27c:	f000 fb2c 	bl	800b8d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b280:	4b1c      	ldr	r3, [pc, #112]	; (800b2f4 <xTaskResumeAll+0x130>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d010      	beq.n	800b2ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b28c:	f000 f846 	bl	800b31c <xTaskIncrementTick>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b296:	4b16      	ldr	r3, [pc, #88]	; (800b2f0 <xTaskResumeAll+0x12c>)
 800b298:	2201      	movs	r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1f1      	bne.n	800b28c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b2a8:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <xTaskResumeAll+0x130>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2ae:	4b10      	ldr	r3, [pc, #64]	; (800b2f0 <xTaskResumeAll+0x12c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <xTaskResumeAll+0x134>)
 800b2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2ca:	f000 fd8b 	bl	800bde4 <vPortExitCritical>

	return xAlreadyYielded;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000a10 	.word	0x20000a10
 800b2dc:	200009e8 	.word	0x200009e8
 800b2e0:	200009a8 	.word	0x200009a8
 800b2e4:	200009f0 	.word	0x200009f0
 800b2e8:	200008ec 	.word	0x200008ec
 800b2ec:	200008e8 	.word	0x200008e8
 800b2f0:	200009fc 	.word	0x200009fc
 800b2f4:	200009f8 	.word	0x200009f8
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <xTaskGetTickCount+0x1c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b308:	687b      	ldr	r3, [r7, #4]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	200009ec 	.word	0x200009ec

0800b31c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b086      	sub	sp, #24
 800b320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b326:	4b4e      	ldr	r3, [pc, #312]	; (800b460 <xTaskIncrementTick+0x144>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f040 808e 	bne.w	800b44c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b330:	4b4c      	ldr	r3, [pc, #304]	; (800b464 <xTaskIncrementTick+0x148>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b338:	4a4a      	ldr	r2, [pc, #296]	; (800b464 <xTaskIncrementTick+0x148>)
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d120      	bne.n	800b386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b344:	4b48      	ldr	r3, [pc, #288]	; (800b468 <xTaskIncrementTick+0x14c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <xTaskIncrementTick+0x48>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	603b      	str	r3, [r7, #0]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xTaskIncrementTick+0x46>
 800b364:	4b40      	ldr	r3, [pc, #256]	; (800b468 <xTaskIncrementTick+0x14c>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	4b40      	ldr	r3, [pc, #256]	; (800b46c <xTaskIncrementTick+0x150>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a3e      	ldr	r2, [pc, #248]	; (800b468 <xTaskIncrementTick+0x14c>)
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	4a3e      	ldr	r2, [pc, #248]	; (800b46c <xTaskIncrementTick+0x150>)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6013      	str	r3, [r2, #0]
 800b378:	4b3d      	ldr	r3, [pc, #244]	; (800b470 <xTaskIncrementTick+0x154>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	4a3c      	ldr	r2, [pc, #240]	; (800b470 <xTaskIncrementTick+0x154>)
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	f000 faa9 	bl	800b8d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b386:	4b3b      	ldr	r3, [pc, #236]	; (800b474 <xTaskIncrementTick+0x158>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d348      	bcc.n	800b422 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b390:	4b35      	ldr	r3, [pc, #212]	; (800b468 <xTaskIncrementTick+0x14c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d104      	bne.n	800b3a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b39a:	4b36      	ldr	r3, [pc, #216]	; (800b474 <xTaskIncrementTick+0x158>)
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	601a      	str	r2, [r3, #0]
					break;
 800b3a2:	e03e      	b.n	800b422 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a4:	4b30      	ldr	r3, [pc, #192]	; (800b468 <xTaskIncrementTick+0x14c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d203      	bcs.n	800b3c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3bc:	4a2d      	ldr	r2, [pc, #180]	; (800b474 <xTaskIncrementTick+0x158>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3c2:	e02e      	b.n	800b422 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff f863 	bl	800a494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d004      	beq.n	800b3e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	3318      	adds	r3, #24
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff f85a 	bl	800a494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	409a      	lsls	r2, r3
 800b3e8:	4b23      	ldr	r3, [pc, #140]	; (800b478 <xTaskIncrementTick+0x15c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	4a22      	ldr	r2, [pc, #136]	; (800b478 <xTaskIncrementTick+0x15c>)
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4a1f      	ldr	r2, [pc, #124]	; (800b47c <xTaskIncrementTick+0x160>)
 800b400:	441a      	add	r2, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	3304      	adds	r3, #4
 800b406:	4619      	mov	r1, r3
 800b408:	4610      	mov	r0, r2
 800b40a:	f7fe ffe6 	bl	800a3da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <xTaskIncrementTick+0x164>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	429a      	cmp	r2, r3
 800b41a:	d3b9      	bcc.n	800b390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b41c:	2301      	movs	r3, #1
 800b41e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b420:	e7b6      	b.n	800b390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b422:	4b17      	ldr	r3, [pc, #92]	; (800b480 <xTaskIncrementTick+0x164>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b428:	4914      	ldr	r1, [pc, #80]	; (800b47c <xTaskIncrementTick+0x160>)
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	440b      	add	r3, r1
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d901      	bls.n	800b43e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b43a:	2301      	movs	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <xTaskIncrementTick+0x168>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	617b      	str	r3, [r7, #20]
 800b44a:	e004      	b.n	800b456 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <xTaskIncrementTick+0x16c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <xTaskIncrementTick+0x16c>)
 800b454:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000a10 	.word	0x20000a10
 800b464:	200009ec 	.word	0x200009ec
 800b468:	200009a0 	.word	0x200009a0
 800b46c:	200009a4 	.word	0x200009a4
 800b470:	20000a00 	.word	0x20000a00
 800b474:	20000a08 	.word	0x20000a08
 800b478:	200009f0 	.word	0x200009f0
 800b47c:	200008ec 	.word	0x200008ec
 800b480:	200008e8 	.word	0x200008e8
 800b484:	200009fc 	.word	0x200009fc
 800b488:	200009f8 	.word	0x200009f8

0800b48c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b492:	4b29      	ldr	r3, [pc, #164]	; (800b538 <vTaskSwitchContext+0xac>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b49a:	4b28      	ldr	r3, [pc, #160]	; (800b53c <vTaskSwitchContext+0xb0>)
 800b49c:	2201      	movs	r2, #1
 800b49e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4a0:	e044      	b.n	800b52c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b4a2:	4b26      	ldr	r3, [pc, #152]	; (800b53c <vTaskSwitchContext+0xb0>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a8:	4b25      	ldr	r3, [pc, #148]	; (800b540 <vTaskSwitchContext+0xb4>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	fab3 f383 	clz	r3, r3
 800b4b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	f1c3 031f 	rsb	r3, r3, #31
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	4921      	ldr	r1, [pc, #132]	; (800b544 <vTaskSwitchContext+0xb8>)
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	607b      	str	r3, [r7, #4]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <vTaskSwitchContext+0x5a>
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4a14      	ldr	r2, [pc, #80]	; (800b544 <vTaskSwitchContext+0xb8>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	605a      	str	r2, [r3, #4]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	3308      	adds	r3, #8
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d104      	bne.n	800b518 <vTaskSwitchContext+0x8c>
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	605a      	str	r2, [r3, #4]
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	4a0a      	ldr	r2, [pc, #40]	; (800b548 <vTaskSwitchContext+0xbc>)
 800b520:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b522:	4b09      	ldr	r3, [pc, #36]	; (800b548 <vTaskSwitchContext+0xbc>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	334c      	adds	r3, #76	; 0x4c
 800b528:	4a08      	ldr	r2, [pc, #32]	; (800b54c <vTaskSwitchContext+0xc0>)
 800b52a:	6013      	str	r3, [r2, #0]
}
 800b52c:	bf00      	nop
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20000a10 	.word	0x20000a10
 800b53c:	200009fc 	.word	0x200009fc
 800b540:	200009f0 	.word	0x200009f0
 800b544:	200008ec 	.word	0x200008ec
 800b548:	200008e8 	.word	0x200008e8
 800b54c:	20000050 	.word	0x20000050

0800b550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b576:	4b07      	ldr	r3, [pc, #28]	; (800b594 <vTaskPlaceOnEventList+0x44>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3318      	adds	r3, #24
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7fe ff4f 	bl	800a422 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b584:	2101      	movs	r1, #1
 800b586:	6838      	ldr	r0, [r7, #0]
 800b588:	f000 fa6a 	bl	800ba60 <prvAddCurrentTaskToDelayedList>
}
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	200008e8 	.word	0x200008e8

0800b598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	60fb      	str	r3, [r7, #12]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3318      	adds	r3, #24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe ff63 	bl	800a494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <xTaskRemoveFromEventList+0xac>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d11c      	bne.n	800b610 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe ff5a 	bl	800a494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	409a      	lsls	r2, r3
 800b5e8:	4b17      	ldr	r3, [pc, #92]	; (800b648 <xTaskRemoveFromEventList+0xb0>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	4a16      	ldr	r2, [pc, #88]	; (800b648 <xTaskRemoveFromEventList+0xb0>)
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4a13      	ldr	r2, [pc, #76]	; (800b64c <xTaskRemoveFromEventList+0xb4>)
 800b600:	441a      	add	r2, r3
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	3304      	adds	r3, #4
 800b606:	4619      	mov	r1, r3
 800b608:	4610      	mov	r0, r2
 800b60a:	f7fe fee6 	bl	800a3da <vListInsertEnd>
 800b60e:	e005      	b.n	800b61c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	3318      	adds	r3, #24
 800b614:	4619      	mov	r1, r3
 800b616:	480e      	ldr	r0, [pc, #56]	; (800b650 <xTaskRemoveFromEventList+0xb8>)
 800b618:	f7fe fedf 	bl	800a3da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b620:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <xTaskRemoveFromEventList+0xbc>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b626:	429a      	cmp	r2, r3
 800b628:	d905      	bls.n	800b636 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b62a:	2301      	movs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <xTaskRemoveFromEventList+0xc0>)
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e001      	b.n	800b63a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b63a:	697b      	ldr	r3, [r7, #20]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20000a10 	.word	0x20000a10
 800b648:	200009f0 	.word	0x200009f0
 800b64c:	200008ec 	.word	0x200008ec
 800b650:	200009a8 	.word	0x200009a8
 800b654:	200008e8 	.word	0x200008e8
 800b658:	200009fc 	.word	0x200009fc

0800b65c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b664:	4b06      	ldr	r3, [pc, #24]	; (800b680 <vTaskInternalSetTimeOutState+0x24>)
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <vTaskInternalSetTimeOutState+0x28>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	605a      	str	r2, [r3, #4]
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	20000a00 	.word	0x20000a00
 800b684:	200009ec 	.word	0x200009ec

0800b688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	613b      	str	r3, [r7, #16]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	60fb      	str	r3, [r7, #12]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6ca:	f000 fb5b 	bl	800bd84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <xTaskCheckForTimeOut+0xbc>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e6:	d102      	bne.n	800b6ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	61fb      	str	r3, [r7, #28]
 800b6ec:	e023      	b.n	800b736 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <xTaskCheckForTimeOut+0xc0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d007      	beq.n	800b70a <xTaskCheckForTimeOut+0x82>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	429a      	cmp	r2, r3
 800b702:	d302      	bcc.n	800b70a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b704:	2301      	movs	r3, #1
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	e015      	b.n	800b736 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	429a      	cmp	r2, r3
 800b712:	d20b      	bcs.n	800b72c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	1ad2      	subs	r2, r2, r3
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff ff9b 	bl	800b65c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	e004      	b.n	800b736 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b732:	2301      	movs	r3, #1
 800b734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b736:	f000 fb55 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800b73a:	69fb      	ldr	r3, [r7, #28]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	200009ec 	.word	0x200009ec
 800b748:	20000a00 	.word	0x20000a00

0800b74c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b750:	4b03      	ldr	r3, [pc, #12]	; (800b760 <vTaskMissedYield+0x14>)
 800b752:	2201      	movs	r2, #1
 800b754:	601a      	str	r2, [r3, #0]
}
 800b756:	bf00      	nop
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200009fc 	.word	0x200009fc

0800b764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b76c:	f000 f852 	bl	800b814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b770:	4b06      	ldr	r3, [pc, #24]	; (800b78c <prvIdleTask+0x28>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d9f9      	bls.n	800b76c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <prvIdleTask+0x2c>)
 800b77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b788:	e7f0      	b.n	800b76c <prvIdleTask+0x8>
 800b78a:	bf00      	nop
 800b78c:	200008ec 	.word	0x200008ec
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b79a:	2300      	movs	r3, #0
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	e00c      	b.n	800b7ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4a12      	ldr	r2, [pc, #72]	; (800b7f4 <prvInitialiseTaskLists+0x60>)
 800b7ac:	4413      	add	r3, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe fde6 	bl	800a380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b06      	cmp	r3, #6
 800b7be:	d9ef      	bls.n	800b7a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7c0:	480d      	ldr	r0, [pc, #52]	; (800b7f8 <prvInitialiseTaskLists+0x64>)
 800b7c2:	f7fe fddd 	bl	800a380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7c6:	480d      	ldr	r0, [pc, #52]	; (800b7fc <prvInitialiseTaskLists+0x68>)
 800b7c8:	f7fe fdda 	bl	800a380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7cc:	480c      	ldr	r0, [pc, #48]	; (800b800 <prvInitialiseTaskLists+0x6c>)
 800b7ce:	f7fe fdd7 	bl	800a380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7d2:	480c      	ldr	r0, [pc, #48]	; (800b804 <prvInitialiseTaskLists+0x70>)
 800b7d4:	f7fe fdd4 	bl	800a380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7d8:	480b      	ldr	r0, [pc, #44]	; (800b808 <prvInitialiseTaskLists+0x74>)
 800b7da:	f7fe fdd1 	bl	800a380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <prvInitialiseTaskLists+0x78>)
 800b7e0:	4a05      	ldr	r2, [pc, #20]	; (800b7f8 <prvInitialiseTaskLists+0x64>)
 800b7e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <prvInitialiseTaskLists+0x7c>)
 800b7e6:	4a05      	ldr	r2, [pc, #20]	; (800b7fc <prvInitialiseTaskLists+0x68>)
 800b7e8:	601a      	str	r2, [r3, #0]
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200008ec 	.word	0x200008ec
 800b7f8:	20000978 	.word	0x20000978
 800b7fc:	2000098c 	.word	0x2000098c
 800b800:	200009a8 	.word	0x200009a8
 800b804:	200009bc 	.word	0x200009bc
 800b808:	200009d4 	.word	0x200009d4
 800b80c:	200009a0 	.word	0x200009a0
 800b810:	200009a4 	.word	0x200009a4

0800b814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b81a:	e019      	b.n	800b850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b81c:	f000 fab2 	bl	800bd84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b820:	4b10      	ldr	r3, [pc, #64]	; (800b864 <prvCheckTasksWaitingTermination+0x50>)
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fe fe31 	bl	800a494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <prvCheckTasksWaitingTermination+0x54>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3b01      	subs	r3, #1
 800b838:	4a0b      	ldr	r2, [pc, #44]	; (800b868 <prvCheckTasksWaitingTermination+0x54>)
 800b83a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <prvCheckTasksWaitingTermination+0x58>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3b01      	subs	r3, #1
 800b842:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <prvCheckTasksWaitingTermination+0x58>)
 800b844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b846:	f000 facd 	bl	800bde4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f810 	bl	800b870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b850:	4b06      	ldr	r3, [pc, #24]	; (800b86c <prvCheckTasksWaitingTermination+0x58>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e1      	bne.n	800b81c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	200009bc 	.word	0x200009bc
 800b868:	200009e8 	.word	0x200009e8
 800b86c:	200009d0 	.word	0x200009d0

0800b870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	334c      	adds	r3, #76	; 0x4c
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fde1 	bl	800c444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d108      	bne.n	800b89e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fc25 	bl	800c0e0 <vPortFree>
				vPortFree( pxTCB );
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fc22 	bl	800c0e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b89c:	e018      	b.n	800b8d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d103      	bne.n	800b8b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fc19 	bl	800c0e0 <vPortFree>
	}
 800b8ae:	e00f      	b.n	800b8d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d00a      	beq.n	800b8d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60fb      	str	r3, [r7, #12]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <prvDeleteTCB+0x5e>
	}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8de:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <prvResetNextTaskUnblockTime+0x38>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d104      	bne.n	800b8f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <prvResetNextTaskUnblockTime+0x3c>)
 800b8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8f0:	e008      	b.n	800b904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f2:	4b07      	ldr	r3, [pc, #28]	; (800b910 <prvResetNextTaskUnblockTime+0x38>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	4a04      	ldr	r2, [pc, #16]	; (800b914 <prvResetNextTaskUnblockTime+0x3c>)
 800b902:	6013      	str	r3, [r2, #0]
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	200009a0 	.word	0x200009a0
 800b914:	20000a08 	.word	0x20000a08

0800b918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b91e:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <xTaskGetSchedulerState+0x34>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b926:	2301      	movs	r3, #1
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	e008      	b.n	800b93e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <xTaskGetSchedulerState+0x38>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b934:	2302      	movs	r3, #2
 800b936:	607b      	str	r3, [r7, #4]
 800b938:	e001      	b.n	800b93e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b93a:	2300      	movs	r3, #0
 800b93c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b93e:	687b      	ldr	r3, [r7, #4]
	}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	200009f4 	.word	0x200009f4
 800b950:	20000a10 	.word	0x20000a10

0800b954 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d06e      	beq.n	800ba48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b96a:	4b3a      	ldr	r3, [pc, #232]	; (800ba54 <xTaskPriorityDisinherit+0x100>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	429a      	cmp	r2, r3
 800b972:	d00a      	beq.n	800b98a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	60fb      	str	r3, [r7, #12]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10a      	bne.n	800b9a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	60bb      	str	r3, [r7, #8]
}
 800b9a4:	bf00      	nop
 800b9a6:	e7fe      	b.n	800b9a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ac:	1e5a      	subs	r2, r3, #1
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d044      	beq.n	800ba48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d140      	bne.n	800ba48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fe fd62 	bl	800a494 <uxListRemove>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d115      	bne.n	800ba02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9da:	491f      	ldr	r1, [pc, #124]	; (800ba58 <xTaskPriorityDisinherit+0x104>)
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <xTaskPriorityDisinherit+0xae>
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f6:	43da      	mvns	r2, r3
 800b9f8:	4b18      	ldr	r3, [pc, #96]	; (800ba5c <xTaskPriorityDisinherit+0x108>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	4a17      	ldr	r2, [pc, #92]	; (800ba5c <xTaskPriorityDisinherit+0x108>)
 800ba00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	f1c3 0207 	rsb	r2, r3, #7
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	409a      	lsls	r2, r3
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <xTaskPriorityDisinherit+0x108>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	4a0d      	ldr	r2, [pc, #52]	; (800ba5c <xTaskPriorityDisinherit+0x108>)
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4a08      	ldr	r2, [pc, #32]	; (800ba58 <xTaskPriorityDisinherit+0x104>)
 800ba36:	441a      	add	r2, r3
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fe fccb 	bl	800a3da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba44:	2301      	movs	r3, #1
 800ba46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba48:	697b      	ldr	r3, [r7, #20]
	}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3718      	adds	r7, #24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200008e8 	.word	0x200008e8
 800ba58:	200008ec 	.word	0x200008ec
 800ba5c:	200009f0 	.word	0x200009f0

0800ba60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba6a:	4b29      	ldr	r3, [pc, #164]	; (800bb10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba70:	4b28      	ldr	r3, [pc, #160]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fd0c 	bl	800a494 <uxListRemove>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10b      	bne.n	800ba9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba82:	4b24      	ldr	r3, [pc, #144]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	2201      	movs	r2, #1
 800ba8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8e:	43da      	mvns	r2, r3
 800ba90:	4b21      	ldr	r3, [pc, #132]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4013      	ands	r3, r2
 800ba96:	4a20      	ldr	r2, [pc, #128]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa0:	d10a      	bne.n	800bab8 <prvAddCurrentTaskToDelayedList+0x58>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa8:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	481a      	ldr	r0, [pc, #104]	; (800bb1c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bab2:	f7fe fc92 	bl	800a3da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bab6:	e026      	b.n	800bb06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4413      	add	r3, r2
 800babe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bac0:	4b14      	ldr	r3, [pc, #80]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d209      	bcs.n	800bae4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bad0:	4b13      	ldr	r3, [pc, #76]	; (800bb20 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b0f      	ldr	r3, [pc, #60]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3304      	adds	r3, #4
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f7fe fca0 	bl	800a422 <vListInsert>
}
 800bae2:	e010      	b.n	800bb06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae4:	4b0f      	ldr	r3, [pc, #60]	; (800bb24 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3304      	adds	r3, #4
 800baee:	4619      	mov	r1, r3
 800baf0:	4610      	mov	r0, r2
 800baf2:	f7fe fc96 	bl	800a422 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d202      	bcs.n	800bb06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb00:	4a09      	ldr	r2, [pc, #36]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6013      	str	r3, [r2, #0]
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	200009ec 	.word	0x200009ec
 800bb14:	200008e8 	.word	0x200008e8
 800bb18:	200009f0 	.word	0x200009f0
 800bb1c:	200009d4 	.word	0x200009d4
 800bb20:	200009a4 	.word	0x200009a4
 800bb24:	200009a0 	.word	0x200009a0
 800bb28:	20000a08 	.word	0x20000a08

0800bb2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3b04      	subs	r3, #4
 800bb3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3b04      	subs	r3, #4
 800bb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f023 0201 	bic.w	r2, r3, #1
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b04      	subs	r3, #4
 800bb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb5c:	4a0c      	ldr	r2, [pc, #48]	; (800bb90 <pxPortInitialiseStack+0x64>)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3b14      	subs	r3, #20
 800bb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3b04      	subs	r3, #4
 800bb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f06f 0202 	mvn.w	r2, #2
 800bb7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3b20      	subs	r3, #32
 800bb80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb82:	68fb      	ldr	r3, [r7, #12]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	0800bb95 	.word	0x0800bb95

0800bb94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <prvTaskExitError+0x54>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d00a      	beq.n	800bbbe <prvTaskExitError+0x2a>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60fb      	str	r3, [r7, #12]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <prvTaskExitError+0x28>
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	60bb      	str	r3, [r7, #8]
}
 800bbd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbd2:	bf00      	nop
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0fc      	beq.n	800bbd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbda:	bf00      	nop
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	2000004c 	.word	0x2000004c
 800bbec:	00000000 	.word	0x00000000

0800bbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <pxCurrentTCBConst2>)
 800bbf2:	6819      	ldr	r1, [r3, #0]
 800bbf4:	6808      	ldr	r0, [r1, #0]
 800bbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfa:	f380 8809 	msr	PSP, r0
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f04f 0000 	mov.w	r0, #0
 800bc06:	f380 8811 	msr	BASEPRI, r0
 800bc0a:	4770      	bx	lr
 800bc0c:	f3af 8000 	nop.w

0800bc10 <pxCurrentTCBConst2>:
 800bc10:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop

0800bc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc18:	4808      	ldr	r0, [pc, #32]	; (800bc3c <prvPortStartFirstTask+0x24>)
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	6800      	ldr	r0, [r0, #0]
 800bc1e:	f380 8808 	msr	MSP, r0
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8814 	msr	CONTROL, r0
 800bc2a:	b662      	cpsie	i
 800bc2c:	b661      	cpsie	f
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	df00      	svc	0
 800bc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc3a:	bf00      	nop
 800bc3c:	e000ed08 	.word	0xe000ed08

0800bc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc46:	4b46      	ldr	r3, [pc, #280]	; (800bd60 <xPortStartScheduler+0x120>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a46      	ldr	r2, [pc, #280]	; (800bd64 <xPortStartScheduler+0x124>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d10a      	bne.n	800bc66 <xPortStartScheduler+0x26>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	613b      	str	r3, [r7, #16]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc66:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <xPortStartScheduler+0x120>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a3f      	ldr	r2, [pc, #252]	; (800bd68 <xPortStartScheduler+0x128>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d10a      	bne.n	800bc86 <xPortStartScheduler+0x46>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc86:	4b39      	ldr	r3, [pc, #228]	; (800bd6c <xPortStartScheduler+0x12c>)
 800bc88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	22ff      	movs	r2, #255	; 0xff
 800bc96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b31      	ldr	r3, [pc, #196]	; (800bd70 <xPortStartScheduler+0x130>)
 800bcac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcae:	4b31      	ldr	r3, [pc, #196]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcb0:	2207      	movs	r2, #7
 800bcb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcb4:	e009      	b.n	800bcca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcb6:	4b2f      	ldr	r3, [pc, #188]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	4a2d      	ldr	r2, [pc, #180]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	005b      	lsls	r3, r3, #1
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd2:	2b80      	cmp	r3, #128	; 0x80
 800bcd4:	d0ef      	beq.n	800bcb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcd6:	4b27      	ldr	r3, [pc, #156]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f1c3 0307 	rsb	r3, r3, #7
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d00a      	beq.n	800bcf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	60bb      	str	r3, [r7, #8]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcf8:	4b1e      	ldr	r3, [pc, #120]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	4a1d      	ldr	r2, [pc, #116]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd02:	4b1c      	ldr	r3, [pc, #112]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd0a:	4a1a      	ldr	r2, [pc, #104]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd16:	4b18      	ldr	r3, [pc, #96]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a14      	ldr	r2, [pc, #80]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd2e:	f000 f8dd 	bl	800beec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd32:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <xPortStartScheduler+0x13c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd38:	f000 f8fc 	bl	800bf34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd3c:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <xPortStartScheduler+0x140>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0f      	ldr	r2, [pc, #60]	; (800bd80 <xPortStartScheduler+0x140>)
 800bd42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd48:	f7ff ff66 	bl	800bc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd4c:	f7ff fb9e 	bl	800b48c <vTaskSwitchContext>
	prvTaskExitError();
 800bd50:	f7ff ff20 	bl	800bb94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	e000ed00 	.word	0xe000ed00
 800bd64:	410fc271 	.word	0x410fc271
 800bd68:	410fc270 	.word	0x410fc270
 800bd6c:	e000e400 	.word	0xe000e400
 800bd70:	20000a14 	.word	0x20000a14
 800bd74:	20000a18 	.word	0x20000a18
 800bd78:	e000ed20 	.word	0xe000ed20
 800bd7c:	2000004c 	.word	0x2000004c
 800bd80:	e000ef34 	.word	0xe000ef34

0800bd84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	607b      	str	r3, [r7, #4]
}
 800bd9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <vPortEnterCritical+0x58>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a0d      	ldr	r2, [pc, #52]	; (800bddc <vPortEnterCritical+0x58>)
 800bda6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bda8:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <vPortEnterCritical+0x58>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d10f      	bne.n	800bdd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <vPortEnterCritical+0x5c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	603b      	str	r3, [r7, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <vPortEnterCritical+0x4a>
	}
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	2000004c 	.word	0x2000004c
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <vPortExitCritical+0x50>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <vPortExitCritical+0x24>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	607b      	str	r3, [r7, #4]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be08:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <vPortExitCritical+0x50>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	4a09      	ldr	r2, [pc, #36]	; (800be34 <vPortExitCritical+0x50>)
 800be10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <vPortExitCritical+0x50>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d105      	bne.n	800be26 <vPortExitCritical+0x42>
 800be1a:	2300      	movs	r3, #0
 800be1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	f383 8811 	msr	BASEPRI, r3
}
 800be24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	2000004c 	.word	0x2000004c
	...

0800be40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be40:	f3ef 8009 	mrs	r0, PSP
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <pxCurrentTCBConst>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	f01e 0f10 	tst.w	lr, #16
 800be50:	bf08      	it	eq
 800be52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	6010      	str	r0, [r2, #0]
 800be5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be64:	f380 8811 	msr	BASEPRI, r0
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f7ff fb0c 	bl	800b48c <vTaskSwitchContext>
 800be74:	f04f 0000 	mov.w	r0, #0
 800be78:	f380 8811 	msr	BASEPRI, r0
 800be7c:	bc09      	pop	{r0, r3}
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	6808      	ldr	r0, [r1, #0]
 800be82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be86:	f01e 0f10 	tst.w	lr, #16
 800be8a:	bf08      	it	eq
 800be8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be90:	f380 8809 	msr	PSP, r0
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w

0800bea0 <pxCurrentTCBConst>:
 800bea0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop

0800bea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	607b      	str	r3, [r7, #4]
}
 800bec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bec2:	f7ff fa2b 	bl	800b31c <xTaskIncrementTick>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800becc:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <SysTick_Handler+0x40>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f383 8811 	msr	BASEPRI, r3
}
 800bede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <vPortSetupTimerInterrupt+0x38>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <vPortSetupTimerInterrupt+0x3c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a0a      	ldr	r2, [pc, #40]	; (800bf2c <vPortSetupTimerInterrupt+0x40>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	099b      	lsrs	r3, r3, #6
 800bf08:	4a09      	ldr	r2, [pc, #36]	; (800bf30 <vPortSetupTimerInterrupt+0x44>)
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf0e:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bf10:	2207      	movs	r2, #7
 800bf12:	601a      	str	r2, [r3, #0]
}
 800bf14:	bf00      	nop
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	e000e010 	.word	0xe000e010
 800bf24:	e000e018 	.word	0xe000e018
 800bf28:	20000040 	.word	0x20000040
 800bf2c:	10624dd3 	.word	0x10624dd3
 800bf30:	e000e014 	.word	0xe000e014

0800bf34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf44 <vPortEnableVFP+0x10>
 800bf38:	6801      	ldr	r1, [r0, #0]
 800bf3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf3e:	6001      	str	r1, [r0, #0]
 800bf40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf42:	bf00      	nop
 800bf44:	e000ed88 	.word	0xe000ed88

0800bf48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf54:	f7ff f928 	bl	800b1a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf58:	4b5b      	ldr	r3, [pc, #364]	; (800c0c8 <pvPortMalloc+0x180>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf60:	f000 f920 	bl	800c1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf64:	4b59      	ldr	r3, [pc, #356]	; (800c0cc <pvPortMalloc+0x184>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f040 8093 	bne.w	800c098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d01d      	beq.n	800bfb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf78:	2208      	movs	r2, #8
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d014      	beq.n	800bfb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f023 0307 	bic.w	r3, r3, #7
 800bf90:	3308      	adds	r3, #8
 800bf92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	617b      	str	r3, [r7, #20]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d06e      	beq.n	800c098 <pvPortMalloc+0x150>
 800bfba:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <pvPortMalloc+0x188>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d869      	bhi.n	800c098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfc4:	4b43      	ldr	r3, [pc, #268]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfc8:	4b42      	ldr	r3, [pc, #264]	; (800c0d4 <pvPortMalloc+0x18c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfce:	e004      	b.n	800bfda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d903      	bls.n	800bfec <pvPortMalloc+0xa4>
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f1      	bne.n	800bfd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfec:	4b36      	ldr	r3, [pc, #216]	; (800c0c8 <pvPortMalloc+0x180>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d050      	beq.n	800c098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2208      	movs	r2, #8
 800bffc:	4413      	add	r3, r2
 800bffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	2308      	movs	r3, #8
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	429a      	cmp	r2, r3
 800c016:	d91f      	bls.n	800c058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <pvPortMalloc+0xf8>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	613b      	str	r3, [r7, #16]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c052:	69b8      	ldr	r0, [r7, #24]
 800c054:	f000 f908 	bl	800c268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <pvPortMalloc+0x188>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	4a1b      	ldr	r2, [pc, #108]	; (800c0d0 <pvPortMalloc+0x188>)
 800c064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <pvPortMalloc+0x188>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b1b      	ldr	r3, [pc, #108]	; (800c0d8 <pvPortMalloc+0x190>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d203      	bcs.n	800c07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c072:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <pvPortMalloc+0x188>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <pvPortMalloc+0x190>)
 800c078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <pvPortMalloc+0x184>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	431a      	orrs	r2, r3
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c08e:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <pvPortMalloc+0x194>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a11      	ldr	r2, [pc, #68]	; (800c0dc <pvPortMalloc+0x194>)
 800c096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c098:	f7ff f894 	bl	800b1c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <pvPortMalloc+0x174>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <pvPortMalloc+0x172>
	return pvReturn;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20010424 	.word	0x20010424
 800c0cc:	20010438 	.word	0x20010438
 800c0d0:	20010428 	.word	0x20010428
 800c0d4:	2001041c 	.word	0x2001041c
 800c0d8:	2001042c 	.word	0x2001042c
 800c0dc:	20010430 	.word	0x20010430

0800c0e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d04d      	beq.n	800c18e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	425b      	negs	r3, r3
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	4b24      	ldr	r3, [pc, #144]	; (800c198 <vPortFree+0xb8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <vPortFree+0x44>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	60fb      	str	r3, [r7, #12]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <vPortFree+0x62>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60bb      	str	r3, [r7, #8]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b14      	ldr	r3, [pc, #80]	; (800c198 <vPortFree+0xb8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4013      	ands	r3, r2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01e      	beq.n	800c18e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d11a      	bne.n	800c18e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <vPortFree+0xb8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	43db      	mvns	r3, r3
 800c162:	401a      	ands	r2, r3
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c168:	f7ff f81e 	bl	800b1a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <vPortFree+0xbc>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4413      	add	r3, r2
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <vPortFree+0xbc>)
 800c178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f000 f874 	bl	800c268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <vPortFree+0xc0>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3301      	adds	r3, #1
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <vPortFree+0xc0>)
 800c188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c18a:	f7ff f81b 	bl	800b1c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c18e:	bf00      	nop
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20010438 	.word	0x20010438
 800c19c:	20010428 	.word	0x20010428
 800c1a0:	20010434 	.word	0x20010434

0800c1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1aa:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800c1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <prvHeapInit+0xac>)
 800c1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <prvHeapInit+0xac>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	; (800c254 <prvHeapInit+0xb0>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <prvHeapInit+0xb0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0307 	bic.w	r3, r3, #7
 800c1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <prvHeapInit+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <prvHeapInit+0xb4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvHeapInit+0xb4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvHeapInit+0xb4>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <prvHeapInit+0xb8>)
 800c232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <prvHeapInit+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <prvHeapInit+0xc0>)
 800c23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20000a1c 	.word	0x20000a1c
 800c254:	2001041c 	.word	0x2001041c
 800c258:	20010424 	.word	0x20010424
 800c25c:	2001042c 	.word	0x2001042c
 800c260:	20010428 	.word	0x20010428
 800c264:	20010438 	.word	0x20010438

0800c268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <prvInsertBlockIntoFreeList+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e002      	b.n	800c27c <prvInsertBlockIntoFreeList+0x14>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d8f7      	bhi.n	800c276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d108      	bne.n	800c2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d118      	bne.n	800c2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00d      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e008      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	2001041c 	.word	0x2001041c
 800c318:	20010424 	.word	0x20010424

0800c31c <__libc_init_array>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	4d0d      	ldr	r5, [pc, #52]	; (800c354 <__libc_init_array+0x38>)
 800c320:	4c0d      	ldr	r4, [pc, #52]	; (800c358 <__libc_init_array+0x3c>)
 800c322:	1b64      	subs	r4, r4, r5
 800c324:	10a4      	asrs	r4, r4, #2
 800c326:	2600      	movs	r6, #0
 800c328:	42a6      	cmp	r6, r4
 800c32a:	d109      	bne.n	800c340 <__libc_init_array+0x24>
 800c32c:	4d0b      	ldr	r5, [pc, #44]	; (800c35c <__libc_init_array+0x40>)
 800c32e:	4c0c      	ldr	r4, [pc, #48]	; (800c360 <__libc_init_array+0x44>)
 800c330:	f000 f8f0 	bl	800c514 <_init>
 800c334:	1b64      	subs	r4, r4, r5
 800c336:	10a4      	asrs	r4, r4, #2
 800c338:	2600      	movs	r6, #0
 800c33a:	42a6      	cmp	r6, r4
 800c33c:	d105      	bne.n	800c34a <__libc_init_array+0x2e>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	f855 3b04 	ldr.w	r3, [r5], #4
 800c344:	4798      	blx	r3
 800c346:	3601      	adds	r6, #1
 800c348:	e7ee      	b.n	800c328 <__libc_init_array+0xc>
 800c34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34e:	4798      	blx	r3
 800c350:	3601      	adds	r6, #1
 800c352:	e7f2      	b.n	800c33a <__libc_init_array+0x1e>
 800c354:	0800c880 	.word	0x0800c880
 800c358:	0800c880 	.word	0x0800c880
 800c35c:	0800c880 	.word	0x0800c880
 800c360:	0800c884 	.word	0x0800c884

0800c364 <memcpy>:
 800c364:	440a      	add	r2, r1
 800c366:	4291      	cmp	r1, r2
 800c368:	f100 33ff 	add.w	r3, r0, #4294967295
 800c36c:	d100      	bne.n	800c370 <memcpy+0xc>
 800c36e:	4770      	bx	lr
 800c370:	b510      	push	{r4, lr}
 800c372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c37a:	4291      	cmp	r1, r2
 800c37c:	d1f9      	bne.n	800c372 <memcpy+0xe>
 800c37e:	bd10      	pop	{r4, pc}

0800c380 <memset>:
 800c380:	4402      	add	r2, r0
 800c382:	4603      	mov	r3, r0
 800c384:	4293      	cmp	r3, r2
 800c386:	d100      	bne.n	800c38a <memset+0xa>
 800c388:	4770      	bx	lr
 800c38a:	f803 1b01 	strb.w	r1, [r3], #1
 800c38e:	e7f9      	b.n	800c384 <memset+0x4>

0800c390 <_free_r>:
 800c390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c392:	2900      	cmp	r1, #0
 800c394:	d044      	beq.n	800c420 <_free_r+0x90>
 800c396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c39a:	9001      	str	r0, [sp, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f1a1 0404 	sub.w	r4, r1, #4
 800c3a2:	bfb8      	it	lt
 800c3a4:	18e4      	addlt	r4, r4, r3
 800c3a6:	f000 f8a9 	bl	800c4fc <__malloc_lock>
 800c3aa:	4a1e      	ldr	r2, [pc, #120]	; (800c424 <_free_r+0x94>)
 800c3ac:	9801      	ldr	r0, [sp, #4]
 800c3ae:	6813      	ldr	r3, [r2, #0]
 800c3b0:	b933      	cbnz	r3, 800c3c0 <_free_r+0x30>
 800c3b2:	6063      	str	r3, [r4, #4]
 800c3b4:	6014      	str	r4, [r2, #0]
 800c3b6:	b003      	add	sp, #12
 800c3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3bc:	f000 b8a4 	b.w	800c508 <__malloc_unlock>
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d908      	bls.n	800c3d6 <_free_r+0x46>
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1961      	adds	r1, r4, r5
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf01      	itttt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	1949      	addeq	r1, r1, r5
 800c3d2:	6021      	streq	r1, [r4, #0]
 800c3d4:	e7ed      	b.n	800c3b2 <_free_r+0x22>
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	b10b      	cbz	r3, 800c3e0 <_free_r+0x50>
 800c3dc:	42a3      	cmp	r3, r4
 800c3de:	d9fa      	bls.n	800c3d6 <_free_r+0x46>
 800c3e0:	6811      	ldr	r1, [r2, #0]
 800c3e2:	1855      	adds	r5, r2, r1
 800c3e4:	42a5      	cmp	r5, r4
 800c3e6:	d10b      	bne.n	800c400 <_free_r+0x70>
 800c3e8:	6824      	ldr	r4, [r4, #0]
 800c3ea:	4421      	add	r1, r4
 800c3ec:	1854      	adds	r4, r2, r1
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	6011      	str	r1, [r2, #0]
 800c3f2:	d1e0      	bne.n	800c3b6 <_free_r+0x26>
 800c3f4:	681c      	ldr	r4, [r3, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	6053      	str	r3, [r2, #4]
 800c3fa:	4421      	add	r1, r4
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	e7da      	b.n	800c3b6 <_free_r+0x26>
 800c400:	d902      	bls.n	800c408 <_free_r+0x78>
 800c402:	230c      	movs	r3, #12
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	e7d6      	b.n	800c3b6 <_free_r+0x26>
 800c408:	6825      	ldr	r5, [r4, #0]
 800c40a:	1961      	adds	r1, r4, r5
 800c40c:	428b      	cmp	r3, r1
 800c40e:	bf04      	itt	eq
 800c410:	6819      	ldreq	r1, [r3, #0]
 800c412:	685b      	ldreq	r3, [r3, #4]
 800c414:	6063      	str	r3, [r4, #4]
 800c416:	bf04      	itt	eq
 800c418:	1949      	addeq	r1, r1, r5
 800c41a:	6021      	streq	r1, [r4, #0]
 800c41c:	6054      	str	r4, [r2, #4]
 800c41e:	e7ca      	b.n	800c3b6 <_free_r+0x26>
 800c420:	b003      	add	sp, #12
 800c422:	bd30      	pop	{r4, r5, pc}
 800c424:	2001043c 	.word	0x2001043c

0800c428 <cleanup_glue>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	460c      	mov	r4, r1
 800c42c:	6809      	ldr	r1, [r1, #0]
 800c42e:	4605      	mov	r5, r0
 800c430:	b109      	cbz	r1, 800c436 <cleanup_glue+0xe>
 800c432:	f7ff fff9 	bl	800c428 <cleanup_glue>
 800c436:	4621      	mov	r1, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c43e:	f7ff bfa7 	b.w	800c390 <_free_r>
	...

0800c444 <_reclaim_reent>:
 800c444:	4b2c      	ldr	r3, [pc, #176]	; (800c4f8 <_reclaim_reent+0xb4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4283      	cmp	r3, r0
 800c44a:	b570      	push	{r4, r5, r6, lr}
 800c44c:	4604      	mov	r4, r0
 800c44e:	d051      	beq.n	800c4f4 <_reclaim_reent+0xb0>
 800c450:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c452:	b143      	cbz	r3, 800c466 <_reclaim_reent+0x22>
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d14a      	bne.n	800c4f0 <_reclaim_reent+0xac>
 800c45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c45c:	6819      	ldr	r1, [r3, #0]
 800c45e:	b111      	cbz	r1, 800c466 <_reclaim_reent+0x22>
 800c460:	4620      	mov	r0, r4
 800c462:	f7ff ff95 	bl	800c390 <_free_r>
 800c466:	6961      	ldr	r1, [r4, #20]
 800c468:	b111      	cbz	r1, 800c470 <_reclaim_reent+0x2c>
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7ff ff90 	bl	800c390 <_free_r>
 800c470:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c472:	b111      	cbz	r1, 800c47a <_reclaim_reent+0x36>
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff ff8b 	bl	800c390 <_free_r>
 800c47a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c47c:	b111      	cbz	r1, 800c484 <_reclaim_reent+0x40>
 800c47e:	4620      	mov	r0, r4
 800c480:	f7ff ff86 	bl	800c390 <_free_r>
 800c484:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c486:	b111      	cbz	r1, 800c48e <_reclaim_reent+0x4a>
 800c488:	4620      	mov	r0, r4
 800c48a:	f7ff ff81 	bl	800c390 <_free_r>
 800c48e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c490:	b111      	cbz	r1, 800c498 <_reclaim_reent+0x54>
 800c492:	4620      	mov	r0, r4
 800c494:	f7ff ff7c 	bl	800c390 <_free_r>
 800c498:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c49a:	b111      	cbz	r1, 800c4a2 <_reclaim_reent+0x5e>
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7ff ff77 	bl	800c390 <_free_r>
 800c4a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c4a4:	b111      	cbz	r1, 800c4ac <_reclaim_reent+0x68>
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f7ff ff72 	bl	800c390 <_free_r>
 800c4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ae:	b111      	cbz	r1, 800c4b6 <_reclaim_reent+0x72>
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f7ff ff6d 	bl	800c390 <_free_r>
 800c4b6:	69a3      	ldr	r3, [r4, #24]
 800c4b8:	b1e3      	cbz	r3, 800c4f4 <_reclaim_reent+0xb0>
 800c4ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4798      	blx	r3
 800c4c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c4c2:	b1b9      	cbz	r1, 800c4f4 <_reclaim_reent+0xb0>
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4ca:	f7ff bfad 	b.w	800c428 <cleanup_glue>
 800c4ce:	5949      	ldr	r1, [r1, r5]
 800c4d0:	b941      	cbnz	r1, 800c4e4 <_reclaim_reent+0xa0>
 800c4d2:	3504      	adds	r5, #4
 800c4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d6:	2d80      	cmp	r5, #128	; 0x80
 800c4d8:	68d9      	ldr	r1, [r3, #12]
 800c4da:	d1f8      	bne.n	800c4ce <_reclaim_reent+0x8a>
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff ff57 	bl	800c390 <_free_r>
 800c4e2:	e7ba      	b.n	800c45a <_reclaim_reent+0x16>
 800c4e4:	680e      	ldr	r6, [r1, #0]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7ff ff52 	bl	800c390 <_free_r>
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	e7ef      	b.n	800c4d0 <_reclaim_reent+0x8c>
 800c4f0:	2500      	movs	r5, #0
 800c4f2:	e7ef      	b.n	800c4d4 <_reclaim_reent+0x90>
 800c4f4:	bd70      	pop	{r4, r5, r6, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000050 	.word	0x20000050

0800c4fc <__malloc_lock>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <__malloc_lock+0x8>)
 800c4fe:	f7f7 b8c6 	b.w	800368e <__retarget_lock_acquire_recursive>
 800c502:	bf00      	nop
 800c504:	200008d8 	.word	0x200008d8

0800c508 <__malloc_unlock>:
 800c508:	4801      	ldr	r0, [pc, #4]	; (800c510 <__malloc_unlock+0x8>)
 800c50a:	f7f7 b8d4 	b.w	80036b6 <__retarget_lock_release_recursive>
 800c50e:	bf00      	nop
 800c510:	200008d8 	.word	0x200008d8

0800c514 <_init>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr

0800c520 <_fini>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr
