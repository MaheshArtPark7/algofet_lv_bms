
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a290  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7bc  0800a7bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c4  0800a7c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101f4  20000074  0800a840  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010268  0800a840  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff01  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fa9  00000000  00000000  0003ffa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  00046a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d91  00000000  00000000  00048260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026eff  00000000  00000000  00070ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f9d  00000000  00000000  00097ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f08  00000000  00000000  00188ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a448 	.word	0x0800a448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800a448 	.word	0x0800a448

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <bq76952_init>:

//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 800051a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800051e:	80fb      	strh	r3, [r7, #6]
    do
    {
        uint16_t device_number = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	80bb      	strh	r3, [r7, #4]
        bq76952_get_device_number(&device_number);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f808 	bl	800053c <bq76952_get_device_number>
        //        bq76952_set_config_update();
        // TODO: Check if CFGUPDATE bit is SET
        //        bq76952_settings_pwr_cfg();

        ret_val = SYS_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	80fb      	strh	r3, [r7, #6]
    } while (false);

    return ret_val;
 8000530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <bq76952_get_device_number>:

static int16_t bq76952_get_device_number(uint16_t *pDev_num)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    int16_t ret_val = SYS_ERR;
 8000544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000548:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 800054a:	2101      	movs	r1, #1
 800054c:	203e      	movs	r0, #62	; 0x3e
 800054e:	f000 f84d 	bl	80005ec <bq76952_write_sub_cmd>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d107      	bne.n	8000568 <bq76952_get_device_number+0x2c>
        {
            break;
        }
        if (SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, (uint8_t*)pDev_num, 2))
 8000558:	2202      	movs	r2, #2
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	2040      	movs	r0, #64	; 0x40
 800055e:	f000 f8bf 	bl	80006e0 <bq76952_read_sub_cmd_data_buffer>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	e000      	b.n	800056a <bq76952_get_device_number+0x2e>
            break;
 8000568:	bf00      	nop
        {
            break;
        }
    } while (false);
    ret_val = SYS_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	81fb      	strh	r3, [r7, #14]
    return ret_val;
 800056e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <get_crc8>:
    ret_val = SYS_OK;
    return ret_val;
}

static uint8_t get_crc8(uint8_t *pData, uint8_t len)
{
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xff;
 8000586:	23ff      	movs	r3, #255	; 0xff
 8000588:	75fb      	strb	r3, [r7, #23]
    size_t i, j;
    for (i = 0; i < len; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	e021      	b.n	80005d4 <get_crc8+0x5a>
    {
        crc ^= pData[i];
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	4053      	eors	r3, r2
 800059c:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++)
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e011      	b.n	80005c8 <get_crc8+0x4e>
        {
            if ((crc & 0x80) != 0)
 80005a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	da07      	bge.n	80005bc <get_crc8+0x42>
                crc = (uint8_t)((crc << 1) ^ 0x31);
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	75fb      	strb	r3, [r7, #23]
 80005ba:	e002      	b.n	80005c2 <get_crc8+0x48>
            else
                crc <<= 1;
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < 8; j++)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	d9ea      	bls.n	80005a4 <get_crc8+0x2a>
    for (i = 0; i < len; i++)
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d3d9      	bcc.n	8000590 <get_crc8+0x16>
        }
    }
    return crc;
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <bq76952_write_sub_cmd>:

static int16_t bq76952_write_sub_cmd(uint8_t subCmdRegAddr, uint8_t subCmd)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
    int16_t ret_val = SYS_ERR;
 80005fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000600:	82fb      	strh	r3, [r7, #22]
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000602:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <bq76952_write_sub_cmd+0xe8>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	81bb      	strh	r3, [r7, #12]
 8000608:	2300      	movs	r3, #0
 800060a:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 800060c:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <bq76952_write_sub_cmd+0xe8>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	813b      	strh	r3, [r7, #8]
 8000612:	2300      	movs	r3, #0
 8000614:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	757b      	strb	r3, [r7, #21]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	753b      	strb	r3, [r7, #20]
 800061e:	e050      	b.n	80006c2 <bq76952_write_sub_cmd+0xd6>
    {
        pTxData[0] = subCmdRegAddr + i;
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	7d3b      	ldrb	r3, [r7, #20]
 8000624:	4413      	add	r3, r2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	733b      	strb	r3, [r7, #12]
        pTxData[1] = subCmd;
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	737b      	strb	r3, [r7, #13]
        pTxData[2] = get_crc8(pTxData, SUB_CMD_LEN);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffa0 	bl	800057a <get_crc8>
 800063a:	4603      	mov	r3, r0
 800063c:	73bb      	strb	r3, [r7, #14]
        TxByte = pTxData[0] | (pTxData[1] << 8);
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	b21a      	sxth	r2, r3
 8000642:	7b7b      	ldrb	r3, [r7, #13]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	827b      	strh	r3, [r7, #18]
        do
        {
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 800064e:	2200      	movs	r2, #0
 8000650:	2110      	movs	r1, #16
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <bq76952_write_sub_cmd+0xec>)
 8000654:	f003 fb4c 	bl	8003cf0 <HAL_GPIO_WritePin>
            HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000658:	f107 0208 	add.w	r2, r7, #8
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	230a      	movs	r3, #10
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2303      	movs	r3, #3
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <bq76952_write_sub_cmd+0xf0>)
 8000668:	f007 fa1a 	bl	8007aa0 <HAL_SPI_TransmitReceive>
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	4819      	ldr	r0, [pc, #100]	; (80006d8 <bq76952_write_sub_cmd+0xec>)
 8000672:	f003 fb3d 	bl	8003cf0 <HAL_GPIO_WritePin>
            HAL_Delay(2);
 8000676:	2002      	movs	r0, #2
 8000678:	f001 f9bc 	bl	80019f4 <HAL_Delay>
            RxByte = pRxData[0] | (pRxData[1] << 8);
 800067c:	7a3b      	ldrb	r3, [r7, #8]
 800067e:	b21a      	sxth	r2, r3
 8000680:	7a7b      	ldrb	r3, [r7, #9]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	823b      	strh	r3, [r7, #16]
            retry_cnt++;
 800068c:	7d7b      	ldrb	r3, [r7, #21]
 800068e:	3301      	adds	r3, #1
 8000690:	757b      	strb	r3, [r7, #21]
        } while ((TxByte != RxByte) && (retry_cnt > 3));
 8000692:	8a7a      	ldrh	r2, [r7, #18]
 8000694:	8a3b      	ldrh	r3, [r7, #16]
 8000696:	429a      	cmp	r2, r3
 8000698:	d002      	beq.n	80006a0 <bq76952_write_sub_cmd+0xb4>
 800069a:	7d7b      	ldrb	r3, [r7, #21]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d8d6      	bhi.n	800064e <bq76952_write_sub_cmd+0x62>
        if ((TxByte == RxByte) && (retry_cnt < 4))
 80006a0:	8a7a      	ldrh	r2, [r7, #18]
 80006a2:	8a3b      	ldrh	r3, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d108      	bne.n	80006ba <bq76952_write_sub_cmd+0xce>
 80006a8:	7d7b      	ldrb	r3, [r7, #21]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d805      	bhi.n	80006ba <bq76952_write_sub_cmd+0xce>
        {
            ret_val = SYS_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 80006b2:	7d3b      	ldrb	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	753b      	strb	r3, [r7, #20]
 80006b8:	e003      	b.n	80006c2 <bq76952_write_sub_cmd+0xd6>
        }
        else
        {
            ret_val = SYS_ERR;
 80006ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006be:	82fb      	strh	r3, [r7, #22]
            break;
 80006c0:	e002      	b.n	80006c8 <bq76952_write_sub_cmd+0xdc>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 80006c2:	7d3b      	ldrb	r3, [r7, #20]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d9ab      	bls.n	8000620 <bq76952_write_sub_cmd+0x34>
        }
    }
    return ret_val;
 80006c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0800a460 	.word	0x0800a460
 80006d8:	40020800 	.word	0x40020800
 80006dc:	20000564 	.word	0x20000564

080006e0 <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint8_t *p_data, uint8_t len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
    int16_t ret_val = SYS_ERR;
 80006f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f4:	82fb      	strh	r3, [r7, #22]
    do
    {
        if ((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	2b20      	cmp	r3, #32
 80006fa:	d866      	bhi.n	80007ca <bq76952_read_sub_cmd_data_buffer+0xea>
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d063      	beq.n	80007ca <bq76952_read_sub_cmd_data_buffer+0xea>
        {
            break;
        }
        if (p_data == NULL)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d05f      	beq.n	80007c8 <bq76952_read_sub_cmd_data_buffer+0xe8>
        {
            break;
        }
        uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <bq76952_read_sub_cmd_data_buffer+0xf8>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	81bb      	strh	r3, [r7, #12]
 800070e:	2300      	movs	r3, #0
 8000710:	73bb      	strb	r3, [r7, #14]
        uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <bq76952_read_sub_cmd_data_buffer+0xf8>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	813b      	strh	r3, [r7, #8]
 8000718:	2300      	movs	r3, #0
 800071a:	72bb      	strb	r3, [r7, #10]
        uint8_t retry_cnt = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	757b      	strb	r3, [r7, #21]
        uint8_t TxByte, RxByte;
        for (uint8_t i = 0; i > len; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	753b      	strb	r3, [r7, #20]
 8000724:	e04b      	b.n	80007be <bq76952_read_sub_cmd_data_buffer+0xde>
        {
            pTxData[0] = subCmdRegAddr + i;
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	7d3b      	ldrb	r3, [r7, #20]
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	733b      	strb	r3, [r7, #12]
            pTxData[1] = 0xFF;
 8000730:	23ff      	movs	r3, #255	; 0xff
 8000732:	737b      	strb	r3, [r7, #13]
            pTxData[2] = get_crc8(pTxData, SUB_CMD_LEN);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff1d 	bl	800057a <get_crc8>
 8000740:	4603      	mov	r3, r0
 8000742:	73bb      	strb	r3, [r7, #14]
            TxByte = pTxData[0];
 8000744:	7b3b      	ldrb	r3, [r7, #12]
 8000746:	74fb      	strb	r3, [r7, #19]
            retry_cnt = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	757b      	strb	r3, [r7, #21]
            do
            {
                HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 800074c:	2200      	movs	r2, #0
 800074e:	2110      	movs	r1, #16
 8000750:	4822      	ldr	r0, [pc, #136]	; (80007dc <bq76952_read_sub_cmd_data_buffer+0xfc>)
 8000752:	f003 facd 	bl	8003cf0 <HAL_GPIO_WritePin>
                HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000756:	f107 0208 	add.w	r2, r7, #8
 800075a:	f107 010c 	add.w	r1, r7, #12
 800075e:	230a      	movs	r3, #10
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2303      	movs	r3, #3
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <bq76952_read_sub_cmd_data_buffer+0x100>)
 8000766:	f007 f99b 	bl	8007aa0 <HAL_SPI_TransmitReceive>
                HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	481b      	ldr	r0, [pc, #108]	; (80007dc <bq76952_read_sub_cmd_data_buffer+0xfc>)
 8000770:	f003 fabe 	bl	8003cf0 <HAL_GPIO_WritePin>
                HAL_Delay(2);
 8000774:	2002      	movs	r0, #2
 8000776:	f001 f93d 	bl	80019f4 <HAL_Delay>
                RxByte = pRxData[0];
 800077a:	7a3b      	ldrb	r3, [r7, #8]
 800077c:	74bb      	strb	r3, [r7, #18]
                retry_cnt++;
 800077e:	7d7b      	ldrb	r3, [r7, #21]
 8000780:	3301      	adds	r3, #1
 8000782:	757b      	strb	r3, [r7, #21]
            } while ((TxByte != RxByte) && (retry_cnt > 3));
 8000784:	7cfa      	ldrb	r2, [r7, #19]
 8000786:	7cbb      	ldrb	r3, [r7, #18]
 8000788:	429a      	cmp	r2, r3
 800078a:	d002      	beq.n	8000792 <bq76952_read_sub_cmd_data_buffer+0xb2>
 800078c:	7d7b      	ldrb	r3, [r7, #21]
 800078e:	2b03      	cmp	r3, #3
 8000790:	d8dc      	bhi.n	800074c <bq76952_read_sub_cmd_data_buffer+0x6c>
            if ((TxByte == RxByte) && (retry_cnt < 4))
 8000792:	7cfa      	ldrb	r2, [r7, #19]
 8000794:	7cbb      	ldrb	r3, [r7, #18]
 8000796:	429a      	cmp	r2, r3
 8000798:	d10d      	bne.n	80007b6 <bq76952_read_sub_cmd_data_buffer+0xd6>
 800079a:	7d7b      	ldrb	r3, [r7, #21]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d80a      	bhi.n	80007b6 <bq76952_read_sub_cmd_data_buffer+0xd6>
            {
                p_data[i] = RxByte;
 80007a0:	7d3b      	ldrb	r3, [r7, #20]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	4413      	add	r3, r2
 80007a6:	7cba      	ldrb	r2, [r7, #18]
 80007a8:	701a      	strb	r2, [r3, #0]
                ret_val = SYS_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i > len; i++)
 80007ae:	7d3b      	ldrb	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	753b      	strb	r3, [r7, #20]
 80007b4:	e003      	b.n	80007be <bq76952_read_sub_cmd_data_buffer+0xde>
            }
            else
            {
                ret_val = SYS_ERR;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	82fb      	strh	r3, [r7, #22]
                break;
 80007bc:	e005      	b.n	80007ca <bq76952_read_sub_cmd_data_buffer+0xea>
        for (uint8_t i = 0; i > len; i++)
 80007be:	7d3a      	ldrb	r2, [r7, #20]
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d8af      	bhi.n	8000726 <bq76952_read_sub_cmd_data_buffer+0x46>
 80007c6:	e000      	b.n	80007ca <bq76952_read_sub_cmd_data_buffer+0xea>
            break;
 80007c8:	bf00      	nop
            }
        }
    } while (false);
    return ret_val;
 80007ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	0800a460 	.word	0x0800a460
 80007dc:	40020800 	.word	0x40020800
 80007e0:	20000564 	.word	0x20000564

080007e4 <app_afe_init>:
#include "app_afe.h"
#include "app_defines.h"
#include "bq76952.h"

int16_t app_afe_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80007ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ee:	80fb      	strh	r3, [r7, #6]
	do
	{
	    bq76952_init();
 80007f0:	f7ff fe90 	bl	8000514 <bq76952_init>
		ret_val = SYS_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 80007f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <byte_map>:

static int16_t app_gauge_burst_read(TsDataBlockConfig_t *pDataBlockCfg);
static int16_t app_gauge_map_read_data(uint8_t *pBuff, uint8_t blockIdx);

static inline uint16_t byte_map(uint8_t lsb, uint8_t msb)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	460a      	mov	r2, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
	return (msb << 8 | lsb);
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b21a      	sxth	r2, r3
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	b29b      	uxth	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <app_gauge_burst_read>:

static int16_t app_gauge_burst_read(TsDataBlockConfig_t *pDataBlockCfg)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]
	int16_t ret_val = SYS_ERR;
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	81fb      	strh	r3, [r7, #14]
	do
	{
		if(NULL == pDataBlockCfg)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d020      	beq.n	8000886 <app_gauge_burst_read+0x56>
		{
			break;
		}
		if (pDataBlockCfg->Len > BQ_RD_BUFFER_LEN)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	2b14      	cmp	r3, #20
 800084a:	d81e      	bhi.n	800088a <app_gauge_burst_read+0x5a>
		{
			break;
		}
		if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BQ_WR_ADDR, &pDataBlockCfg->Addr, sizeof(pDataBlockCfg->Addr), 500))
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	21aa      	movs	r1, #170	; 0xaa
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <app_gauge_burst_read+0x70>)
 800085a:	f003 fc47 	bl	80040ec <HAL_I2C_Master_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d114      	bne.n	800088e <app_gauge_burst_read+0x5e>
		{
			break;
		}

		/* Master request Slave for data */
		if (HAL_OK != HAL_I2C_Master_Receive (&hi2c1, BQ_RD_ADDR, gauge_read_buffer, pDataBlockCfg->Len, 500))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	b29b      	uxth	r3, r3
 800086a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800086e:	9200      	str	r2, [sp, #0]
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <app_gauge_burst_read+0x74>)
 8000872:	21ab      	movs	r1, #171	; 0xab
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <app_gauge_burst_read+0x70>)
 8000876:	f003 fd37 	bl	80042e8 <HAL_I2C_Master_Receive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d108      	bne.n	8000892 <app_gauge_burst_read+0x62>
		{
			break;
		}

		ret_val = SYS_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	81fb      	strh	r3, [r7, #14]
 8000884:	e006      	b.n	8000894 <app_gauge_burst_read+0x64>
			break;
 8000886:	bf00      	nop
 8000888:	e004      	b.n	8000894 <app_gauge_burst_read+0x64>
			break;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <app_gauge_burst_read+0x64>
			break;
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <app_gauge_burst_read+0x64>
			break;
 8000892:	bf00      	nop

	}while(false);

	return ret_val;
 8000894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000450 	.word	0x20000450
 80008a4:	200000c8 	.word	0x200000c8

080008a8 <app_gauge_map_read_data>:

static int16_t app_gauge_map_read_data(uint8_t *pBuff, uint8_t blockIdx)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	int16_t ret_val = SYS_ERR;
 80008b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b8:	81fb      	strh	r3, [r7, #14]
	do
	{
		if(NULL == pBuff)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d069      	beq.n	8000994 <app_gauge_map_read_data+0xec>
		{
			break;
		}
		if(blockIdx > BQ_NUM_BURST_RD_BLOCKS)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d868      	bhi.n	8000998 <app_gauge_map_read_data+0xf0>
		{
			break;
		}
		switch(blockIdx)
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d15f      	bne.n	800098c <app_gauge_map_read_data+0xe4>
		{
		case eAlgoFet_BLOCK0:
			BQ34_GaugeInfo.StateOfCharge = pBuff[0];
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <app_gauge_map_read_data+0x100>)
 80008d2:	709a      	strb	r2, [r3, #2]
			BQ34_GaugeInfo.vStack = byte_map(pBuff[6], pBuff[7]);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3306      	adds	r3, #6
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3307      	adds	r3, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f7ff ff8e 	bl	8000804 <byte_map>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <app_gauge_map_read_data+0x100>)
 80008ee:	811a      	strh	r2, [r3, #8]
			BQ34_GaugeInfo.Current = byte_map(pBuff[14], pBuff[15]);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	330e      	adds	r3, #14
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	330f      	adds	r3, #15
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4610      	mov	r0, r2
 8000900:	f7ff ff80 	bl	8000804 <byte_map>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <app_gauge_map_read_data+0x100>)
 800090a:	821a      	strh	r2, [r3, #16]
			BQ34_GaugeInfo.Temperature = byte_map(pBuff[10], pBuff[11]);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	330a      	adds	r3, #10
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4610      	mov	r0, r2
 800091c:	f7ff ff72 	bl	8000804 <byte_map>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <app_gauge_map_read_data+0x100>)
 8000926:	819a      	strh	r2, [r3, #12]

			App_GaugeData.SoC = BQ34_GaugeInfo.StateOfCharge;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <app_gauge_map_read_data+0x100>)
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	461a      	mov	r2, r3
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <app_gauge_map_read_data+0x104>)
 8000930:	601a      	str	r2, [r3, #0]
			App_GaugeData.vStack = (float)BQ34_GaugeInfo.vStack/1000;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <app_gauge_map_read_data+0x100>)
 8000934:	891b      	ldrh	r3, [r3, #8]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800093e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80009b0 <app_gauge_map_read_data+0x108>
 8000942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <app_gauge_map_read_data+0x104>)
 8000948:	edc3 7a03 	vstr	s15, [r3, #12]
			App_GaugeData.BatTemp = (float)(BQ34_GaugeInfo.Temperature / 10) - 273.15f;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <app_gauge_map_read_data+0x100>)
 800094e:	899b      	ldrh	r3, [r3, #12]
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <app_gauge_map_read_data+0x10c>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	b29b      	uxth	r3, r3
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000962:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80009b8 <app_gauge_map_read_data+0x110>
 8000966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <app_gauge_map_read_data+0x104>)
 800096c:	edc3 7a05 	vstr	s15, [r3, #20]
			App_GaugeData.InstCurrent = (float)BQ34_GaugeInfo.Current/1000;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <app_gauge_map_read_data+0x100>)
 8000972:	8a1b      	ldrh	r3, [r3, #16]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800097c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80009b0 <app_gauge_map_read_data+0x108>
 8000980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <app_gauge_map_read_data+0x104>)
 8000986:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 800098a:	e000      	b.n	800098e <app_gauge_map_read_data+0xe6>
		default:
			break;
 800098c:	bf00      	nop
		}

		ret_val = SYS_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	e002      	b.n	800099a <app_gauge_map_read_data+0xf2>
			break;
 8000994:	bf00      	nop
 8000996:	e000      	b.n	800099a <app_gauge_map_read_data+0xf2>
			break;
 8000998:	bf00      	nop
	}while(false);

	return ret_val;
 800099a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000090 	.word	0x20000090
 80009ac:	200000a4 	.word	0x200000a4
 80009b0:	447a0000 	.word	0x447a0000
 80009b4:	cccccccd 	.word	0xcccccccd
 80009b8:	43889333 	.word	0x43889333

080009bc <app_gauge_init>:

int16_t app_gauge_init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80009c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c6:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <app_gauge_init+0x2c>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <app_gauge_init+0x2c>)
 80009d0:	2212      	movs	r2, #18
 80009d2:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 80009d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	200000c0 	.word	0x200000c0

080009ec <app_gauge_tick>:

int16_t app_gauge_tick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80009f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f6:	80fb      	strh	r3, [r7, #6]
    do
    {
    	// Read SoC
    	if(SYS_OK != app_gauge_burst_read(&block_read_cfg[eAlgoFet_BLOCK0]))
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <app_gauge_tick+0x40>)
 80009fa:	f7ff ff19 	bl	8000830 <app_gauge_burst_read>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d109      	bne.n	8000a18 <app_gauge_tick+0x2c>
    	{
    		break;
    	}
    	if(SYS_OK != app_gauge_map_read_data(gauge_read_buffer, eAlgoFet_BLOCK0))
 8000a04:	2100      	movs	r1, #0
 8000a06:	480a      	ldr	r0, [pc, #40]	; (8000a30 <app_gauge_tick+0x44>)
 8000a08:	f7ff ff4e 	bl	80008a8 <app_gauge_map_read_data>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d104      	bne.n	8000a1c <app_gauge_tick+0x30>
    	{
    	    break;
    	}
    	ret_val = SYS_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	e002      	b.n	8000a1e <app_gauge_tick+0x32>
    		break;
 8000a18:	bf00      	nop
 8000a1a:	e000      	b.n	8000a1e <app_gauge_tick+0x32>
    	    break;
 8000a1c:	bf00      	nop
    }while(false);
    return ret_val;
 8000a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000c0 	.word	0x200000c0
 8000a30:	200000c8 	.word	0x200000c8

08000a34 <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3e:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8000a40:	f000 fa48 	bl	8000ed4 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8000a44:	f000 fb22 	bl	800108c <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8000a48:	f000 fcb0 	bl	80013ac <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8000a4c:	f000 f8bc 	bl	8000bc8 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8000a50:	f000 f958 	bl	8000d04 <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 8000a54:	f000 f822 	bl	8000a9c <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8000a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6e:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8000a70:	f7ff feb8 	bl	80007e4 <app_afe_init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d107      	bne.n	8000a8a <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8000a7a:	f7ff ff9f 	bl	80009bc <app_gauge_init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <app_sys_peripheral_init+0x2a>
		{
			break;
		}
		// CAN NW Init

		ret_val = SYS_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	e002      	b.n	8000a90 <app_sys_peripheral_init+0x2c>
			break;
 8000a8a:	bf00      	nop
 8000a8c:	e000      	b.n	8000a90 <app_sys_peripheral_init+0x2c>
			break;
 8000a8e:	bf00      	nop
	}while(false);

	return ret_val;
 8000a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_ADC1_Init+0x9c>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_ADC1_Init+0xa0>)
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000afe:	f000 ff9d 	bl	8001a3c <HAL_ADC_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 fc40 	bl	800138c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0x98>)
 8000b1e:	f001 f8f9 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b28:	f000 fc30 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000dc 	.word	0x200000dc
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	0f000001 	.word	0x0f000001

08000b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_ADC_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d127      	bne.n	8000bb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_ADC_MspInit+0x84>)
 8000bae:	f002 fd7b 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <MX_CAN1_Init+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000be6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bf2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_CAN1_Init+0x64>)
 8000c1a:	f001 fafb 	bl	8002214 <HAL_CAN_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c24:	f000 fbb2 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000124 	.word	0x20000124
 8000c30:	40006400 	.word	0x40006400

08000c34 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <HAL_CAN_MspInit+0xc4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d14c      	bne.n	8000cf0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_CAN_MspInit+0xc8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <HAL_CAN_MspInit+0xcc>)
 8000cac:	f002 fcfc 	bl	80036a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2013      	movs	r0, #19
 8000cb6:	f002 f82d 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000cba:	2013      	movs	r0, #19
 8000cbc:	f002 f856 	bl	8002d6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f002 f825 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cca:	2014      	movs	r0, #20
 8000ccc:	f002 f84e 	bl	8002d6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	2015      	movs	r0, #21
 8000cd6:	f002 f81d 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f002 f846 	bl	8002d6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	2016      	movs	r0, #22
 8000ce6:	f002 f815 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000cea:	2016      	movs	r0, #22
 8000cec:	f002 f83e 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40006400 	.word	0x40006400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_DMA_Init+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	200b      	movs	r0, #11
 8000d48:	f001 ffe4 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f002 f80d 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	2011      	movs	r0, #17
 8000d58:	f001 ffdc 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d5c:	2011      	movs	r0, #17
 8000d5e:	f002 f805 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2105      	movs	r1, #5
 8000d66:	2038      	movs	r0, #56	; 0x38
 8000d68:	f001 ffd4 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d6c:	2038      	movs	r0, #56	; 0x38
 8000d6e:	f001 fffd 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	203b      	movs	r0, #59	; 0x3b
 8000d78:	f001 ffcc 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d7c:	203b      	movs	r0, #59	; 0x3b
 8000d7e:	f001 fff5 	bl	8002d6c <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000019c 	.word	0x2000019c
 8000dc0:	20000250 	.word	0x20000250

08000dc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b09e      	sub	sp, #120	; 0x78
 8000dc8:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of can_tx_queue */
  osMessageQDef(can_tx_queue, 512, uint8_t);
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <MX_FREERTOS_Init+0xb8>)
 8000dcc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 8000dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f007 fe89 	bl	8008af4 <osMessageCreate>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <MX_FREERTOS_Init+0xbc>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_FREERTOS_Init+0xb8>)
 8000dea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 8000df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f007 fe7a 	bl	8008af4 <osMessageCreate>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <MX_FREERTOS_Init+0xc0>)
 8000e04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of APP_1HZ_TASK */
  osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_FREERTOS_Init+0xc4>)
 8000e08:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000e0c:	461d      	mov	r5, r3
 8000e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8000e1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f007 fe07 	bl	8008a34 <osThreadCreate>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <MX_FREERTOS_Init+0xc8>)
 8000e2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityAboveNormal, 0, 128);
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_FREERTOS_Init+0xcc>)
 8000e2e:	f107 0420 	add.w	r4, r7, #32
 8000e32:	461d      	mov	r5, r3
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fdf4 	bl	8008a34 <osThreadCreate>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_FREERTOS_Init+0xd0>)
 8000e50:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityHigh, 0, 128);
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_FREERTOS_Init+0xd4>)
 8000e54:	1d3c      	adds	r4, r7, #4
 8000e56:	461d      	mov	r5, r3
 8000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fde3 	bl	8008a34 <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <MX_FREERTOS_Init+0xd8>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e74:	bf00      	nop
 8000e76:	3778      	adds	r7, #120	; 0x78
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	0800a494 	.word	0x0800a494
 8000e80:	20000194 	.word	0x20000194
 8000e84:	20000198 	.word	0x20000198
 8000e88:	0800a4a4 	.word	0x0800a4a4
 8000e8c:	20000188 	.word	0x20000188
 8000e90:	0800a4c0 	.word	0x0800a4c0
 8000e94:	2000018c 	.word	0x2000018c
 8000e98:	0800a4dc 	.word	0x0800a4dc
 8000e9c:	20000190 	.word	0x20000190

08000ea0 <app_task_1Hz>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const * argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
  /* Infinite loop */
  for(;;)
  {
	app_gauge_tick();
 8000ea8:	f7ff fda0 	bl	80009ec <app_gauge_tick>
    osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f007 fe0d 	bl	8008acc <osDelay>
  {
 8000eb2:	e7f9      	b.n	8000ea8 <app_task_1Hz+0x8>

08000eb4 <app_task_10hz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const * argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_10hz */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f007 fe05 	bl	8008acc <osDelay>
 8000ec2:	e7fb      	b.n	8000ebc <app_task_10hz+0x8>

08000ec4 <app_task_100hz>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const * argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_100hz */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f007 fdfd 	bl	8008acc <osDelay>
 8000ed2:	e7fb      	b.n	8000ecc <app_task_100hz+0x8>

08000ed4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b62      	ldr	r3, [pc, #392]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a61      	ldr	r2, [pc, #388]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b58      	ldr	r3, [pc, #352]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a53      	ldr	r2, [pc, #332]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b51      	ldr	r3, [pc, #324]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b46      	ldr	r3, [pc, #280]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a45      	ldr	r2, [pc, #276]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b43      	ldr	r3, [pc, #268]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2106      	movs	r1, #6
 8000f7a:	4840      	ldr	r0, [pc, #256]	; (800107c <MX_GPIO_Init+0x1a8>)
 8000f7c:	f002 feb8 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8000f86:	483e      	ldr	r0, [pc, #248]	; (8001080 <MX_GPIO_Init+0x1ac>)
 8000f88:	f002 feb2 	bl	8003cf0 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000f92:	483c      	ldr	r0, [pc, #240]	; (8001084 <MX_GPIO_Init+0x1b0>)
 8000f94:	f002 feac 	bl	8003cf0 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8000f98:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8000f9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4834      	ldr	r0, [pc, #208]	; (8001080 <MX_GPIO_Init+0x1ac>)
 8000fae:	f002 fb7b 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8000fb2:	f248 1319 	movw	r3, #33049	; 0x8119
 8000fb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482d      	ldr	r0, [pc, #180]	; (800107c <MX_GPIO_Init+0x1a8>)
 8000fc8:	f002 fb6e 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4826      	ldr	r0, [pc, #152]	; (800107c <MX_GPIO_Init+0x1a8>)
 8000fe4:	f002 fb60 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000fe8:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8000fec:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <MX_GPIO_Init+0x1ac>)
 8001002:	f002 fb51 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8001006:	2303      	movs	r3, #3
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_GPIO_Init+0x1b0>)
 800101a:	f002 fb45 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 800101e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001022:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_GPIO_Init+0x1b0>)
 8001038:	f002 fb36 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800103c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8001040:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_GPIO_Init+0x1b0>)
 8001052:	f002 fb29 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <MX_GPIO_Init+0x1b4>)
 800106a:	f002 fb1d 	bl	80036a8 <HAL_GPIO_Init>

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020800 	.word	0x40020800
 8001084:	40020400 	.word	0x40020400
 8001088:	40020c00 	.word	0x40020c00

0800108c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	22a8      	movs	r2, #168	; 0xa8
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f002 fe43 	bl	8003d54 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 f95a 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000450 	.word	0x20000450
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a50      	ldr	r2, [pc, #320]	; (8001248 <HAL_I2C_MspInit+0x160>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 809a 	bne.w	8001240 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	4b4e      	ldr	r3, [pc, #312]	; (800124c <HAL_I2C_MspInit+0x164>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_I2C_MspInit+0x164>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <HAL_I2C_MspInit+0x164>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <HAL_I2C_MspInit+0x168>)
 8001144:	f002 fab0 	bl	80036a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_I2C_MspInit+0x164>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a3e      	ldr	r2, [pc, #248]	; (800124c <HAL_I2C_MspInit+0x164>)
 8001152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b3c      	ldr	r3, [pc, #240]	; (800124c <HAL_I2C_MspInit+0x164>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 8001166:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <HAL_I2C_MspInit+0x170>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800116a:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 800116c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001170:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 8001180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001184:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 800119a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011a6:	482b      	ldr	r0, [pc, #172]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 80011a8:	f001 fdf8 	bl	8002d9c <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80011b2:	f000 f8eb 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
 80011bc:	4a25      	ldr	r2, [pc, #148]	; (8001254 <HAL_I2C_MspInit+0x16c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <HAL_I2C_MspInit+0x178>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_I2C_MspInit+0x174>)
 80011f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_I2C_MspInit+0x174>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x174>)
 8001206:	f001 fdc9 	bl	8002d9c <HAL_DMA_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001210:	f000 f8bc 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_I2C_MspInit+0x174>)
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_I2C_MspInit+0x174>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2105      	movs	r1, #5
 8001224:	201f      	movs	r0, #31
 8001226:	f001 fd75 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800122a:	201f      	movs	r0, #31
 800122c:	f001 fd9e 	bl	8002d6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2105      	movs	r1, #5
 8001234:	2020      	movs	r0, #32
 8001236:	f001 fd6d 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800123a:	2020      	movs	r0, #32
 800123c:	f001 fd96 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40005400 	.word	0x40005400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400
 8001254:	200004a4 	.word	0x200004a4
 8001258:	40026010 	.word	0x40026010
 800125c:	20000504 	.word	0x20000504
 8001260:	400260a0 	.word	0x400260a0

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fb82 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 800126c:	f000 f80a 	bl	8001284 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8001270:	f7ff fbe0 	bl	8000a34 <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8001274:	f7ff fbf6 	bl	8000a64 <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001278:	f7ff fda4 	bl	8000dc4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800127c:	f007 fbd3 	bl	8008a26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	e7fe      	b.n	8001280 <main+0x1c>
	...

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2234      	movs	r2, #52	; 0x34
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f009 f80e 	bl	800a2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <SystemClock_Config+0xdc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <SystemClock_Config+0xdc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <SystemClock_Config+0xdc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <SystemClock_Config+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <SystemClock_Config+0xe0>)
 80012ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <SystemClock_Config+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012f8:	23b4      	movs	r3, #180	; 0xb4
 80012fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fea5 	bl	800705c <HAL_RCC_OscConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001318:	f000 f838 	bl	800138c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800131c:	f005 fa12 	bl	8006744 <HAL_PWREx_EnableOverDrive>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001326:	f000 f831 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001336:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2105      	movs	r1, #5
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fa4b 	bl	80067e4 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001354:	f000 f81a 	bl	800138c <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	; 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800137a:	f000 fb1b 	bl	80019b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010000 	.word	0x40010000

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>

08001396 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI1_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI1_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e0:	2238      	movs	r2, #56	; 0x38
 80013e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI1_Init+0x64>)
 80013fe:	f006 f989 	bl	8007714 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001408:	f7ff ffc0 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000564 	.word	0x20000564
 8001414:	40013000 	.word	0x40013000

08001418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_SPI_MspInit+0x150>)
 8001436:	4293      	cmp	r3, r2
 8001438:	f040 8092 	bne.w	8001560 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_SPI_MspInit+0x154>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_SPI_MspInit+0x154>)
 8001446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800144a:	6453      	str	r3, [r2, #68]	; 0x44
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_SPI_MspInit+0x154>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_SPI_MspInit+0x154>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <HAL_SPI_MspInit+0x154>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_SPI_MspInit+0x154>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001474:	23e0      	movs	r3, #224	; 0xe0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001484:	2305      	movs	r3, #5
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4838      	ldr	r0, [pc, #224]	; (8001570 <HAL_SPI_MspInit+0x158>)
 8001490:	f002 f90a 	bl	80036a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 8001496:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_SPI_MspInit+0x160>)
 8001498:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 800149c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014d6:	4827      	ldr	r0, [pc, #156]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014d8:	f001 fc60 	bl	8002d9c <HAL_DMA_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80014e2:	f7ff ff53 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_SPI_MspInit+0x15c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_SPI_MspInit+0x164>)
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_SPI_MspInit+0x168>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_SPI_MspInit+0x164>)
 80014fa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014fe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_SPI_MspInit+0x164>)
 800150e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001512:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x164>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001528:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800152c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001536:	f001 fc31 	bl	8002d9c <HAL_DMA_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001540:	f7ff ff24 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_SPI_MspInit+0x164>)
 8001548:	649a      	str	r2, [r3, #72]	; 0x48
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_SPI_MspInit+0x164>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2105      	movs	r1, #5
 8001554:	2023      	movs	r0, #35	; 0x23
 8001556:	f001 fbdd 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800155a:	2023      	movs	r0, #35	; 0x23
 800155c:	f001 fc06 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	200005e4 	.word	0x200005e4
 8001578:	40026410 	.word	0x40026410
 800157c:	20000644 	.word	0x20000644
 8001580:	40026458 	.word	0x40026458

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_MspInit+0x54>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x54>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_MspInit+0x54>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_MspInit+0x54>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210f      	movs	r1, #15
 80015c6:	f06f 0001 	mvn.w	r0, #1
 80015ca:	f001 fba3 	bl	8002d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_InitTick+0xd4>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_InitTick+0xd4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6453      	str	r3, [r2, #68]	; 0x44
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_InitTick+0xd4>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fac0 	bl	8006b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001618:	f005 faaa 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_InitTick+0xd8>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9b      	lsrs	r3, r3, #18
 800162c:	3b01      	subs	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_InitTick+0xdc>)
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_InitTick+0xe0>)
 8001634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_InitTick+0xdc>)
 8001638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_InitTick+0xdc>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_InitTick+0xdc>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_InitTick+0xdc>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_InitTick+0xdc>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <HAL_InitTick+0xdc>)
 8001658:	f006 fe00 	bl	800825c <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001666:	2b00      	cmp	r3, #0
 8001668:	d11b      	bne.n	80016a2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_InitTick+0xdc>)
 800166c:	f006 fef0 	bl	8008450 <HAL_TIM_Base_Start_IT>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800167a:	2b00      	cmp	r3, #0
 800167c:	d111      	bne.n	80016a2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800167e:	2019      	movs	r0, #25
 8001680:	f001 fb74 	bl	8002d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d808      	bhi.n	800169c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800168a:	2200      	movs	r2, #0
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	2019      	movs	r0, #25
 8001690:	f001 fb40 	bl	8002d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_InitTick+0xe4>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e002      	b.n	80016a2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3730      	adds	r7, #48	; 0x30
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	200006a4 	.word	0x200006a4
 80016bc:	40010000 	.word	0x40010000
 80016c0:	20000004 	.word	0x20000004

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <WWDG_IRQHandler+0x10>)
 80016f6:	f007 f955 	bl	80089a4 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200006ec 	.word	0x200006ec

08001704 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA1_Stream0_IRQHandler+0x10>)
 800170a:	f001 fd83 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200004a4 	.word	0x200004a4

08001718 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA1_Stream6_IRQHandler+0x10>)
 800171e:	f001 fd79 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000504 	.word	0x20000504

0800172c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <CAN1_TX_IRQHandler+0x10>)
 8001732:	f000 ffd9 	bl	80026e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000124 	.word	0x20000124

08001740 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <CAN1_RX0_IRQHandler+0x10>)
 8001746:	f000 ffcf 	bl	80026e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000124 	.word	0x20000124

08001754 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <CAN1_RX1_IRQHandler+0x10>)
 800175a:	f000 ffc5 	bl	80026e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000124 	.word	0x20000124

08001768 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <CAN1_SCE_IRQHandler+0x10>)
 800176e:	f000 ffbb 	bl	80026e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000124 	.word	0x20000124

0800177c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001782:	f006 ff2b 	bl	80085dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200006a4 	.word	0x200006a4

08001790 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <I2C1_EV_IRQHandler+0x10>)
 8001796:	f002 ffcd 	bl	8004734 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000450 	.word	0x20000450

080017a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <I2C1_ER_IRQHandler+0x10>)
 80017aa:	f003 f934 	bl	8004a16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000450 	.word	0x20000450

080017b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <SPI1_IRQHandler+0x10>)
 80017be:	f006 fb1d 	bl	8007dfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000564 	.word	0x20000564

080017cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA2_Stream0_IRQHandler+0x10>)
 80017d2:	f001 fd1f 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200005e4 	.word	0x200005e4

080017e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA2_Stream3_IRQHandler+0x10>)
 80017e6:	f001 fd15 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000644 	.word	0x20000644

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f008 fd11 	bl	800a26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fd0b 	bl	8001264 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800185c:	0800a7cc 	.word	0x0800a7cc
  ldr r2, =_sbss
 8001860:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001864:	20010268 	.word	0x20010268

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>

0800186a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d104      	bne.n	8001882 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
 800187c:	f7ff fd86 	bl	800138c <Error_Handler>
 8001880:	e7fe      	b.n	8001880 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7a1b      	ldrb	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d904      	bls.n	8001894 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
}
 800188c:	bf00      	nop
 800188e:	f7ff fd7d 	bl	800138c <Error_Handler>
 8001892:	e7fe      	b.n	8001892 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7a1b      	ldrb	r3, [r3, #8]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	b2d1      	uxtb	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	7211      	strb	r1, [r2, #8]
 80018a0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80018a2:	f3ef 8211 	mrs	r2, BASEPRI
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
 80018dc:	f7ff fd56 	bl	800138c <Error_Handler>
 80018e0:	e7fe      	b.n	80018e0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7a1b      	ldrb	r3, [r3, #8]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7a1b      	ldrb	r3, [r3, #8]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d904      	bls.n	8001900 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80018f6:	b672      	cpsid	i
}
 80018f8:	bf00      	nop
 80018fa:	f7ff fd47 	bl	800138c <Error_Handler>
 80018fe:	e7fe      	b.n	80018fe <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7a1b      	ldrb	r3, [r3, #8]
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001914:	bf00      	nop
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d104      	bne.n	8001936 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
 8001930:	f7ff fd2c 	bl	800138c <Error_Handler>
 8001934:	e7fe      	b.n	8001934 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff96 	bl	800186a <stm32_lock_acquire>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d104      	bne.n	800195e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
 8001958:	f7ff fd18 	bl	800138c <Error_Handler>
 800195c:	e7fe      	b.n	800195c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffb2 	bl	80018ca <stm32_lock_release>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_Init+0x40>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_Init+0x40>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x40>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f001 f99b 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f7ff fe1c 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fdee 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	2000070c 	.word	0x2000070c

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000070c 	.word	0x2000070c

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008

08001a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e15c      	b.n	8001d0c <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a8e      	ldr	r2, [pc, #568]	; (8001c90 <HAL_ADC_Init+0x254>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_ADC_Init+0x3e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a8c      	ldr	r2, [pc, #560]	; (8001c94 <HAL_ADC_Init+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_ADC_Init+0x3e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a8b      	ldr	r2, [pc, #556]	; (8001c98 <HAL_ADC_Init+0x25c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x3e>
 8001a70:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8001a74:	4889      	ldr	r0, [pc, #548]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001a76:	f7ff fc8e 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d013      	beq.n	8001aaa <HAL_ADC_Init+0x6e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d00e      	beq.n	8001aaa <HAL_ADC_Init+0x6e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a94:	d009      	beq.n	8001aaa <HAL_ADC_Init+0x6e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a9e:	d004      	beq.n	8001aaa <HAL_ADC_Init+0x6e>
 8001aa0:	f240 1143 	movw	r1, #323	; 0x143
 8001aa4:	487d      	ldr	r0, [pc, #500]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001aa6:	f7ff fc76 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d013      	beq.n	8001ada <HAL_ADC_Init+0x9e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aba:	d00e      	beq.n	8001ada <HAL_ADC_Init+0x9e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac4:	d009      	beq.n	8001ada <HAL_ADC_Init+0x9e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ace:	d004      	beq.n	8001ada <HAL_ADC_Init+0x9e>
 8001ad0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001ad4:	4871      	ldr	r0, [pc, #452]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001ad6:	f7ff fc5e 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_ADC_Init+0xb8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_Init+0xb8>
 8001aea:	f240 1145 	movw	r1, #325	; 0x145
 8001aee:	486b      	ldr	r0, [pc, #428]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001af0:	f7ff fc51 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7e1b      	ldrb	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_ADC_Init+0xd2>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Init+0xd2>
 8001b04:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001b08:	4864      	ldr	r0, [pc, #400]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001b0a:	f7ff fc44 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d054      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1e:	d04f      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b28:	d04a      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b32:	d045      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b3c:	d040      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001b46:	d03b      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001b50:	d036      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001b5a:	d031      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b64:	d02c      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001b6e:	d027      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001b78:	d022      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001b82:	d01d      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001b8c:	d018      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001b96:	d013      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001baa:	d009      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_ADC_Init+0x264>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_ADC_Init+0x184>
 8001bb6:	f240 1147 	movw	r1, #327	; 0x147
 8001bba:	4838      	ldr	r0, [pc, #224]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001bbc:	f7ff fbeb 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_ADC_Init+0x1a0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_Init+0x1a0>
 8001bd2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001bd6:	4831      	ldr	r0, [pc, #196]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001bd8:	f7ff fbdd 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_ADC_Init+0x1b0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d904      	bls.n	8001bf6 <HAL_ADC_Init+0x1ba>
 8001bec:	f240 1149 	movw	r1, #329	; 0x149
 8001bf0:	482a      	ldr	r0, [pc, #168]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001bf2:	f7ff fbd0 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_ADC_Init+0x1d8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_Init+0x1d8>
 8001c0a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001c0e:	4823      	ldr	r0, [pc, #140]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001c10:	f7ff fbc1 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d00c      	beq.n	8001c36 <HAL_ADC_Init+0x1fa>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_ADC_Init+0x1fa>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d004      	beq.n	8001c36 <HAL_ADC_Init+0x1fa>
 8001c2c:	f240 114b 	movw	r1, #331	; 0x14b
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001c32:	f7ff fbb0 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_ADC_Init+0x218>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_Init+0x218>
 8001c4a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001c50:	f7ff fba1 	bl	8001396 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_ADC_Init+0x264>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01e      	beq.n	8001ca4 <HAL_ADC_Init+0x268>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c6e:	d019      	beq.n	8001ca4 <HAL_ADC_Init+0x268>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c78:	d014      	beq.n	8001ca4 <HAL_ADC_Init+0x268>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c82:	d00f      	beq.n	8001ca4 <HAL_ADC_Init+0x268>
 8001c84:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <HAL_ADC_Init+0x260>)
 8001c8a:	f7ff fb84 	bl	8001396 <assert_failed>
 8001c8e:	e009      	b.n	8001ca4 <HAL_ADC_Init+0x268>
 8001c90:	40012000 	.word	0x40012000
 8001c94:	40012100 	.word	0x40012100
 8001c98:	40012200 	.word	0x40012200
 8001c9c:	0800a4f8 	.word	0x0800a4f8
 8001ca0:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe ff47 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d118      	bne.n	8001cfe <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd4:	f023 0302 	bic.w	r3, r3, #2
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f98d 	bl	8002000 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f023 0303 	bic.w	r3, r3, #3
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfc:	e001      	b.n	8001d02 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d909      	bls.n	8001d3e <HAL_ADC_ConfigChannel+0x2a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x2a>
 8001d34:	f240 618b 	movw	r1, #1675	; 0x68b
 8001d38:	4870      	ldr	r0, [pc, #448]	; (8001efc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d3a:	f7ff fb2c 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x3a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d904      	bls.n	8001d58 <HAL_ADC_ConfigChannel+0x44>
 8001d4e:	f240 618c 	movw	r1, #1676	; 0x68c
 8001d52:	486a      	ldr	r0, [pc, #424]	; (8001efc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d54:	f7ff fb1f 	bl	8001396 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d01c      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d018      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d014      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d010      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d00c      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d008      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x8e>
 8001d98:	f240 618d 	movw	r1, #1677	; 0x68d
 8001d9c:	4857      	ldr	r0, [pc, #348]	; (8001efc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d9e:	f7ff fafa 	bl	8001396 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x9c>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e118      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x2ce>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d925      	bls.n	8001e0c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68d9      	ldr	r1, [r3, #12]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b1e      	subs	r3, #30
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	400a      	ands	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68d9      	ldr	r1, [r3, #12]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4403      	add	r3, r0
 8001dfe:	3b1e      	subs	r3, #30
 8001e00:	409a      	lsls	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	e022      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	2207      	movs	r2, #7
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4403      	add	r3, r0
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d824      	bhi.n	8001ea4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b05      	subs	r3, #5
 8001e6c:	221f      	movs	r2, #31
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3b05      	subs	r3, #5
 8001e96:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	e051      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d829      	bhi.n	8001f00 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b23      	subs	r3, #35	; 0x23
 8001ebe:	221f      	movs	r2, #31
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b23      	subs	r3, #35	; 0x23
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef4:	e028      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x234>
 8001ef6:	bf00      	nop
 8001ef8:	10000012 	.word	0x10000012
 8001efc:	0800a4f8 	.word	0x0800a4f8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b41      	subs	r3, #65	; 0x41
 8001f12:	221f      	movs	r2, #31
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	400a      	ands	r2, r1
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b41      	subs	r3, #65	; 0x41
 8001f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_ADC_ConfigChannel+0x2d8>)
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <HAL_ADC_ConfigChannel+0x2dc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10f      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x262>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d10b      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_ADC_ConfigChannel+0x2dc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d12b      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x2c4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_ADC_ConfigChannel+0x2e0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x27e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d122      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_ADC_ConfigChannel+0x2e0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_ADC_ConfigChannel+0x2e4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_ADC_ConfigChannel+0x2e8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9a      	lsrs	r2, r3, #18
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fca:	e002      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40012300 	.word	0x40012300
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	10000012 	.word	0x10000012
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <ADC_Init+0x208>)
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <ADC_Init+0x20c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e00f      	b.n	80020fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0202 	bic.w	r2, r2, #2
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
 8002118:	005a      	lsls	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d028      	beq.n	800217e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <ADC_Init+0x13c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b08      	cmp	r3, #8
 800213a:	d904      	bls.n	8002146 <ADC_Init+0x146>
 800213c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8002140:	4833      	ldr	r0, [pc, #204]	; (8002210 <ADC_Init+0x210>)
 8002142:	f7ff f928 	bl	8001396 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002154:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002164:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	3b01      	subs	r3, #1
 8002172:	035a      	lsls	r2, r3, #13
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e007      	b.n	800218e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	051a      	lsls	r2, r3, #20
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d0:	025a      	lsls	r2, r3, #9
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	029a      	lsls	r2, r3, #10
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40012300 	.word	0x40012300
 800220c:	0f000001 	.word	0x0f000001
 8002210:	0800a4f8 	.word	0x0800a4f8

08002214 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e243      	b.n	80026ae <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a93      	ldr	r2, [pc, #588]	; (8002478 <HAL_CAN_Init+0x264>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_CAN_Init+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a91      	ldr	r2, [pc, #580]	; (800247c <HAL_CAN_Init+0x268>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_CAN_Init+0x30>
 800223a:	f240 111d 	movw	r1, #285	; 0x11d
 800223e:	4890      	ldr	r0, [pc, #576]	; (8002480 <HAL_CAN_Init+0x26c>)
 8002240:	f7ff f8a9 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e1b      	ldrb	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_CAN_Init+0x4a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e1b      	ldrb	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d004      	beq.n	800225e <HAL_CAN_Init+0x4a>
 8002254:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002258:	4889      	ldr	r0, [pc, #548]	; (8002480 <HAL_CAN_Init+0x26c>)
 800225a:	f7ff f89c 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7e5b      	ldrb	r3, [r3, #25]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_CAN_Init+0x64>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7e5b      	ldrb	r3, [r3, #25]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d004      	beq.n	8002278 <HAL_CAN_Init+0x64>
 800226e:	f240 111f 	movw	r1, #287	; 0x11f
 8002272:	4883      	ldr	r0, [pc, #524]	; (8002480 <HAL_CAN_Init+0x26c>)
 8002274:	f7ff f88f 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e9b      	ldrb	r3, [r3, #26]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_CAN_Init+0x7e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e9b      	ldrb	r3, [r3, #26]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d004      	beq.n	8002292 <HAL_CAN_Init+0x7e>
 8002288:	f44f 7190 	mov.w	r1, #288	; 0x120
 800228c:	487c      	ldr	r0, [pc, #496]	; (8002480 <HAL_CAN_Init+0x26c>)
 800228e:	f7ff f882 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7edb      	ldrb	r3, [r3, #27]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_CAN_Init+0x98>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7edb      	ldrb	r3, [r3, #27]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d004      	beq.n	80022ac <HAL_CAN_Init+0x98>
 80022a2:	f240 1121 	movw	r1, #289	; 0x121
 80022a6:	4876      	ldr	r0, [pc, #472]	; (8002480 <HAL_CAN_Init+0x26c>)
 80022a8:	f7ff f875 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7f1b      	ldrb	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_CAN_Init+0xb2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7f1b      	ldrb	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_Init+0xb2>
 80022bc:	f44f 7191 	mov.w	r1, #290	; 0x122
 80022c0:	486f      	ldr	r0, [pc, #444]	; (8002480 <HAL_CAN_Init+0x26c>)
 80022c2:	f7ff f868 	bl	8001396 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7f5b      	ldrb	r3, [r3, #29]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_CAN_Init+0xcc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7f5b      	ldrb	r3, [r3, #29]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d004      	beq.n	80022e0 <HAL_CAN_Init+0xcc>
 80022d6:	f240 1123 	movw	r1, #291	; 0x123
 80022da:	4869      	ldr	r0, [pc, #420]	; (8002480 <HAL_CAN_Init+0x26c>)
 80022dc:	f7ff f85b 	bl	8001396 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_CAN_Init+0xfc>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d00e      	beq.n	8002310 <HAL_CAN_Init+0xfc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022fa:	d009      	beq.n	8002310 <HAL_CAN_Init+0xfc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002304:	d004      	beq.n	8002310 <HAL_CAN_Init+0xfc>
 8002306:	f44f 7192 	mov.w	r1, #292	; 0x124
 800230a:	485d      	ldr	r0, [pc, #372]	; (8002480 <HAL_CAN_Init+0x26c>)
 800230c:	f7ff f843 	bl	8001396 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_CAN_Init+0x12c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d00e      	beq.n	8002340 <HAL_CAN_Init+0x12c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232a:	d009      	beq.n	8002340 <HAL_CAN_Init+0x12c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002334:	d004      	beq.n	8002340 <HAL_CAN_Init+0x12c>
 8002336:	f240 1125 	movw	r1, #293	; 0x125
 800233a:	4851      	ldr	r0, [pc, #324]	; (8002480 <HAL_CAN_Init+0x26c>)
 800233c:	f7ff f82b 	bl	8001396 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d04f      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d04a      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800235a:	d045      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002364:	d040      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800236e:	d03b      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d036      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002382:	d031      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800238c:	d02c      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002396:	d027      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80023a0:	d022      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80023aa:	d01d      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80023b4:	d018      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023be:	d013      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80023c8:	d00e      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023d2:	d009      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_Init+0x1d4>
 80023de:	f44f 7193 	mov.w	r1, #294	; 0x126
 80023e2:	4827      	ldr	r0, [pc, #156]	; (8002480 <HAL_CAN_Init+0x26c>)
 80023e4:	f7fe ffd7 	bl	8001396 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d027      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f8:	d022      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002402:	d01d      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800240c:	d018      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d013      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002420:	d00e      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800242a:	d009      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8002434:	d004      	beq.n	8002440 <HAL_CAN_Init+0x22c>
 8002436:	f240 1127 	movw	r1, #295	; 0x127
 800243a:	4811      	ldr	r0, [pc, #68]	; (8002480 <HAL_CAN_Init+0x26c>)
 800243c:	f7fe ffab 	bl	8001396 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_CAN_Init+0x23e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002450:	d904      	bls.n	800245c <HAL_CAN_Init+0x248>
 8002452:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002456:	480a      	ldr	r0, [pc, #40]	; (8002480 <HAL_CAN_Init+0x26c>)
 8002458:	f7fe ff9d 	bl	8001396 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13d      	bne.n	80024e4 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a06      	ldr	r2, [pc, #24]	; (8002484 <HAL_CAN_Init+0x270>)
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_CAN_Init+0x274>)
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
 8002474:	e00a      	b.n	800248c <HAL_CAN_Init+0x278>
 8002476:	bf00      	nop
 8002478:	40006400 	.word	0x40006400
 800247c:	40006800 	.word	0x40006800
 8002480:	0800a530 	.word	0x0800a530
 8002484:	08002aeb 	.word	0x08002aeb
 8002488:	08002aff 	.word	0x08002aff
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a8a      	ldr	r2, [pc, #552]	; (80026b8 <HAL_CAN_Init+0x4a4>)
 8002490:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a89      	ldr	r2, [pc, #548]	; (80026bc <HAL_CAN_Init+0x4a8>)
 8002496:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a89      	ldr	r2, [pc, #548]	; (80026c0 <HAL_CAN_Init+0x4ac>)
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a88      	ldr	r2, [pc, #544]	; (80026c4 <HAL_CAN_Init+0x4b0>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a88      	ldr	r2, [pc, #544]	; (80026c8 <HAL_CAN_Init+0x4b4>)
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a87      	ldr	r2, [pc, #540]	; (80026cc <HAL_CAN_Init+0x4b8>)
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_CAN_Init+0x4bc>)
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a86      	ldr	r2, [pc, #536]	; (80026d4 <HAL_CAN_Init+0x4c0>)
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a86      	ldr	r2, [pc, #536]	; (80026d8 <HAL_CAN_Init+0x4c4>)
 80024c0:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a85      	ldr	r2, [pc, #532]	; (80026dc <HAL_CAN_Init+0x4c8>)
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a85      	ldr	r2, [pc, #532]	; (80026e0 <HAL_CAN_Init+0x4cc>)
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a82      	ldr	r2, [pc, #520]	; (80026e4 <HAL_CAN_Init+0x4d0>)
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f4:	f7ff fa72 	bl	80019dc <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024fa:	e012      	b.n	8002522 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024fc:	f7ff fa6e 	bl	80019dc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b0a      	cmp	r3, #10
 8002508:	d90b      	bls.n	8002522 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2205      	movs	r2, #5
 800251a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0c5      	b.n	80026ae <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0e5      	beq.n	80024fc <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0202 	bic.w	r2, r2, #2
 800253e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002540:	f7ff fa4c 	bl	80019dc <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002546:	e012      	b.n	800256e <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002548:	f7ff fa48 	bl	80019dc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b0a      	cmp	r3, #10
 8002554:	d90b      	bls.n	800256e <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2205      	movs	r2, #5
 8002566:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e09f      	b.n	80026ae <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7e5b      	ldrb	r3, [r3, #25]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e9b      	ldrb	r3, [r3, #26]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0220 	bic.w	r2, r2, #32
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7edb      	ldrb	r3, [r3, #27]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0210 	bic.w	r2, r2, #16
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0210 	orr.w	r2, r2, #16
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7f1b      	ldrb	r3, [r3, #28]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0208 	orr.w	r2, r2, #8
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0208 	bic.w	r2, r2, #8
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7f5b      	ldrb	r3, [r3, #29]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0204 	orr.w	r2, r2, #4
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	ea42 0103 	orr.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08002b13 	.word	0x08002b13
 80026bc:	08002b27 	.word	0x08002b27
 80026c0:	08002a73 	.word	0x08002a73
 80026c4:	08002a87 	.word	0x08002a87
 80026c8:	08002a9b 	.word	0x08002a9b
 80026cc:	08002aaf 	.word	0x08002aaf
 80026d0:	08002ac3 	.word	0x08002ac3
 80026d4:	08002ad7 	.word	0x08002ad7
 80026d8:	08002b3b 	.word	0x08002b3b
 80026dc:	08002b4f 	.word	0x08002b4f
 80026e0:	08002b63 	.word	0x08002b63
 80026e4:	08000c35 	.word	0x08000c35

080026e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8083 	beq.w	8002836 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d025      	beq.n	8002786 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e017      	b.n	8002786 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	e00d      	b.n	8002786 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	e003      	b.n	8002786 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d026      	beq.n	80027de <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e017      	b.n	80027de <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	e00d      	b.n	80027de <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e003      	b.n	80027de <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d026      	beq.n	8002836 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e017      	b.n	8002836 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e00d      	b.n	8002836 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	e003      	b.n	8002836 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002850:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2208      	movs	r2, #8
 8002874:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2210      	movs	r2, #16
 80028c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2208      	movs	r2, #8
 80028dc:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2208      	movs	r2, #8
 8002944:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d07b      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d072      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d043      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03e      	beq.n	8002a48 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029d0:	2b60      	cmp	r3, #96	; 0x60
 80029d2:	d02b      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x344>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d82e      	bhi.n	8002a36 <HAL_CAN_IRQHandler+0x34e>
 80029d8:	2b50      	cmp	r3, #80	; 0x50
 80029da:	d022      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x33a>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d82a      	bhi.n	8002a36 <HAL_CAN_IRQHandler+0x34e>
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d019      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x330>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d826      	bhi.n	8002a36 <HAL_CAN_IRQHandler+0x34e>
 80029e8:	2b30      	cmp	r3, #48	; 0x30
 80029ea:	d010      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x326>
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d822      	bhi.n	8002a36 <HAL_CAN_IRQHandler+0x34e>
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d002      	beq.n	80029fa <HAL_CAN_IRQHandler+0x312>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d005      	beq.n	8002a04 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029f8:	e01d      	b.n	8002a36 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a02:	e019      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a0c:	e014      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a16:	e00f      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a20:	e00a      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a2a:	e005      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a34:	e000      	b.n	8002a38 <HAL_CAN_IRQHandler+0x350>
            break;
 8002a36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <__NVIC_EnableIRQ+0x38>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b07      	cmp	r3, #7
 8002ce0:	d00f      	beq.n	8002d02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d00c      	beq.n	8002d02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d009      	beq.n	8002d02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d006      	beq.n	8002d02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d003      	beq.n	8002d02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cfa:	2190      	movs	r1, #144	; 0x90
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002cfe:	f7fe fb4a 	bl	8001396 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff ff38 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	0800a568 	.word	0x0800a568

08002d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d903      	bls.n	8002d34 <HAL_NVIC_SetPriority+0x20>
 8002d2c:	21a8      	movs	r1, #168	; 0xa8
 8002d2e:	480e      	ldr	r0, [pc, #56]	; (8002d68 <HAL_NVIC_SetPriority+0x54>)
 8002d30:	f7fe fb31 	bl	8001396 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	d903      	bls.n	8002d42 <HAL_NVIC_SetPriority+0x2e>
 8002d3a:	21a9      	movs	r1, #169	; 0xa9
 8002d3c:	480a      	ldr	r0, [pc, #40]	; (8002d68 <HAL_NVIC_SetPriority+0x54>)
 8002d3e:	f7fe fb2a 	bl	8001396 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d42:	f7ff ff3d 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	6978      	ldr	r0, [r7, #20]
 8002d4e:	f7ff ff8d 	bl	8002c6c <NVIC_EncodePriority>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff5c 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d60:	bf00      	nop
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	0800a568 	.word	0x0800a568

08002d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da03      	bge.n	8002d86 <HAL_NVIC_EnableIRQ+0x1a>
 8002d7e:	21bc      	movs	r1, #188	; 0xbc
 8002d80:	4805      	ldr	r0, [pc, #20]	; (8002d98 <HAL_NVIC_EnableIRQ+0x2c>)
 8002d82:	f7fe fb08 	bl	8001396 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff26 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	0800a568 	.word	0x0800a568

08002d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7fe fe18 	bl	80019dc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e203      	b.n	80031c0 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a8b      	ldr	r2, [pc, #556]	; (8002fec <HAL_DMA_Init+0x250>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d04e      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ff0 <HAL_DMA_Init+0x254>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d049      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a88      	ldr	r2, [pc, #544]	; (8002ff4 <HAL_DMA_Init+0x258>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d044      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a87      	ldr	r2, [pc, #540]	; (8002ff8 <HAL_DMA_Init+0x25c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d03f      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a85      	ldr	r2, [pc, #532]	; (8002ffc <HAL_DMA_Init+0x260>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d03a      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a84      	ldr	r2, [pc, #528]	; (8003000 <HAL_DMA_Init+0x264>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d035      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a82      	ldr	r2, [pc, #520]	; (8003004 <HAL_DMA_Init+0x268>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d030      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a81      	ldr	r2, [pc, #516]	; (8003008 <HAL_DMA_Init+0x26c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02b      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7f      	ldr	r2, [pc, #508]	; (800300c <HAL_DMA_Init+0x270>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d026      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7e      	ldr	r2, [pc, #504]	; (8003010 <HAL_DMA_Init+0x274>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d021      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7c      	ldr	r2, [pc, #496]	; (8003014 <HAL_DMA_Init+0x278>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01c      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7b      	ldr	r2, [pc, #492]	; (8003018 <HAL_DMA_Init+0x27c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d017      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a79      	ldr	r2, [pc, #484]	; (800301c <HAL_DMA_Init+0x280>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d012      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a78      	ldr	r2, [pc, #480]	; (8003020 <HAL_DMA_Init+0x284>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a76      	ldr	r2, [pc, #472]	; (8003024 <HAL_DMA_Init+0x288>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d008      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_DMA_Init+0x28c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_Init+0xc4>
 8002e58:	21b7      	movs	r1, #183	; 0xb7
 8002e5a:	4874      	ldr	r0, [pc, #464]	; (800302c <HAL_DMA_Init+0x290>)
 8002e5c:	f7fe fa9b 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d026      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e70:	d021      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002e84:	d017      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e8e:	d012      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002e98:	d00d      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ea2:	d008      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002eac:	d003      	beq.n	8002eb6 <HAL_DMA_Init+0x11a>
 8002eae:	21b8      	movs	r1, #184	; 0xb8
 8002eb0:	485e      	ldr	r0, [pc, #376]	; (800302c <HAL_DMA_Init+0x290>)
 8002eb2:	f7fe fa70 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_DMA_Init+0x13a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_Init+0x13a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d003      	beq.n	8002ed6 <HAL_DMA_Init+0x13a>
 8002ece:	21b9      	movs	r1, #185	; 0xb9
 8002ed0:	4856      	ldr	r0, [pc, #344]	; (800302c <HAL_DMA_Init+0x290>)
 8002ed2:	f7fe fa60 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Init+0x154>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_Init+0x154>
 8002ee8:	21ba      	movs	r1, #186	; 0xba
 8002eea:	4850      	ldr	r0, [pc, #320]	; (800302c <HAL_DMA_Init+0x290>)
 8002eec:	f7fe fa53 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d007      	beq.n	8002f0a <HAL_DMA_Init+0x16e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_DMA_Init+0x16e>
 8002f02:	21bb      	movs	r1, #187	; 0xbb
 8002f04:	4849      	ldr	r0, [pc, #292]	; (800302c <HAL_DMA_Init+0x290>)
 8002f06:	f7fe fa46 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_DMA_Init+0x192>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Init+0x192>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d003      	beq.n	8002f2e <HAL_DMA_Init+0x192>
 8002f26:	21bc      	movs	r1, #188	; 0xbc
 8002f28:	4840      	ldr	r0, [pc, #256]	; (800302c <HAL_DMA_Init+0x290>)
 8002f2a:	f7fe fa34 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <HAL_DMA_Init+0x1b6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x1b6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f48:	d003      	beq.n	8002f52 <HAL_DMA_Init+0x1b6>
 8002f4a:	21bd      	movs	r1, #189	; 0xbd
 8002f4c:	4837      	ldr	r0, [pc, #220]	; (800302c <HAL_DMA_Init+0x290>)
 8002f4e:	f7fe fa22 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_DMA_Init+0x1d8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f62:	d007      	beq.n	8002f74 <HAL_DMA_Init+0x1d8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_Init+0x1d8>
 8002f6c:	21be      	movs	r1, #190	; 0xbe
 8002f6e:	482f      	ldr	r0, [pc, #188]	; (800302c <HAL_DMA_Init+0x290>)
 8002f70:	f7fe fa11 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <HAL_DMA_Init+0x206>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d00d      	beq.n	8002fa2 <HAL_DMA_Init+0x206>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f8e:	d008      	beq.n	8002fa2 <HAL_DMA_Init+0x206>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA_Init+0x206>
 8002f9a:	21bf      	movs	r1, #191	; 0xbf
 8002f9c:	4823      	ldr	r0, [pc, #140]	; (800302c <HAL_DMA_Init+0x290>)
 8002f9e:	f7fe f9fa 	bl	8001396 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_Init+0x21e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d003      	beq.n	8002fba <HAL_DMA_Init+0x21e>
 8002fb2:	21c0      	movs	r1, #192	; 0xc0
 8002fb4:	481d      	ldr	r0, [pc, #116]	; (800302c <HAL_DMA_Init+0x290>)
 8002fb6:	f7fe f9ee 	bl	8001396 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d064      	beq.n	800308c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d032      	beq.n	8003030 <HAL_DMA_Init+0x294>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d02e      	beq.n	8003030 <HAL_DMA_Init+0x294>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d02a      	beq.n	8003030 <HAL_DMA_Init+0x294>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d026      	beq.n	8003030 <HAL_DMA_Init+0x294>
 8002fe2:	21c5      	movs	r1, #197	; 0xc5
 8002fe4:	4811      	ldr	r0, [pc, #68]	; (800302c <HAL_DMA_Init+0x290>)
 8002fe6:	f7fe f9d6 	bl	8001396 <assert_failed>
 8002fea:	e021      	b.n	8003030 <HAL_DMA_Init+0x294>
 8002fec:	40026010 	.word	0x40026010
 8002ff0:	40026028 	.word	0x40026028
 8002ff4:	40026040 	.word	0x40026040
 8002ff8:	40026058 	.word	0x40026058
 8002ffc:	40026070 	.word	0x40026070
 8003000:	40026088 	.word	0x40026088
 8003004:	400260a0 	.word	0x400260a0
 8003008:	400260b8 	.word	0x400260b8
 800300c:	40026410 	.word	0x40026410
 8003010:	40026428 	.word	0x40026428
 8003014:	40026440 	.word	0x40026440
 8003018:	40026458 	.word	0x40026458
 800301c:	40026470 	.word	0x40026470
 8003020:	40026488 	.word	0x40026488
 8003024:	400264a0 	.word	0x400264a0
 8003028:	400264b8 	.word	0x400264b8
 800302c:	0800a5a4 	.word	0x0800a5a4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <HAL_DMA_Init+0x2c2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003040:	d00d      	beq.n	800305e <HAL_DMA_Init+0x2c2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304a:	d008      	beq.n	800305e <HAL_DMA_Init+0x2c2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003054:	d003      	beq.n	800305e <HAL_DMA_Init+0x2c2>
 8003056:	21c6      	movs	r1, #198	; 0xc6
 8003058:	485b      	ldr	r0, [pc, #364]	; (80031c8 <HAL_DMA_Init+0x42c>)
 800305a:	f7fe f99c 	bl	8001396 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <HAL_DMA_Init+0x2f0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306e:	d00d      	beq.n	800308c <HAL_DMA_Init+0x2f0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003078:	d008      	beq.n	800308c <HAL_DMA_Init+0x2f0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003082:	d003      	beq.n	800308c <HAL_DMA_Init+0x2f0>
 8003084:	21c7      	movs	r1, #199	; 0xc7
 8003086:	4850      	ldr	r0, [pc, #320]	; (80031c8 <HAL_DMA_Init+0x42c>)
 8003088:	f7fe f985 	bl	8001396 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ac:	e00f      	b.n	80030ce <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ae:	f7fe fc95 	bl	80019dc <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d908      	bls.n	80030ce <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e078      	b.n	80031c0 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e8      	bne.n	80030ae <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_DMA_Init+0x430>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4313      	orrs	r3, r2
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b04      	cmp	r3, #4
 8003160:	d117      	bne.n	8003192 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa1b 	bl	80035b0 <DMA_CheckFifoParam>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2240      	movs	r2, #64	; 0x40
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800318e:	2301      	movs	r3, #1
 8003190:	e016      	b.n	80031c0 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9d2 	bl	8003544 <DMA_CalcBaseAndBitshift>
 80031a0:	4603      	mov	r3, r0
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	223f      	movs	r2, #63	; 0x3f
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	0800a5a4 	.word	0x0800a5a4
 80031cc:	f010803f 	.word	0xf010803f

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00c      	b.n	8003208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <HAL_DMA_IRQHandler+0x248>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a8e      	ldr	r2, [pc, #568]	; (8003460 <HAL_DMA_IRQHandler+0x24c>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2208      	movs	r2, #8
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2204      	movs	r2, #4
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2210      	movs	r2, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d043      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2210      	movs	r2, #16
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d024      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	e01f      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e016      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2220      	movs	r2, #32
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 808f 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8087 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2220      	movs	r2, #32
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d136      	bne.n	800342c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_IRQHandler+0x1da>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
        }
        return;
 800342a:	e079      	b.n	8003520 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e02c      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000
 8003460:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e01e      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d032      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d022      	beq.n	800350e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2205      	movs	r2, #5
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d307      	bcc.n	80034fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f2      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x2cc>
 80034fa:	e000      	b.n	80034fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003520:	bf00      	nop
    }
  }
}
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003536:	b2db      	uxtb	r3, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3b10      	subs	r3, #16
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <DMA_CalcBaseAndBitshift+0x68>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d909      	bls.n	8003586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	1d1a      	adds	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58
 8003584:	e007      	b.n	8003596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	aaaaaaab 	.word	0xaaaaaaab
 80035ac:	0800a754 	.word	0x0800a754

080035b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11f      	bne.n	800360a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d856      	bhi.n	800367e <DMA_CheckFifoParam+0xce>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <DMA_CheckFifoParam+0x28>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	080035fb 	.word	0x080035fb
 80035e0:	080035e9 	.word	0x080035e9
 80035e4:	0800367f 	.word	0x0800367f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d046      	beq.n	8003682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f8:	e043      	b.n	8003682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003602:	d140      	bne.n	8003686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003608:	e03d      	b.n	8003686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	d121      	bne.n	8003658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d837      	bhi.n	800368a <DMA_CheckFifoParam+0xda>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <DMA_CheckFifoParam+0x70>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003631 	.word	0x08003631
 8003624:	08003637 	.word	0x08003637
 8003628:	08003631 	.word	0x08003631
 800362c:	08003649 	.word	0x08003649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e030      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d025      	beq.n	800368e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e022      	b.n	800368e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003650:	d11f      	bne.n	8003692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003656:	e01c      	b.n	8003692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d903      	bls.n	8003666 <DMA_CheckFifoParam+0xb6>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d003      	beq.n	800366c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003664:	e018      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      break;
 800366a:	e015      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e00b      	b.n	8003696 <DMA_CheckFifoParam+0xe6>
      break;
 800367e:	bf00      	nop
 8003680:	e00a      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003682:	bf00      	nop
 8003684:	e008      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e006      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e004      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e002      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;   
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
    }
  } 
  
  return status; 
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <HAL_GPIO_Init+0xf8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01f      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_GPIO_Init+0xfc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01b      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <HAL_GPIO_Init+0x100>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d017      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a34      	ldr	r2, [pc, #208]	; (80037ac <HAL_GPIO_Init+0x104>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_GPIO_Init+0x108>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_GPIO_Init+0x10c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <HAL_GPIO_Init+0x110>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_GPIO_Init+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x5e>
 80036fe:	21ac      	movs	r1, #172	; 0xac
 8003700:	482f      	ldr	r0, [pc, #188]	; (80037c0 <HAL_GPIO_Init+0x118>)
 8003702:	f7fd fe48 	bl	8001396 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_GPIO_Init+0x74>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x7c>
 800371c:	21ad      	movs	r1, #173	; 0xad
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <HAL_GPIO_Init+0x118>)
 8003720:	f7fd fe39 	bl	8001396 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d035      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d031      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b11      	cmp	r3, #17
 800373a:	d02d      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d029      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b12      	cmp	r3, #18
 800374a:	d025      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003754:	d020      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800375e:	d01b      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003768:	d016      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003772:	d011      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800377c:	d00c      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003786:	d007      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
 8003790:	21ae      	movs	r1, #174	; 0xae
 8003792:	480b      	ldr	r0, [pc, #44]	; (80037c0 <HAL_GPIO_Init+0x118>)
 8003794:	f7fd fdff 	bl	8001396 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e289      	b.n	8003cb2 <HAL_GPIO_Init+0x60a>
 800379e:	bf00      	nop
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40020400 	.word	0x40020400
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40021400 	.word	0x40021400
 80037b8:	40021800 	.word	0x40021800
 80037bc:	40021c00 	.word	0x40021c00
 80037c0:	0800a5dc 	.word	0x0800a5dc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037c4:	2201      	movs	r2, #1
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	f040 8265 	bne.w	8003cac <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d005      	beq.n	80037fa <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d144      	bne.n	8003884 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00f      	beq.n	8003822 <HAL_GPIO_Init+0x17a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d00b      	beq.n	8003822 <HAL_GPIO_Init+0x17a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d007      	beq.n	8003822 <HAL_GPIO_Init+0x17a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x17a>
 800381a:	21c0      	movs	r1, #192	; 0xc0
 800381c:	4831      	ldr	r0, [pc, #196]	; (80038e4 <HAL_GPIO_Init+0x23c>)
 800381e:	f7fd fdba 	bl	8001396 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b03      	cmp	r3, #3
 800388e:	d02b      	beq.n	80038e8 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_GPIO_Init+0x208>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d007      	beq.n	80038b0 <HAL_GPIO_Init+0x208>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x208>
 80038a8:	21d1      	movs	r1, #209	; 0xd1
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <HAL_GPIO_Init+0x23c>)
 80038ac:	f7fd fd73 	bl	8001396 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x240>
 80038e2:	bf00      	nop
 80038e4:	0800a5dc 	.word	0x0800a5dc
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	f040 810c 	bne.w	8003b0e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80e3 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b09      	cmp	r3, #9
 8003906:	f000 80de 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80d9 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80d4 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80cf 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80ca 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	f000 80c5 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	f000 80c0 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b02      	cmp	r3, #2
 800394c:	f000 80bb 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b02      	cmp	r3, #2
 8003956:	f000 80b6 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b02      	cmp	r3, #2
 8003960:	f000 80b1 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b03      	cmp	r3, #3
 800396a:	f000 80ac 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b04      	cmp	r3, #4
 8003974:	f000 80a7 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b04      	cmp	r3, #4
 800397e:	f000 80a2 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b04      	cmp	r3, #4
 8003988:	f000 809d 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b05      	cmp	r3, #5
 8003992:	f000 8098 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b05      	cmp	r3, #5
 800399c:	f000 8093 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	f000 808e 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	f000 8089 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	f000 8084 	beq.w	8003ac6 <HAL_GPIO_Init+0x41e>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d07f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d07b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b07      	cmp	r3, #7
 80039d4:	d077      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d073      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d06f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d06b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d067      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	d063      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b0a      	cmp	r3, #10
 8003a04:	d05f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b0a      	cmp	r3, #10
 8003a0c:	d05b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b0b      	cmp	r3, #11
 8003a14:	d057      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d053      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d04f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b0d      	cmp	r3, #13
 8003a2c:	d04b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d047      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d043      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d03f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d03b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d037      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d033      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d02f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d027      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b07      	cmp	r3, #7
 8003a7c:	d023      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b07      	cmp	r3, #7
 8003a84:	d01f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b07      	cmp	r3, #7
 8003a94:	d017      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d013      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d00f      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b09      	cmp	r3, #9
 8003aac:	d00b      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b0a      	cmp	r3, #10
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x41e>
 8003abe:	21de      	movs	r1, #222	; 0xde
 8003ac0:	4880      	ldr	r0, [pc, #512]	; (8003cc4 <HAL_GPIO_Init+0x61c>)
 8003ac2:	f7fd fc68 	bl	8001396 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	08da      	lsrs	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3208      	adds	r2, #8
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0203 	and.w	r2, r3, #3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80ae 	beq.w	8003cac <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_GPIO_Init+0x620>)
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_GPIO_Init+0x620>)
 8003b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_GPIO_Init+0x620>)
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6c:	4a57      	ldr	r2, [pc, #348]	; (8003ccc <HAL_GPIO_Init+0x624>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a4f      	ldr	r2, [pc, #316]	; (8003cd0 <HAL_GPIO_Init+0x628>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d025      	beq.n	8003be4 <HAL_GPIO_Init+0x53c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <HAL_GPIO_Init+0x62c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01f      	beq.n	8003be0 <HAL_GPIO_Init+0x538>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_GPIO_Init+0x630>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d019      	beq.n	8003bdc <HAL_GPIO_Init+0x534>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a4c      	ldr	r2, [pc, #304]	; (8003cdc <HAL_GPIO_Init+0x634>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_GPIO_Init+0x530>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_GPIO_Init+0x638>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_GPIO_Init+0x52c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_GPIO_Init+0x63c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <HAL_GPIO_Init+0x528>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a49      	ldr	r2, [pc, #292]	; (8003ce8 <HAL_GPIO_Init+0x640>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_GPIO_Init+0x524>
 8003bc8:	2306      	movs	r3, #6
 8003bca:	e00c      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003bcc:	2307      	movs	r3, #7
 8003bce:	e00a      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003bd0:	2305      	movs	r3, #5
 8003bd2:	e008      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	e006      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e004      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e002      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_GPIO_Init+0x53e>
 8003be4:	2300      	movs	r3, #0
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f002 0203 	and.w	r2, r2, #3
 8003bec:	0092      	lsls	r2, r2, #2
 8003bee:	4093      	lsls	r3, r2
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf6:	4935      	ldr	r1, [pc, #212]	; (8003ccc <HAL_GPIO_Init+0x624>)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c04:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c28:	4a30      	ldr	r2, [pc, #192]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c52:	4a26      	ldr	r2, [pc, #152]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca6:	4a11      	ldr	r2, [pc, #68]	; (8003cec <HAL_GPIO_Init+0x644>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	f67f ad85 	bls.w	80037c4 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	0800a5dc 	.word	0x0800a5dc
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	40020800 	.word	0x40020800
 8003cdc:	40020c00 	.word	0x40020c00
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40021400 	.word	0x40021400
 8003ce8:	40021800 	.word	0x40021800
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_GPIO_WritePin+0x20>
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_GPIO_WritePin+0x2a>
 8003d10:	f240 119d 	movw	r1, #413	; 0x19d
 8003d14:	480e      	ldr	r0, [pc, #56]	; (8003d50 <HAL_GPIO_WritePin+0x60>)
 8003d16:	f7fd fb3e 	bl	8001396 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d1a:	787b      	ldrb	r3, [r7, #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_GPIO_WritePin+0x40>
 8003d20:	787b      	ldrb	r3, [r7, #1]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d004      	beq.n	8003d30 <HAL_GPIO_WritePin+0x40>
 8003d26:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003d2a:	4809      	ldr	r0, [pc, #36]	; (8003d50 <HAL_GPIO_WritePin+0x60>)
 8003d2c:	f7fd fb33 	bl	8001396 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	0800a5dc 	.word	0x0800a5dc

08003d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1bd      	b.n	80040e2 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a93      	ldr	r2, [pc, #588]	; (8003fb8 <HAL_I2C_Init+0x264>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <HAL_I2C_Init+0x3a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a91      	ldr	r2, [pc, #580]	; (8003fbc <HAL_I2C_Init+0x268>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_I2C_Init+0x3a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a90      	ldr	r2, [pc, #576]	; (8003fc0 <HAL_I2C_Init+0x26c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_I2C_Init+0x3a>
 8003d84:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003d88:	488e      	ldr	r0, [pc, #568]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003d8a:	f7fd fb04 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_I2C_Init+0x4c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a8b      	ldr	r2, [pc, #556]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d904      	bls.n	8003daa <HAL_I2C_Init+0x56>
 8003da0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003da4:	4887      	ldr	r0, [pc, #540]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003da6:	f7fd faf6 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_I2C_Init+0x72>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d004      	beq.n	8003dc6 <HAL_I2C_Init+0x72>
 8003dbc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003dc0:	4880      	ldr	r0, [pc, #512]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003dc2:	f7fd fae8 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_I2C_Init+0x8c>
 8003dd6:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003dda:	487a      	ldr	r0, [pc, #488]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003ddc:	f7fd fadb 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de8:	d009      	beq.n	8003dfe <HAL_I2C_Init+0xaa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003df2:	d004      	beq.n	8003dfe <HAL_I2C_Init+0xaa>
 8003df4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003df8:	4872      	ldr	r0, [pc, #456]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003dfa:	f7fd facc 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_I2C_Init+0xc4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d004      	beq.n	8003e18 <HAL_I2C_Init+0xc4>
 8003e0e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003e12:	486c      	ldr	r0, [pc, #432]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003e14:	f7fd fabf 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_I2C_Init+0xda>
 8003e24:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003e28:	4866      	ldr	r0, [pc, #408]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003e2a:	f7fd fab4 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_I2C_Init+0xf4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d004      	beq.n	8003e48 <HAL_I2C_Init+0xf4>
 8003e3e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003e42:	4860      	ldr	r0, [pc, #384]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003e44:	f7fd faa7 	bl	8001396 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_I2C_Init+0x10e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d004      	beq.n	8003e62 <HAL_I2C_Init+0x10e>
 8003e58:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003e5c:	4859      	ldr	r0, [pc, #356]	; (8003fc4 <HAL_I2C_Init+0x270>)
 8003e5e:	f7fd fa9a 	bl	8001396 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd f936 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f002 fe48 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <HAL_I2C_Init+0x278>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x180>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <HAL_I2C_Init+0x27c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x18e>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a3f      	ldr	r2, [pc, #252]	; (8003fd4 <HAL_I2C_Init+0x280>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0fb      	b.n	80040e2 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_I2C_Init+0x284>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <HAL_I2C_Init+0x278>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0x1d0>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0x1e4>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <HAL_I2C_Init+0x288>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	491e      	ldr	r1, [pc, #120]	; (8003fcc <HAL_I2C_Init+0x278>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x238>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x234>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e065      	b.n	8004054 <HAL_I2C_Init+0x300>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e063      	b.n	8004054 <HAL_I2C_Init+0x300>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d125      	bne.n	8003fe0 <HAL_I2C_Init+0x28c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e026      	b.n	8004006 <HAL_I2C_Init+0x2b2>
 8003fb8:	40005400 	.word	0x40005400
 8003fbc:	40005800 	.word	0x40005800
 8003fc0:	40005c00 	.word	0x40005c00
 8003fc4:	0800a618 	.word	0x0800a618
 8003fc8:	00061a80 	.word	0x00061a80
 8003fcc:	000186a0 	.word	0x000186a0
 8003fd0:	001e847f 	.word	0x001e847f
 8003fd4:	003d08ff 	.word	0x003d08ff
 8003fd8:	431bde83 	.word	0x431bde83
 8003fdc:	10624dd3 	.word	0x10624dd3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e58      	subs	r0, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	0099      	lsls	r1, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Init+0x2ba>
 800400a:	2301      	movs	r3, #1
 800400c:	e022      	b.n	8004054 <HAL_I2C_Init+0x300>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <HAL_I2C_Init+0x2e0>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1e58      	subs	r0, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	440b      	add	r3, r1
 8004024:	fbb0 f3f3 	udiv	r3, r0, r3
 8004028:	3301      	adds	r3, #1
 800402a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	e00f      	b.n	8004054 <HAL_I2C_Init+0x300>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	6809      	ldr	r1, [r1, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6911      	ldr	r1, [r2, #16]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68d2      	ldr	r2, [r2, #12]
 800408e:	4311      	orrs	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	430b      	orrs	r3, r1
 8004096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop

080040ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	461a      	mov	r2, r3
 80040f8:	460b      	mov	r3, r1
 80040fa:	817b      	strh	r3, [r7, #10]
 80040fc:	4613      	mov	r3, r2
 80040fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004100:	f7fd fc6c 	bl	80019dc <HAL_GetTick>
 8004104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	f040 80e0 	bne.w	80042d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2319      	movs	r3, #25
 800411a:	2201      	movs	r2, #1
 800411c:	4970      	ldr	r1, [pc, #448]	; (80042e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f002 f8e6 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	e0d3      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2C_Master_Transmit+0x50>
 8004138:	2302      	movs	r3, #2
 800413a:	e0cc      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d007      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2221      	movs	r2, #33	; 0x21
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2210      	movs	r2, #16
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	893a      	ldrh	r2, [r7, #8]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041a4:	8979      	ldrh	r1, [r7, #10]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f001 fea8 	bl	8005f00 <I2C_MasterRequestWrite>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e08d      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041d0:	e066      	b.n	80042a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f002 f960 	bl	800649c <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_I2C_Master_Transmit+0x188>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	6a39      	ldr	r1, [r7, #32]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f002 f950 	bl	800651e <I2C_WaitOnBTFFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b04      	cmp	r3, #4
 800428a:	d107      	bne.n	800429c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e01a      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d194      	bne.n	80041d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
 80042f8:	4613      	mov	r3, r2
 80042fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7fd fb6e 	bl	80019dc <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	f040 820b 	bne.w	8004726 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2319      	movs	r3, #25
 8004316:	2201      	movs	r2, #1
 8004318:	497c      	ldr	r1, [pc, #496]	; (800450c <HAL_I2C_Master_Receive+0x224>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 ffe8 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	e1fe      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_I2C_Master_Receive+0x50>
 8004334:	2302      	movs	r3, #2
 8004336:	e1f7      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d007      	beq.n	800435e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2222      	movs	r2, #34	; 0x22
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2210      	movs	r2, #16
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a5c      	ldr	r2, [pc, #368]	; (8004510 <HAL_I2C_Master_Receive+0x228>)
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f001 fe2c 	bl	8006004 <I2C_MasterRequestRead>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e1b8      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d113      	bne.n	80043e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e18c      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d11b      	bne.n	8004426 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e16c      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	2b02      	cmp	r3, #2
 800442c:	d11b      	bne.n	8004466 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	e14c      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800448c:	e138      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 80f1 	bhi.w	800467a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b01      	cmp	r3, #1
 800449e:	d123      	bne.n	80044e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f002 f8ad 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e139      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044e6:	e10b      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d14e      	bne.n	800458e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2200      	movs	r2, #0
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <HAL_I2C_Master_Receive+0x22c>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f001 fef8 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e10e      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000
 8004514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800458c:	e0b8      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2200      	movs	r2, #0
 8004596:	4966      	ldr	r1, [pc, #408]	; (8004730 <HAL_I2C_Master_Receive+0x448>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f001 fea9 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0bf      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	2200      	movs	r2, #0
 80045f2:	494f      	ldr	r1, [pc, #316]	; (8004730 <HAL_I2C_Master_Receive+0x448>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f001 fe7b 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e091      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004678:	e042      	b.n	8004700 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f001 ffc0 	bl	8006604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e04c      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d118      	bne.n	8004700 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f aec2 	bne.w	800448e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	00010004 	.word	0x00010004

08004734 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d003      	beq.n	800476c <HAL_I2C_EV_IRQHandler+0x38>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	f040 80c1 	bne.w	80048ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800478c:	d003      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0x62>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004794:	d101      	bne.n	800479a <HAL_I2C_EV_IRQHandler+0x66>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_I2C_EV_IRQHandler+0x68>
 800479a:	2300      	movs	r3, #0
 800479c:	2b01      	cmp	r3, #1
 800479e:	f000 8132 	beq.w	8004a06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x92>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 ffa8 	bl	800670e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fd83 	bl	80052ca <I2C_Master_SB>
 80047c4:	e092      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fdf9 	bl	80053d6 <I2C_Master_ADD10>
 80047e4:	e082      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0xd2>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fe13 	bl	800542a <I2C_Master_ADDR>
 8004804:	e072      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d03b      	beq.n	800488a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	f000 80f3 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	09db      	lsrs	r3, r3, #7
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f9f3 	bl	8004c34 <I2C_MasterTransmit_TXE>
 800484e:	e04d      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80d6 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80cf 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800486c:	7bbb      	ldrb	r3, [r7, #14]
 800486e:	2b21      	cmp	r3, #33	; 0x21
 8004870:	d103      	bne.n	800487a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa7a 	bl	8004d6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004878:	e0c7      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	f040 80c4 	bne.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fae8 	bl	8004e58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004888:	e0bf      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	f000 80b7 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb5d 	bl	8004f80 <I2C_MasterReceive_RXNE>
 80048c6:	e011      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 809a 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8093 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fc06 	bl	80050f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ea:	e08e      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80048ec:	e08d      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e007      	b.n	8004910 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d012      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x20e>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	0a5b      	lsrs	r3, r3, #9
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 ffc4 	bl	80058c8 <I2C_Slave_ADDR>
 8004940:	e066      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x22e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fffe 	bl	800595c <I2C_Slave_STOPF>
 8004960:	e056      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	2b21      	cmp	r3, #33	; 0x21
 8004966:	d002      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x23a>
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	2b29      	cmp	r3, #41	; 0x29
 800496c:	d125      	bne.n	80049ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00f      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0a9b      	lsrs	r3, r3, #10
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 feda 	bl	800574c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004998:	e039      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d033      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a5b      	lsrs	r3, r3, #9
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02d      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 ff07 	bl	80057c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049b8:	e029      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00f      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	0a9b      	lsrs	r3, r3, #10
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 ff12 	bl	8005808 <I2C_SlaveReceive_RXNE>
 80049e4:	e014      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 ff40 	bl	8005884 <I2C_SlaveReceive_BTF>
 8004a04:	e004      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b08a      	sub	sp, #40	; 0x28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00e      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x4e>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	0a5b      	lsrs	r3, r3, #9
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x78>
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	0a9b      	lsrs	r3, r3, #10
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d03f      	beq.n	8004b1a <HAL_I2C_ER_IRQHandler+0x104>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d039      	beq.n	8004b1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004aa6:	7efb      	ldrb	r3, [r7, #27]
 8004aa8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ac0:	7ebb      	ldrb	r3, [r7, #26]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d112      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xd6>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xd6>
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d008      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b29      	cmp	r3, #41	; 0x29
 8004ad6:	d005      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0xce>
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	2b28      	cmp	r3, #40	; 0x28
 8004adc:	d106      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b21      	cmp	r3, #33	; 0x21
 8004ae2:	d103      	bne.n	8004aec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 f869 	bl	8005bbc <I2C_Slave_AF>
 8004aea:	e016      	b.n	8004b1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004afe:	7efb      	ldrb	r3, [r7, #27]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d002      	beq.n	8004b0a <HAL_I2C_ER_IRQHandler+0xf4>
 8004b04:	7efb      	ldrb	r3, [r7, #27]
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d107      	bne.n	8004b1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	0adb      	lsrs	r3, r3, #11
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <HAL_I2C_ER_IRQHandler+0x12e>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	f043 0308 	orr.w	r3, r3, #8
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 f8a0 	bl	8005c9c <I2C_ITError>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d150      	bne.n	8004cfc <I2C_MasterTransmit_TXE+0xc8>
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b21      	cmp	r3, #33	; 0x21
 8004c5e:	d14d      	bne.n	8004cfc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d01d      	beq.n	8004ca2 <I2C_MasterTransmit_TXE+0x6e>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d01a      	beq.n	8004ca2 <I2C_MasterTransmit_TXE+0x6e>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c72:	d016      	beq.n	8004ca2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2211      	movs	r2, #17
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ff62 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ca0:	e060      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d107      	bne.n	8004cec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff7d 	bl	8004be4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cea:	e03b      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff35 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cfa:	e033      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b21      	cmp	r3, #33	; 0x21
 8004d00:	d005      	beq.n	8004d0e <I2C_MasterTransmit_TXE+0xda>
 8004d02:	7bbb      	ldrb	r3, [r7, #14]
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d12d      	bne.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b22      	cmp	r3, #34	; 0x22
 8004d0c:	d12a      	bne.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d108      	bne.n	8004d2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d28:	e01c      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d103      	bne.n	8004d3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f88e 	bl	8004e58 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d3c:	e012      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d62:	e7ff      	b.n	8004d64 <I2C_MasterTransmit_TXE+0x130>
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b21      	cmp	r3, #33	; 0x21
 8004d84:	d164      	bne.n	8004e50 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004db4:	e04c      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d01d      	beq.n	8004df8 <I2C_MasterTransmit_BTF+0x8c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d01a      	beq.n	8004df8 <I2C_MasterTransmit_BTF+0x8c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dc8:	d016      	beq.n	8004df8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2211      	movs	r2, #17
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff feb7 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
}
 8004df6:	e02b      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d107      	bne.n	8004e42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fed2 	bl	8004be4 <HAL_I2C_MemTxCpltCallback>
}
 8004e40:	e006      	b.n	8004e50 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fe8a 	bl	8004b64 <HAL_I2C_MasterTxCpltCallback>
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11d      	bne.n	8004eac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10b      	bne.n	8004e90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e8e:	e073      	b.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	121b      	asrs	r3, r3, #8
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eaa:	e065      	b.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10b      	bne.n	8004ecc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004eca:	e055      	b.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d151      	bne.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b22      	cmp	r3, #34	; 0x22
 8004ed8:	d10d      	bne.n	8004ef6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ef4:	e040      	b.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b21      	cmp	r3, #33	; 0x21
 8004f04:	d112      	bne.n	8004f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f2a:	e025      	b.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d120      	bne.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b21      	cmp	r3, #33	; 0x21
 8004f3a:	d11d      	bne.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fe36 	bl	8004be4 <HAL_I2C_MemTxCpltCallback>
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b22      	cmp	r3, #34	; 0x22
 8004f92:	f040 80ac 	bne.w	80050ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d921      	bls.n	8004fe8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	f040 808c 	bne.w	80050ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004fe6:	e082      	b.n	80050ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d075      	beq.n	80050dc <I2C_MasterReceive_RXNE+0x15c>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d002      	beq.n	8004ffc <I2C_MasterReceive_RXNE+0x7c>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d16f      	bne.n	80050dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 facf 	bl	80065a0 <I2C_WaitOnSTOPRequestThroughIT>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d142      	bne.n	800508e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005026:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d10a      	bne.n	8005078 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fdc1 	bl	8004bf8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005076:	e03a      	b.n	80050ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2212      	movs	r2, #18
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fd76 	bl	8004b78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800508c:	e02f      	b.n	80050ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800509c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fd99 	bl	8004c0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050da:	e008      	b.n	80050ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	605a      	str	r2, [r3, #4]
}
 80050ec:	e7ff      	b.n	80050ee <I2C_MasterReceive_RXNE+0x16e>
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b04      	cmp	r3, #4
 800510c:	d11b      	bne.n	8005146 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005144:	e0bd      	b.n	80052c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d129      	bne.n	80051a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d00a      	beq.n	800517c <I2C_MasterReceive_BTF+0x86>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d007      	beq.n	800517c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051a2:	e08e      	b.n	80052c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d176      	bne.n	800529c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d002      	beq.n	80051ba <I2C_MasterReceive_BTF+0xc4>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d108      	bne.n	80051cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e019      	b.n	8005200 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d002      	beq.n	80051d8 <I2C_MasterReceive_BTF+0xe2>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d108      	bne.n	80051ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e00a      	b.n	8005200 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d007      	beq.n	8005200 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800525a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d10a      	bne.n	8005286 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fcba 	bl	8004bf8 <HAL_I2C_MemRxCpltCallback>
}
 8005284:	e01d      	b.n	80052c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2212      	movs	r2, #18
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fc6f 	bl	8004b78 <HAL_I2C_MasterRxCpltCallback>
}
 800529a:	e012      	b.n	80052c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d117      	bne.n	800530e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052f8:	e067      	b.n	80053ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	b2da      	uxtb	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	611a      	str	r2, [r3, #16]
}
 800530c:	e05d      	b.n	80053ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005316:	d133      	bne.n	8005380 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b21      	cmp	r3, #33	; 0x21
 8005322:	d109      	bne.n	8005338 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	e008      	b.n	800534a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <I2C_Master_SB+0x92>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d108      	bne.n	800536e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d032      	beq.n	80053ca <I2C_Master_SB+0x100>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02d      	beq.n	80053ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537c:	605a      	str	r2, [r3, #4]
}
 800537e:	e024      	b.n	80053ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10e      	bne.n	80053a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	b29b      	uxth	r3, r3
 800538e:	11db      	asrs	r3, r3, #7
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0306 	and.w	r3, r3, #6
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f063 030f 	orn	r3, r3, #15
 800539c:	b2da      	uxtb	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]
}
 80053a4:	e011      	b.n	80053ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10d      	bne.n	80053ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	11db      	asrs	r3, r3, #7
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0306 	and.w	r3, r3, #6
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f063 030e 	orn	r3, r3, #14
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <I2C_Master_ADD10+0x26>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00c      	beq.n	800541e <I2C_Master_ADD10+0x48>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800541c:	605a      	str	r2, [r3, #4]
  }
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800542a:	b480      	push	{r7}
 800542c:	b091      	sub	sp, #68	; 0x44
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b22      	cmp	r3, #34	; 0x22
 8005452:	f040 8169 	bne.w	8005728 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <I2C_Master_ADDR+0x54>
 800545e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d10b      	bne.n	800547e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	633b      	str	r3, [r7, #48]	; 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	633b      	str	r3, [r7, #48]	; 0x30
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	e160      	b.n	8005740 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11d      	bne.n	80054c2 <I2C_Master_ADDR+0x98>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800548e:	d118      	bne.n	80054c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	651a      	str	r2, [r3, #80]	; 0x50
 80054c0:	e13e      	b.n	8005740 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d113      	bne.n	80054f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054cc:	2300      	movs	r3, #0
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e115      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f040 808a 	bne.w	8005614 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005506:	d137      	bne.n	8005578 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005516:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005526:	d113      	bne.n	8005550 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005536:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	e0e7      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005550:	2300      	movs	r3, #0
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e0d3      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b08      	cmp	r3, #8
 800557c:	d02e      	beq.n	80055dc <I2C_Master_ADDR+0x1b2>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b20      	cmp	r3, #32
 8005582:	d02b      	beq.n	80055dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	2b12      	cmp	r3, #18
 8005588:	d102      	bne.n	8005590 <I2C_Master_ADDR+0x166>
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	2b01      	cmp	r3, #1
 800558e:	d125      	bne.n	80055dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	2b04      	cmp	r3, #4
 8005594:	d00e      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b02      	cmp	r3, #2
 800559a:	d00b      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d008      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e007      	b.n	80055c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	e0a1      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e085      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d14d      	bne.n	80056ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b04      	cmp	r3, #4
 8005622:	d016      	beq.n	8005652 <I2C_Master_ADDR+0x228>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	2b02      	cmp	r3, #2
 8005628:	d013      	beq.n	8005652 <I2C_Master_ADDR+0x228>
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b10      	cmp	r3, #16
 800562e:	d010      	beq.n	8005652 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e007      	b.n	8005662 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005660:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d117      	bne.n	80056a2 <I2C_Master_ADDR+0x278>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005678:	d00b      	beq.n	8005692 <I2C_Master_ADDR+0x268>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2b01      	cmp	r3, #1
 800567e:	d008      	beq.n	8005692 <I2C_Master_ADDR+0x268>
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	2b08      	cmp	r3, #8
 8005684:	d005      	beq.n	8005692 <I2C_Master_ADDR+0x268>
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b10      	cmp	r3, #16
 800568a:	d002      	beq.n	8005692 <I2C_Master_ADDR+0x268>
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	2b20      	cmp	r3, #32
 8005690:	d107      	bne.n	80056a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	e032      	b.n	8005720 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d8:	d117      	bne.n	800570a <I2C_Master_ADDR+0x2e0>
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056e0:	d00b      	beq.n	80056fa <I2C_Master_ADDR+0x2d0>
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d008      	beq.n	80056fa <I2C_Master_ADDR+0x2d0>
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d005      	beq.n	80056fa <I2C_Master_ADDR+0x2d0>
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d002      	beq.n	80056fa <I2C_Master_ADDR+0x2d0>
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d107      	bne.n	800570a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005708:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005726:	e00b      	b.n	8005740 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
}
 800573e:	e7ff      	b.n	8005740 <I2C_Master_ADDR+0x316>
 8005740:	bf00      	nop
 8005742:	3744      	adds	r7, #68	; 0x44
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02b      	beq.n	80057be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d114      	bne.n	80057be <I2C_SlaveTransmit_TXE+0x72>
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b29      	cmp	r3, #41	; 0x29
 8005798:	d111      	bne.n	80057be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2228      	movs	r2, #40	; 0x28
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff f9e7 	bl	8004b8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d011      	beq.n	80057fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02c      	beq.n	800587c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d114      	bne.n	800587c <I2C_SlaveReceive_RXNE+0x74>
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b2a      	cmp	r3, #42	; 0x2a
 8005856:	d111      	bne.n	800587c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2222      	movs	r2, #34	; 0x22
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2228      	movs	r2, #40	; 0x28
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff f992 	bl	8004ba0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058e2:	2b28      	cmp	r3, #40	; 0x28
 80058e4:	d127      	bne.n	8005936 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	81bb      	strh	r3, [r7, #12]
 8005918:	e002      	b.n	8005920 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005928:	89ba      	ldrh	r2, [r7, #12]
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff f940 	bl	8004bb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005934:	e00e      	b.n	8005954 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800597a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b8:	d172      	bne.n	8005aa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b22      	cmp	r3, #34	; 0x22
 80059be:	d002      	beq.n	80059c6 <I2C_Slave_STOPF+0x6a>
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b2a      	cmp	r3, #42	; 0x2a
 80059c4:	d135      	bne.n	8005a32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fd fd92 	bl	8003528 <HAL_DMA_GetState>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d049      	beq.n	8005a9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <I2C_Slave_STOPF+0x258>)
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd fbda 	bl	80031d0 <HAL_DMA_Abort_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d03d      	beq.n	8005a9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a30:	e035      	b.n	8005a9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fd5c 	bl	8003528 <HAL_DMA_GetState>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d014      	beq.n	8005aa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	4a4e      	ldr	r2, [pc, #312]	; (8005bb4 <I2C_Slave_STOPF+0x258>)
 8005a7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd fba4 	bl	80031d0 <HAL_DMA_Abort_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
 8005a9c:	e000      	b.n	8005aa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d03e      	beq.n	8005b28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d112      	bne.n	8005ade <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d112      	bne.n	8005b12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	f043 0204 	orr.w	r2, r3, #4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8b3 	bl	8005c9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b36:	e039      	b.n	8005bac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3c:	d109      	bne.n	8005b52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2228      	movs	r2, #40	; 0x28
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff f827 	bl	8004ba0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b28      	cmp	r3, #40	; 0x28
 8005b5c:	d111      	bne.n	8005b82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <I2C_Slave_STOPF+0x25c>)
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff f828 	bl	8004bd0 <HAL_I2C_ListenCpltCallback>
}
 8005b80:	e014      	b.n	8005bac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	2b22      	cmp	r3, #34	; 0x22
 8005b88:	d002      	beq.n	8005b90 <I2C_Slave_STOPF+0x234>
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b22      	cmp	r3, #34	; 0x22
 8005b8e:	d10d      	bne.n	8005bac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fe fffa 	bl	8004ba0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	080061a1 	.word	0x080061a1
 8005bb8:	ffff0000 	.word	0xffff0000

08005bbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d002      	beq.n	8005bde <I2C_Slave_AF+0x22>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d129      	bne.n	8005c32 <I2C_Slave_AF+0x76>
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b28      	cmp	r3, #40	; 0x28
 8005be2:	d126      	bne.n	8005c32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <I2C_Slave_AF+0xdc>)
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bf8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fe ffd0 	bl	8004bd0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c30:	e02e      	b.n	8005c90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b21      	cmp	r3, #33	; 0x21
 8005c36:	d126      	bne.n	8005c86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <I2C_Slave_AF+0xdc>)
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2221      	movs	r2, #33	; 0x21
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fe ff84 	bl	8004b8c <HAL_I2C_SlaveTxCpltCallback>
}
 8005c84:	e004      	b.n	8005c90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8e:	615a      	str	r2, [r3, #20]
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	ffff0000 	.word	0xffff0000

08005c9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d002      	beq.n	8005cc0 <I2C_ITError+0x24>
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d10a      	bne.n	8005cd6 <I2C_ITError+0x3a>
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b22      	cmp	r3, #34	; 0x22
 8005cc4:	d107      	bne.n	8005cd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cdc:	2b28      	cmp	r3, #40	; 0x28
 8005cde:	d107      	bne.n	8005cf0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2228      	movs	r2, #40	; 0x28
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cee:	e015      	b.n	8005d1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfe:	d00a      	beq.n	8005d16 <I2C_ITError+0x7a>
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b60      	cmp	r3, #96	; 0x60
 8005d04:	d007      	beq.n	8005d16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2a:	d162      	bne.n	8005df2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d020      	beq.n	8005d8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	4a6a      	ldr	r2, [pc, #424]	; (8005ef8 <I2C_ITError+0x25c>)
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd fa3a 	bl	80031d0 <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8089 	beq.w	8005e76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d86:	4610      	mov	r0, r2
 8005d88:	4798      	blx	r3
 8005d8a:	e074      	b.n	8005e76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	4a59      	ldr	r2, [pc, #356]	; (8005ef8 <I2C_ITError+0x25c>)
 8005d92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd fa19 	bl	80031d0 <HAL_DMA_Abort_IT>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d068      	beq.n	8005e76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d10b      	bne.n	8005dca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	e041      	b.n	8005e76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b60      	cmp	r3, #96	; 0x60
 8005dfc:	d125      	bne.n	8005e4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d10b      	bne.n	8005e32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fe feec 	bl	8004c20 <HAL_I2C_AbortCpltCallback>
 8005e48:	e015      	b.n	8005e76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e54:	2b40      	cmp	r3, #64	; 0x40
 8005e56:	d10b      	bne.n	8005e70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fe fecb 	bl	8004c0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10e      	bne.n	8005ea4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d109      	bne.n	8005ea4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d113      	bne.n	8005ef0 <I2C_ITError+0x254>
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	2b28      	cmp	r3, #40	; 0x28
 8005ecc:	d110      	bne.n	8005ef0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <I2C_ITError+0x260>)
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fe fe70 	bl	8004bd0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	080061a1 	.word	0x080061a1
 8005efc:	ffff0000 	.word	0xffff0000

08005f00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d006      	beq.n	8005f2a <I2C_MasterRequestWrite+0x2a>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d003      	beq.n	8005f2a <I2C_MasterRequestWrite+0x2a>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f28:	d108      	bne.n	8005f3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e00b      	b.n	8005f54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b12      	cmp	r3, #18
 8005f42:	d107      	bne.n	8005f54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f9c5 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7a:	d103      	bne.n	8005f84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e035      	b.n	8005ff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f90:	d108      	bne.n	8005fa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f92:	897b      	ldrh	r3, [r7, #10]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	e01b      	b.n	8005fdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fa4:	897b      	ldrh	r3, [r7, #10]
 8005fa6:	11db      	asrs	r3, r3, #7
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f003 0306 	and.w	r3, r3, #6
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f063 030f 	orn	r3, r3, #15
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	490e      	ldr	r1, [pc, #56]	; (8005ffc <I2C_MasterRequestWrite+0xfc>)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f9eb 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e010      	b.n	8005ff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4907      	ldr	r1, [pc, #28]	; (8006000 <I2C_MasterRequestWrite+0x100>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f9db 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	00010008 	.word	0x00010008
 8006000:	00010002 	.word	0x00010002

08006004 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	460b      	mov	r3, r1
 8006012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d006      	beq.n	800603e <I2C_MasterRequestRead+0x3a>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d003      	beq.n	800603e <I2C_MasterRequestRead+0x3a>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800603c:	d108      	bne.n	8006050 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e00b      	b.n	8006068 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	2b11      	cmp	r3, #17
 8006056:	d107      	bne.n	8006068 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f93b 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	d103      	bne.n	8006098 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e079      	b.n	8006190 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a4:	d108      	bne.n	80060b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060a6:	897b      	ldrh	r3, [r7, #10]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	611a      	str	r2, [r3, #16]
 80060b6:	e05f      	b.n	8006178 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060b8:	897b      	ldrh	r3, [r7, #10]
 80060ba:	11db      	asrs	r3, r3, #7
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0306 	and.w	r3, r3, #6
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f063 030f 	orn	r3, r3, #15
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4930      	ldr	r1, [pc, #192]	; (8006198 <I2C_MasterRequestRead+0x194>)
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f961 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e054      	b.n	8006190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060e6:	897b      	ldrh	r3, [r7, #10]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4929      	ldr	r1, [pc, #164]	; (800619c <I2C_MasterRequestRead+0x198>)
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f951 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e044      	b.n	8006190 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f8d9 	bl	80062f0 <I2C_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006152:	d103      	bne.n	800615c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e017      	b.n	8006190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006160:	897b      	ldrh	r3, [r7, #10]
 8006162:	11db      	asrs	r3, r3, #7
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 0306 	and.w	r3, r3, #6
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f063 030e 	orn	r3, r3, #14
 8006170:	b2da      	uxtb	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4907      	ldr	r1, [pc, #28]	; (800619c <I2C_MasterRequestRead+0x198>)
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f90d 	bl	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	00010008 	.word	0x00010008
 800619c:	00010002 	.word	0x00010002

080061a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061ba:	4b4b      	ldr	r3, [pc, #300]	; (80062e8 <I2C_DMAAbort+0x148>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	4a4a      	ldr	r2, [pc, #296]	; (80062ec <I2C_DMAAbort+0x14c>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0a1a      	lsrs	r2, r3, #8
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	00da      	lsls	r2, r3, #3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061e6:	e00a      	b.n	80061fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	d0ea      	beq.n	80061d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	2200      	movs	r2, #0
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	2200      	movs	r2, #0
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	2200      	movs	r2, #0
 8006242:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2200      	movs	r2, #0
 8006252:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b60      	cmp	r3, #96	; 0x60
 800626e:	d10e      	bne.n	800628e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2200      	movs	r2, #0
 8006284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7fe fcca 	bl	8004c20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800628c:	e027      	b.n	80062de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800628e:	7cfb      	ldrb	r3, [r7, #19]
 8006290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d117      	bne.n	80062c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2228      	movs	r2, #40	; 0x28
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062c6:	e007      	b.n	80062d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062d8:	6978      	ldr	r0, [r7, #20]
 80062da:	f7fe fc97 	bl	8004c0c <HAL_I2C_ErrorCallback>
}
 80062de:	bf00      	nop
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000000 	.word	0x20000000
 80062ec:	14f8b589 	.word	0x14f8b589

080062f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006300:	e025      	b.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d021      	beq.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630a:	f7fb fb67 	bl	80019dc <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e023      	b.n	8006396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10d      	bne.n	8006374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	43da      	mvns	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	e00c      	b.n	800638e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	429a      	cmp	r2, r3
 8006392:	d0b6      	beq.n	8006302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ac:	e051      	b.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063bc:	d123      	bne.n	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e046      	b.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640c:	d021      	beq.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fb fae5 	bl	80019dc <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d116      	bne.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e020      	b.n	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10c      	bne.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	43da      	mvns	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e00b      	b.n	800648e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	43da      	mvns	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d18d      	bne.n	80063ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a8:	e02d      	b.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f900 	bl	80066b0 <I2C_IsAcknowledgeFailed>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e02d      	b.n	8006516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d021      	beq.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c2:	f7fb fa8b 	bl	80019dc <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d116      	bne.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e007      	b.n	8006516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d1ca      	bne.n	80064aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800652a:	e02d      	b.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f8bf 	bl	80066b0 <I2C_IsAcknowledgeFailed>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e02d      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d021      	beq.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006544:	f7fb fa4a 	bl	80019dc <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	429a      	cmp	r2, r3
 8006552:	d302      	bcc.n	800655a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d116      	bne.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e007      	b.n	8006598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b04      	cmp	r3, #4
 8006594:	d1ca      	bne.n	800652c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	08db      	lsrs	r3, r3, #3
 80065b2:	4a13      	ldr	r2, [pc, #76]	; (8006600 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	0a1a      	lsrs	r2, r3, #8
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f043 0220 	orr.w	r2, r3, #32
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e008      	b.n	80065f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d0e9      	beq.n	80065c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20000000 	.word	0x20000000
 8006600:	14f8b589 	.word	0x14f8b589

08006604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006610:	e042      	b.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d119      	bne.n	8006654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0210 	mvn.w	r2, #16
 8006628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e029      	b.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006654:	f7fb f9c2 	bl	80019dc <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d116      	bne.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e007      	b.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d1b5      	bne.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c6:	d11b      	bne.n	8006700 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f043 0204 	orr.w	r2, r3, #4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800671e:	d103      	bne.n	8006728 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006726:	e007      	b.n	8006738 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006730:	d102      	bne.n	8006738 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2208      	movs	r2, #8
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675c:	6413      	str	r3, [r2, #64]	; 0x40
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800676c:	2201      	movs	r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006770:	f7fb f934 	bl	80019dc <HAL_GetTick>
 8006774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006776:	e009      	b.n	800678c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006778:	f7fb f930 	bl	80019dc <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006786:	d901      	bls.n	800678c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e01f      	b.n	80067cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <HAL_PWREx_EnableOverDrive+0x98>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	d1ee      	bne.n	8006778 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067a0:	f7fb f91c 	bl	80019dc <HAL_GetTick>
 80067a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067a6:	e009      	b.n	80067bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067a8:	f7fb f918 	bl	80019dc <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b6:	d901      	bls.n	80067bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e007      	b.n	80067cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_PWREx_EnableOverDrive+0x98>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067c8:	d1ee      	bne.n	80067a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40023800 	.word	0x40023800
 80067d8:	420e0040 	.word	0x420e0040
 80067dc:	40007000 	.word	0x40007000
 80067e0:	420e0044 	.word	0x420e0044

080067e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e18c      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_RCC_ClockConfig+0x24>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d904      	bls.n	8006812 <HAL_RCC_ClockConfig+0x2e>
 8006808:	f240 215a 	movw	r1, #602	; 0x25a
 800680c:	4887      	ldr	r0, [pc, #540]	; (8006a2c <HAL_RCC_ClockConfig+0x248>)
 800680e:	f7fa fdc2 	bl	8001396 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d031      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d02e      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d02b      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d028      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d025      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b05      	cmp	r3, #5
 8006834:	d022      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b06      	cmp	r3, #6
 800683a:	d01f      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b07      	cmp	r3, #7
 8006840:	d01c      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d019      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b09      	cmp	r3, #9
 800684c:	d016      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b0a      	cmp	r3, #10
 8006852:	d013      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d010      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d00d      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b0d      	cmp	r3, #13
 8006864:	d00a      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b0e      	cmp	r3, #14
 800686a:	d007      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	d004      	beq.n	800687c <HAL_RCC_ClockConfig+0x98>
 8006872:	f240 215b 	movw	r1, #603	; 0x25b
 8006876:	486d      	ldr	r0, [pc, #436]	; (8006a2c <HAL_RCC_ClockConfig+0x248>)
 8006878:	f7fa fd8d 	bl	8001396 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b6c      	ldr	r3, [pc, #432]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d90c      	bls.n	80068a4 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b67      	ldr	r3, [pc, #412]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e136      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d049      	beq.n	8006944 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068bc:	4b5d      	ldr	r3, [pc, #372]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a5c      	ldr	r2, [pc, #368]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80068c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d4:	4b57      	ldr	r3, [pc, #348]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a56      	ldr	r2, [pc, #344]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80068da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d024      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d020      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b90      	cmp	r3, #144	; 0x90
 80068f6:	d01c      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2ba0      	cmp	r3, #160	; 0xa0
 80068fe:	d018      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2bb0      	cmp	r3, #176	; 0xb0
 8006906:	d014      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2bc0      	cmp	r3, #192	; 0xc0
 800690e:	d010      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2bd0      	cmp	r3, #208	; 0xd0
 8006916:	d00c      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2be0      	cmp	r3, #224	; 0xe0
 800691e:	d008      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2bf0      	cmp	r3, #240	; 0xf0
 8006926:	d004      	beq.n	8006932 <HAL_RCC_ClockConfig+0x14e>
 8006928:	f240 217e 	movw	r1, #638	; 0x27e
 800692c:	483f      	ldr	r0, [pc, #252]	; (8006a2c <HAL_RCC_ClockConfig+0x248>)
 800692e:	f7fa fd32 	bl	8001396 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006932:	4b40      	ldr	r3, [pc, #256]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	493d      	ldr	r1, [pc, #244]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 8006940:	4313      	orrs	r3, r2
 8006942:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d059      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_RCC_ClockConfig+0x196>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00c      	beq.n	800697a <HAL_RCC_ClockConfig+0x196>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d008      	beq.n	800697a <HAL_RCC_ClockConfig+0x196>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d004      	beq.n	800697a <HAL_RCC_ClockConfig+0x196>
 8006970:	f240 2185 	movw	r1, #645	; 0x285
 8006974:	482d      	ldr	r0, [pc, #180]	; (8006a2c <HAL_RCC_ClockConfig+0x248>)
 8006976:	f7fa fd0e 	bl	8001396 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d107      	bne.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006982:	4b2c      	ldr	r3, [pc, #176]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d119      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0bf      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d003      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e0af      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0a7      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 0203 	bic.w	r2, r3, #3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4919      	ldr	r1, [pc, #100]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069d4:	f7fb f802 	bl	80019dc <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069dc:	f7fa fffe 	bl	80019dc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e08f      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <HAL_RCC_ClockConfig+0x250>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 020c 	and.w	r2, r3, #12
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d1eb      	bne.n	80069dc <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a04:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d212      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_RCC_ClockConfig+0x24c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d007      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e072      	b.n	8006b12 <HAL_RCC_ClockConfig+0x32e>
 8006a2c:	0800a650 	.word	0x0800a650
 8006a30:	40023c00 	.word	0x40023c00
 8006a34:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d025      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d018      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x29a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d013      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x29a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a5e:	d00e      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x29a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006a68:	d009      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x29a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006a72:	d004      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x29a>
 8006a74:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006a78:	4828      	ldr	r0, [pc, #160]	; (8006b1c <HAL_RCC_ClockConfig+0x338>)
 8006a7a:	f7fa fc8c 	bl	8001396 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <HAL_RCC_ClockConfig+0x33c>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	4925      	ldr	r1, [pc, #148]	; (8006b20 <HAL_RCC_ClockConfig+0x33c>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d026      	beq.n	8006aea <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d018      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2f2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aac:	d013      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2f2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2f2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006ac0:	d009      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2f2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006aca:	d004      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x2f2>
 8006acc:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006ad0:	4812      	ldr	r0, [pc, #72]	; (8006b1c <HAL_RCC_ClockConfig+0x338>)
 8006ad2:	f7fa fc60 	bl	8001396 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ad6:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_RCC_ClockConfig+0x33c>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	490e      	ldr	r1, [pc, #56]	; (8006b20 <HAL_RCC_ClockConfig+0x33c>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aea:	f000 f887 	bl	8006bfc <HAL_RCC_GetSysClockFreq>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCC_ClockConfig+0x33c>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	490a      	ldr	r1, [pc, #40]	; (8006b24 <HAL_RCC_ClockConfig+0x340>)
 8006afc:	5ccb      	ldrb	r3, [r1, r3]
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <HAL_RCC_ClockConfig+0x344>)
 8006b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <HAL_RCC_ClockConfig+0x348>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fa fd66 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800a650 	.word	0x0800a650
 8006b20:	40023800 	.word	0x40023800
 8006b24:	0800a73c 	.word	0x0800a73c
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	20000004 	.word	0x20000004

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000000 	.word	0x20000000

08006b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b4c:	f7ff fff0 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0a9b      	lsrs	r3, r3, #10
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	; (8006b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800a74c 	.word	0x0800a74c

08006b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b74:	f7ff ffdc 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4903      	ldr	r1, [pc, #12]	; (8006b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	0800a74c 	.word	0x0800a74c

08006b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	220f      	movs	r2, #15
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0203 	and.w	r2, r3, #3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <HAL_RCC_GetClockConfig+0x60>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 020f 	and.w	r2, r3, #15
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	601a      	str	r2, [r3, #0]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	40023c00 	.word	0x40023c00

08006bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b0ae      	sub	sp, #184	; 0xb8
 8006c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c22:	4bcb      	ldr	r3, [pc, #812]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	f200 8206 	bhi.w	800703c <HAL_RCC_GetSysClockFreq+0x440>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	0800703d 	.word	0x0800703d
 8006c40:	0800703d 	.word	0x0800703d
 8006c44:	0800703d 	.word	0x0800703d
 8006c48:	08006c75 	.word	0x08006c75
 8006c4c:	0800703d 	.word	0x0800703d
 8006c50:	0800703d 	.word	0x0800703d
 8006c54:	0800703d 	.word	0x0800703d
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	0800703d 	.word	0x0800703d
 8006c60:	0800703d 	.word	0x0800703d
 8006c64:	0800703d 	.word	0x0800703d
 8006c68:	08006e6d 	.word	0x08006e6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4bb9      	ldr	r3, [pc, #740]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006c72:	e1e7      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c74:	4bb8      	ldr	r3, [pc, #736]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006c7a:	e1e3      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c7c:	4bb4      	ldr	r3, [pc, #720]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c88:	4bb1      	ldr	r3, [pc, #708]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d071      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c94:	4bae      	ldr	r3, [pc, #696]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	099b      	lsrs	r3, r3, #6
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ca0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cba:	4622      	mov	r2, r4
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	0159      	lsls	r1, r3, #5
 8006cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ccc:	0150      	lsls	r0, r2, #5
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	1a51      	subs	r1, r2, r1
 8006cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8006cd8:	4629      	mov	r1, r5
 8006cda:	eb63 0301 	sbc.w	r3, r3, r1
 8006cde:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006cec:	4649      	mov	r1, r9
 8006cee:	018b      	lsls	r3, r1, #6
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	018a      	lsls	r2, r1, #6
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	1a51      	subs	r1, r2, r1
 8006cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d00:	4649      	mov	r1, r9
 8006d02:	eb63 0301 	sbc.w	r3, r3, r1
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006d14:	4649      	mov	r1, r9
 8006d16:	00cb      	lsls	r3, r1, #3
 8006d18:	4641      	mov	r1, r8
 8006d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1e:	4641      	mov	r1, r8
 8006d20:	00ca      	lsls	r2, r1, #3
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	4622      	mov	r2, r4
 8006d2a:	189b      	adds	r3, r3, r2
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2e:	462b      	mov	r3, r5
 8006d30:	460a      	mov	r2, r1
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d44:	4629      	mov	r1, r5
 8006d46:	024b      	lsls	r3, r1, #9
 8006d48:	4621      	mov	r1, r4
 8006d4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d4e:	4621      	mov	r1, r4
 8006d50:	024a      	lsls	r2, r1, #9
 8006d52:	4610      	mov	r0, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006d68:	f7f9 fa52 	bl	8000210 <__aeabi_uldivmod>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4613      	mov	r3, r2
 8006d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d76:	e067      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d78:	4b75      	ldr	r3, [pc, #468]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	099b      	lsrs	r3, r3, #6
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d92:	2300      	movs	r3, #0
 8006d94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	462b      	mov	r3, r5
 8006d9e:	f04f 0000 	mov.w	r0, #0
 8006da2:	f04f 0100 	mov.w	r1, #0
 8006da6:	0159      	lsls	r1, r3, #5
 8006da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dac:	0150      	lsls	r0, r2, #5
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4621      	mov	r1, r4
 8006db4:	1a51      	subs	r1, r2, r1
 8006db6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006db8:	4629      	mov	r1, r5
 8006dba:	eb63 0301 	sbc.w	r3, r3, r1
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006dcc:	4649      	mov	r1, r9
 8006dce:	018b      	lsls	r3, r1, #6
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	018a      	lsls	r2, r1, #6
 8006dda:	4641      	mov	r1, r8
 8006ddc:	ebb2 0a01 	subs.w	sl, r2, r1
 8006de0:	4649      	mov	r1, r9
 8006de2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006df2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dfa:	4692      	mov	sl, r2
 8006dfc:	469b      	mov	fp, r3
 8006dfe:	4623      	mov	r3, r4
 8006e00:	eb1a 0303 	adds.w	r3, sl, r3
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	462b      	mov	r3, r5
 8006e08:	eb4b 0303 	adc.w	r3, fp, r3
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	028b      	lsls	r3, r1, #10
 8006e1e:	4621      	mov	r1, r4
 8006e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e24:	4621      	mov	r1, r4
 8006e26:	028a      	lsls	r2, r1, #10
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e30:	2200      	movs	r2, #0
 8006e32:	673b      	str	r3, [r7, #112]	; 0x70
 8006e34:	677a      	str	r2, [r7, #116]	; 0x74
 8006e36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006e3a:	f7f9 f9e9 	bl	8000210 <__aeabi_uldivmod>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4613      	mov	r3, r2
 8006e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e48:	4b41      	ldr	r3, [pc, #260]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	3301      	adds	r3, #1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006e6a:	e0eb      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e6c:	4b38      	ldr	r3, [pc, #224]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e78:	4b35      	ldr	r3, [pc, #212]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d06b      	beq.n	8006f5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e84:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	099b      	lsrs	r3, r3, #6
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	663b      	str	r3, [r7, #96]	; 0x60
 8006e98:	2300      	movs	r3, #0
 8006e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	0159      	lsls	r1, r3, #5
 8006eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb2:	0150      	lsls	r0, r2, #5
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4621      	mov	r1, r4
 8006eba:	1a51      	subs	r1, r2, r1
 8006ebc:	61b9      	str	r1, [r7, #24]
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006ed2:	4659      	mov	r1, fp
 8006ed4:	018b      	lsls	r3, r1, #6
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006edc:	4651      	mov	r1, sl
 8006ede:	018a      	lsls	r2, r1, #6
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	ebb2 0801 	subs.w	r8, r2, r1
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	eb63 0901 	sbc.w	r9, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ef8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006efc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f00:	4690      	mov	r8, r2
 8006f02:	4699      	mov	r9, r3
 8006f04:	4623      	mov	r3, r4
 8006f06:	eb18 0303 	adds.w	r3, r8, r3
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	eb49 0303 	adc.w	r3, r9, r3
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006f20:	4629      	mov	r1, r5
 8006f22:	024b      	lsls	r3, r1, #9
 8006f24:	4621      	mov	r1, r4
 8006f26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	024a      	lsls	r2, r1, #9
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4619      	mov	r1, r3
 8006f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f36:	2200      	movs	r2, #0
 8006f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006f3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f40:	f7f9 f966 	bl	8000210 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4613      	mov	r3, r2
 8006f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f4e:	e065      	b.n	800701c <HAL_RCC_GetSysClockFreq+0x420>
 8006f50:	40023800 	.word	0x40023800
 8006f54:	00f42400 	.word	0x00f42400
 8006f58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5c:	4b3d      	ldr	r3, [pc, #244]	; (8007054 <HAL_RCC_GetSysClockFreq+0x458>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	099b      	lsrs	r3, r3, #6
 8006f62:	2200      	movs	r2, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	4611      	mov	r1, r2
 8006f68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f6c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f6e:	2300      	movs	r3, #0
 8006f70:	657b      	str	r3, [r7, #84]	; 0x54
 8006f72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006f76:	4642      	mov	r2, r8
 8006f78:	464b      	mov	r3, r9
 8006f7a:	f04f 0000 	mov.w	r0, #0
 8006f7e:	f04f 0100 	mov.w	r1, #0
 8006f82:	0159      	lsls	r1, r3, #5
 8006f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f88:	0150      	lsls	r0, r2, #5
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4641      	mov	r1, r8
 8006f90:	1a51      	subs	r1, r2, r1
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	4649      	mov	r1, r9
 8006f96:	eb63 0301 	sbc.w	r3, r3, r1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006fa8:	4659      	mov	r1, fp
 8006faa:	018b      	lsls	r3, r1, #6
 8006fac:	4651      	mov	r1, sl
 8006fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	018a      	lsls	r2, r1, #6
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	1a54      	subs	r4, r2, r1
 8006fba:	4659      	mov	r1, fp
 8006fbc:	eb63 0501 	sbc.w	r5, r3, r1
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	00eb      	lsls	r3, r5, #3
 8006fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fce:	00e2      	lsls	r2, r4, #3
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	461d      	mov	r5, r3
 8006fd4:	4643      	mov	r3, r8
 8006fd6:	18e3      	adds	r3, r4, r3
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	464b      	mov	r3, r9
 8006fdc:	eb45 0303 	adc.w	r3, r5, r3
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	f04f 0300 	mov.w	r3, #0
 8006fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fee:	4629      	mov	r1, r5
 8006ff0:	028b      	lsls	r3, r1, #10
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	028a      	lsls	r2, r1, #10
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4619      	mov	r1, r3
 8007000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007004:	2200      	movs	r2, #0
 8007006:	64bb      	str	r3, [r7, #72]	; 0x48
 8007008:	64fa      	str	r2, [r7, #76]	; 0x4c
 800700a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800700e:	f7f9 f8ff 	bl	8000210 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4613      	mov	r3, r2
 8007018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <HAL_RCC_GetSysClockFreq+0x458>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	0f1b      	lsrs	r3, r3, #28
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800702a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800702e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007032:	fbb2 f3f3 	udiv	r3, r2, r3
 8007036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800703a:	e003      	b.n	8007044 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_RCC_GetSysClockFreq+0x45c>)
 800703e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007048:	4618      	mov	r0, r3
 800704a:	37b8      	adds	r7, #184	; 0xb8
 800704c:	46bd      	mov	sp, r7
 800704e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007052:	bf00      	nop
 8007054:	40023800 	.word	0x40023800
 8007058:	00f42400 	.word	0x00f42400

0800705c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e347      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d904      	bls.n	8007080 <HAL_RCC_OscConfig+0x24>
 8007076:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800707a:	4893      	ldr	r0, [pc, #588]	; (80072c8 <HAL_RCC_OscConfig+0x26c>)
 800707c:	f7fa f98b 	bl	8001396 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8096 	beq.w	80071ba <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <HAL_RCC_OscConfig+0x58>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709e:	d009      	beq.n	80070b4 <HAL_RCC_OscConfig+0x58>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070a8:	d004      	beq.n	80070b4 <HAL_RCC_OscConfig+0x58>
 80070aa:	f640 5115 	movw	r1, #3349	; 0xd15
 80070ae:	4886      	ldr	r0, [pc, #536]	; (80072c8 <HAL_RCC_OscConfig+0x26c>)
 80070b0:	f7fa f971 	bl	8001396 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80070b4:	4b85      	ldr	r3, [pc, #532]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 030c 	and.w	r3, r3, #12
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d019      	beq.n	80070f4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070c0:	4b82      	ldr	r3, [pc, #520]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d106      	bne.n	80070da <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070cc:	4b7f      	ldr	r3, [pc, #508]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070d8:	d00c      	beq.n	80070f4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070da:	4b7c      	ldr	r3, [pc, #496]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80070e2:	2b0c      	cmp	r3, #12
 80070e4:	d112      	bne.n	800710c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070e6:	4b79      	ldr	r3, [pc, #484]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f2:	d10b      	bne.n	800710c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f4:	4b75      	ldr	r3, [pc, #468]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05b      	beq.n	80071b8 <HAL_RCC_OscConfig+0x15c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d157      	bne.n	80071b8 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e2f8      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007114:	d106      	bne.n	8007124 <HAL_RCC_OscConfig+0xc8>
 8007116:	4b6d      	ldr	r3, [pc, #436]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6c      	ldr	r2, [pc, #432]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e01d      	b.n	8007160 <HAL_RCC_OscConfig+0x104>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0xec>
 800712e:	4b67      	ldr	r3, [pc, #412]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a66      	ldr	r2, [pc, #408]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b64      	ldr	r3, [pc, #400]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a63      	ldr	r2, [pc, #396]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e00b      	b.n	8007160 <HAL_RCC_OscConfig+0x104>
 8007148:	4b60      	ldr	r3, [pc, #384]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a5f      	ldr	r2, [pc, #380]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800714e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	4b5d      	ldr	r3, [pc, #372]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a5c      	ldr	r2, [pc, #368]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800715a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fa fc38 	bl	80019dc <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007170:	f7fa fc34 	bl	80019dc <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e2bd      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007182:	4b52      	ldr	r3, [pc, #328]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x114>
 800718e:	e014      	b.n	80071ba <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fa fc24 	bl	80019dc <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007198:	f7fa fc20 	bl	80019dc <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e2a9      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071aa:	4b48      	ldr	r3, [pc, #288]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x13c>
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 808c 	beq.w	80072e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <HAL_RCC_OscConfig+0x186>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d004      	beq.n	80071e2 <HAL_RCC_OscConfig+0x186>
 80071d8:	f640 514d 	movw	r1, #3405	; 0xd4d
 80071dc:	483a      	ldr	r0, [pc, #232]	; (80072c8 <HAL_RCC_OscConfig+0x26c>)
 80071de:	f7fa f8da 	bl	8001396 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b1f      	cmp	r3, #31
 80071e8:	d904      	bls.n	80071f4 <HAL_RCC_OscConfig+0x198>
 80071ea:	f640 514e 	movw	r1, #3406	; 0xd4e
 80071ee:	4836      	ldr	r0, [pc, #216]	; (80072c8 <HAL_RCC_OscConfig+0x26c>)
 80071f0:	f7fa f8d1 	bl	8001396 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80071f4:	4b35      	ldr	r3, [pc, #212]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d017      	beq.n	8007230 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007200:	4b32      	ldr	r3, [pc, #200]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007208:	2b08      	cmp	r3, #8
 800720a:	d105      	bne.n	8007218 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800720c:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d11c      	bne.n	800725e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007224:	4b29      	ldr	r3, [pc, #164]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d116      	bne.n	800725e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007230:	4b26      	ldr	r3, [pc, #152]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_RCC_OscConfig+0x1ec>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d001      	beq.n	8007248 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e25a      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007248:	4b20      	ldr	r3, [pc, #128]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	491d      	ldr	r1, [pc, #116]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800725c:	e040      	b.n	80072e0 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d020      	beq.n	80072a8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007266:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <HAL_RCC_OscConfig+0x274>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fa fbb6 	bl	80019dc <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007274:	f7fa fbb2 	bl	80019dc <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e23b      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	490a      	ldr	r1, [pc, #40]	; (80072cc <HAL_RCC_OscConfig+0x270>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	600b      	str	r3, [r1, #0]
 80072a6:	e01b      	b.n	80072e0 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_RCC_OscConfig+0x274>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fa fb95 	bl	80019dc <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b4:	e00e      	b.n	80072d4 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b6:	f7fa fb91 	bl	80019dc <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d907      	bls.n	80072d4 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e21a      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
 80072c8:	0800a688 	.word	0x0800a688
 80072cc:	40023800 	.word	0x40023800
 80072d0:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072d4:	4b74      	ldr	r3, [pc, #464]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1ea      	bne.n	80072b6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d03d      	beq.n	8007368 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_RCC_OscConfig+0x2aa>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d004      	beq.n	8007306 <HAL_RCC_OscConfig+0x2aa>
 80072fc:	f640 5194 	movw	r1, #3476	; 0xd94
 8007300:	486a      	ldr	r0, [pc, #424]	; (80074ac <HAL_RCC_OscConfig+0x450>)
 8007302:	f7fa f848 	bl	8001396 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800730e:	4b68      	ldr	r3, [pc, #416]	; (80074b0 <HAL_RCC_OscConfig+0x454>)
 8007310:	2201      	movs	r2, #1
 8007312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fa fb62 	bl	80019dc <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731c:	f7fa fb5e 	bl	80019dc <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e1e7      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800732e:	4b5e      	ldr	r3, [pc, #376]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f0      	beq.n	800731c <HAL_RCC_OscConfig+0x2c0>
 800733a:	e015      	b.n	8007368 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800733c:	4b5c      	ldr	r3, [pc, #368]	; (80074b0 <HAL_RCC_OscConfig+0x454>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007342:	f7fa fb4b 	bl	80019dc <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800734a:	f7fa fb47 	bl	80019dc <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e1d0      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800735c:	4b52      	ldr	r3, [pc, #328]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 800735e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f0      	bne.n	800734a <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80b0 	beq.w	80074d6 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_RCC_OscConfig+0x340>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d008      	beq.n	800739c <HAL_RCC_OscConfig+0x340>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b05      	cmp	r3, #5
 8007390:	d004      	beq.n	800739c <HAL_RCC_OscConfig+0x340>
 8007392:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007396:	4845      	ldr	r0, [pc, #276]	; (80074ac <HAL_RCC_OscConfig+0x450>)
 8007398:	f7f9 fffd 	bl	8001396 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800739c:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10f      	bne.n	80073c8 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	2300      	movs	r3, #0
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	4b3e      	ldr	r3, [pc, #248]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	4a3d      	ldr	r2, [pc, #244]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b6:	6413      	str	r3, [r2, #64]	; 0x40
 80073b8:	4b3b      	ldr	r3, [pc, #236]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c8:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_RCC_OscConfig+0x458>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d118      	bne.n	8007406 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073d4:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <HAL_RCC_OscConfig+0x458>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <HAL_RCC_OscConfig+0x458>)
 80073da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073e0:	f7fa fafc 	bl	80019dc <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e8:	f7fa faf8 	bl	80019dc <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e181      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fa:	4b2e      	ldr	r3, [pc, #184]	; (80074b4 <HAL_RCC_OscConfig+0x458>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f0      	beq.n	80073e8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d106      	bne.n	800741c <HAL_RCC_OscConfig+0x3c0>
 800740e:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a25      	ldr	r2, [pc, #148]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
 800741a:	e01c      	b.n	8007456 <HAL_RCC_OscConfig+0x3fa>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2b05      	cmp	r3, #5
 8007422:	d10c      	bne.n	800743e <HAL_RCC_OscConfig+0x3e2>
 8007424:	4b20      	ldr	r3, [pc, #128]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 800742a:	f043 0304 	orr.w	r3, r3, #4
 800742e:	6713      	str	r3, [r2, #112]	; 0x70
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007434:	4a1c      	ldr	r2, [pc, #112]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	6713      	str	r3, [r2, #112]	; 0x70
 800743c:	e00b      	b.n	8007456 <HAL_RCC_OscConfig+0x3fa>
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744e:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d015      	beq.n	800748a <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745e:	f7fa fabd 	bl	80019dc <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007464:	e00a      	b.n	800747c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fa fab9 	bl	80019dc <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	; 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e140      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <HAL_RCC_OscConfig+0x44c>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ee      	beq.n	8007466 <HAL_RCC_OscConfig+0x40a>
 8007488:	e01c      	b.n	80074c4 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fa faa7 	bl	80019dc <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007490:	e012      	b.n	80074b8 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fa faa3 	bl	80019dc <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d909      	bls.n	80074b8 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e12a      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
 80074a8:	40023800 	.word	0x40023800
 80074ac:	0800a688 	.word	0x0800a688
 80074b0:	42470e80 	.word	0x42470e80
 80074b4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b8:	4b93      	ldr	r3, [pc, #588]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d105      	bne.n	80074d6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ca:	4b8f      	ldr	r3, [pc, #572]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	4a8e      	ldr	r2, [pc, #568]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 80074d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <HAL_RCC_OscConfig+0x49c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d008      	beq.n	80074f8 <HAL_RCC_OscConfig+0x49c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d004      	beq.n	80074f8 <HAL_RCC_OscConfig+0x49c>
 80074ee:	f640 6103 	movw	r1, #3587	; 0xe03
 80074f2:	4886      	ldr	r0, [pc, #536]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 80074f4:	f7f9 ff4f 	bl	8001396 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80fd 	beq.w	80076fc <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007502:	4b81      	ldr	r3, [pc, #516]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
 800750a:	2b08      	cmp	r3, #8
 800750c:	f000 80b6 	beq.w	800767c <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b02      	cmp	r3, #2
 8007516:	f040 809a 	bne.w	800764e <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <HAL_RCC_OscConfig+0x4da>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800752a:	d004      	beq.n	8007536 <HAL_RCC_OscConfig+0x4da>
 800752c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8007530:	4876      	ldr	r0, [pc, #472]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 8007532:	f7f9 ff30 	bl	8001396 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	2b3f      	cmp	r3, #63	; 0x3f
 800753c:	d904      	bls.n	8007548 <HAL_RCC_OscConfig+0x4ec>
 800753e:	f640 610d 	movw	r1, #3597	; 0xe0d
 8007542:	4872      	ldr	r0, [pc, #456]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 8007544:	f7f9 ff27 	bl	8001396 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b31      	cmp	r3, #49	; 0x31
 800754e:	d904      	bls.n	800755a <HAL_RCC_OscConfig+0x4fe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007558:	d904      	bls.n	8007564 <HAL_RCC_OscConfig+0x508>
 800755a:	f640 610e 	movw	r1, #3598	; 0xe0e
 800755e:	486b      	ldr	r0, [pc, #428]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 8007560:	f7f9 ff19 	bl	8001396 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	2b02      	cmp	r3, #2
 800756a:	d010      	beq.n	800758e <HAL_RCC_OscConfig+0x532>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	2b04      	cmp	r3, #4
 8007572:	d00c      	beq.n	800758e <HAL_RCC_OscConfig+0x532>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	2b06      	cmp	r3, #6
 800757a:	d008      	beq.n	800758e <HAL_RCC_OscConfig+0x532>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	2b08      	cmp	r3, #8
 8007582:	d004      	beq.n	800758e <HAL_RCC_OscConfig+0x532>
 8007584:	f640 610f 	movw	r1, #3599	; 0xe0f
 8007588:	4860      	ldr	r0, [pc, #384]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 800758a:	f7f9 ff04 	bl	8001396 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d903      	bls.n	800759e <HAL_RCC_OscConfig+0x542>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	2b0f      	cmp	r3, #15
 800759c:	d904      	bls.n	80075a8 <HAL_RCC_OscConfig+0x54c>
 800759e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80075a2:	485a      	ldr	r0, [pc, #360]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 80075a4:	f7f9 fef7 	bl	8001396 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d903      	bls.n	80075b8 <HAL_RCC_OscConfig+0x55c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b4:	2b07      	cmp	r3, #7
 80075b6:	d904      	bls.n	80075c2 <HAL_RCC_OscConfig+0x566>
 80075b8:	f640 6111 	movw	r1, #3601	; 0xe11
 80075bc:	4853      	ldr	r0, [pc, #332]	; (800770c <HAL_RCC_OscConfig+0x6b0>)
 80075be:	f7f9 feea 	bl	8001396 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c2:	4b53      	ldr	r3, [pc, #332]	; (8007710 <HAL_RCC_OscConfig+0x6b4>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fa fa08 	bl	80019dc <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d0:	f7fa fa04 	bl	80019dc <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e08d      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e2:	4b49      	ldr	r3, [pc, #292]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69da      	ldr	r2, [r3, #28]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	019b      	lsls	r3, r3, #6
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	3b01      	subs	r3, #1
 8007608:	041b      	lsls	r3, r3, #16
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	061b      	lsls	r3, r3, #24
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	071b      	lsls	r3, r3, #28
 800761a:	493b      	ldr	r1, [pc, #236]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 800761c:	4313      	orrs	r3, r2
 800761e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007620:	4b3b      	ldr	r3, [pc, #236]	; (8007710 <HAL_RCC_OscConfig+0x6b4>)
 8007622:	2201      	movs	r2, #1
 8007624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007626:	f7fa f9d9 	bl	80019dc <HAL_GetTick>
 800762a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800762c:	e008      	b.n	8007640 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800762e:	f7fa f9d5 	bl	80019dc <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e05e      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007640:	4b31      	ldr	r3, [pc, #196]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0f0      	beq.n	800762e <HAL_RCC_OscConfig+0x5d2>
 800764c:	e056      	b.n	80076fc <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800764e:	4b30      	ldr	r3, [pc, #192]	; (8007710 <HAL_RCC_OscConfig+0x6b4>)
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fa f9c2 	bl	80019dc <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765c:	f7fa f9be 	bl	80019dc <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e047      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x600>
 800767a:	e03f      	b.n	80076fc <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e03a      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007688:	4b1f      	ldr	r3, [pc, #124]	; (8007708 <HAL_RCC_OscConfig+0x6ac>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d030      	beq.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d129      	bne.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d122      	bne.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076b8:	4013      	ands	r3, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d119      	bne.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	3b01      	subs	r3, #1
 80076d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d10f      	bne.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d107      	bne.n	80076f8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800
 800770c:	0800a688 	.word	0x0800a688
 8007710:	42470060 	.word	0x42470060

08007714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e1a4      	b.n	8007a70 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a72      	ldr	r2, [pc, #456]	; (80078f4 <HAL_SPI_Init+0x1e0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <HAL_SPI_Init+0x44>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a70      	ldr	r2, [pc, #448]	; (80078f8 <HAL_SPI_Init+0x1e4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00e      	beq.n	8007758 <HAL_SPI_Init+0x44>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a6f      	ldr	r2, [pc, #444]	; (80078fc <HAL_SPI_Init+0x1e8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d009      	beq.n	8007758 <HAL_SPI_Init+0x44>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a6d      	ldr	r2, [pc, #436]	; (8007900 <HAL_SPI_Init+0x1ec>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <HAL_SPI_Init+0x44>
 800774e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007752:	486c      	ldr	r0, [pc, #432]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007754:	f7f9 fe1f 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_SPI_Init+0x60>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007768:	d004      	beq.n	8007774 <HAL_SPI_Init+0x60>
 800776a:	f240 1141 	movw	r1, #321	; 0x141
 800776e:	4865      	ldr	r0, [pc, #404]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007770:	f7f9 fe11 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00e      	beq.n	800779a <HAL_SPI_Init+0x86>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007784:	d009      	beq.n	800779a <HAL_SPI_Init+0x86>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778e:	d004      	beq.n	800779a <HAL_SPI_Init+0x86>
 8007790:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007794:	485b      	ldr	r0, [pc, #364]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007796:	f7f9 fdfe 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a2:	d008      	beq.n	80077b6 <HAL_SPI_Init+0xa2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_SPI_Init+0xa2>
 80077ac:	f240 1143 	movw	r1, #323	; 0x143
 80077b0:	4854      	ldr	r0, [pc, #336]	; (8007904 <HAL_SPI_Init+0x1f0>)
 80077b2:	f7f9 fdf0 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077be:	d00d      	beq.n	80077dc <HAL_SPI_Init+0xc8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <HAL_SPI_Init+0xc8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077d0:	d004      	beq.n	80077dc <HAL_SPI_Init+0xc8>
 80077d2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80077d6:	484b      	ldr	r0, [pc, #300]	; (8007904 <HAL_SPI_Init+0x1f0>)
 80077d8:	f7f9 fddd 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d020      	beq.n	8007826 <HAL_SPI_Init+0x112>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d01c      	beq.n	8007826 <HAL_SPI_Init+0x112>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d018      	beq.n	8007826 <HAL_SPI_Init+0x112>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	2b18      	cmp	r3, #24
 80077fa:	d014      	beq.n	8007826 <HAL_SPI_Init+0x112>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b20      	cmp	r3, #32
 8007802:	d010      	beq.n	8007826 <HAL_SPI_Init+0x112>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	2b28      	cmp	r3, #40	; 0x28
 800780a:	d00c      	beq.n	8007826 <HAL_SPI_Init+0x112>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d008      	beq.n	8007826 <HAL_SPI_Init+0x112>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	2b38      	cmp	r3, #56	; 0x38
 800781a:	d004      	beq.n	8007826 <HAL_SPI_Init+0x112>
 800781c:	f240 1145 	movw	r1, #325	; 0x145
 8007820:	4838      	ldr	r0, [pc, #224]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007822:	f7f9 fdb8 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <HAL_SPI_Init+0x12c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	2b80      	cmp	r3, #128	; 0x80
 8007834:	d004      	beq.n	8007840 <HAL_SPI_Init+0x12c>
 8007836:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800783a:	4832      	ldr	r0, [pc, #200]	; (8007904 <HAL_SPI_Init+0x1f0>)
 800783c:	f7f9 fdab 	bl	8001396 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_SPI_Init+0x146>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b10      	cmp	r3, #16
 800784e:	d004      	beq.n	800785a <HAL_SPI_Init+0x146>
 8007850:	f240 1147 	movw	r1, #327	; 0x147
 8007854:	482b      	ldr	r0, [pc, #172]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007856:	f7f9 fd9e 	bl	8001396 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d152      	bne.n	8007908 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_SPI_Init+0x168>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d004      	beq.n	800787c <HAL_SPI_Init+0x168>
 8007872:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8007876:	4823      	ldr	r0, [pc, #140]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007878:	f7f9 fd8d 	bl	8001396 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_SPI_Init+0x182>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d004      	beq.n	8007896 <HAL_SPI_Init+0x182>
 800788c:	f240 114b 	movw	r1, #331	; 0x14b
 8007890:	481c      	ldr	r0, [pc, #112]	; (8007904 <HAL_SPI_Init+0x1f0>)
 8007892:	f7f9 fd80 	bl	8001396 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800789e:	d125      	bne.n	80078ec <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d05a      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d056      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d052      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b18      	cmp	r3, #24
 80078be:	d04e      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d04a      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	2b28      	cmp	r3, #40	; 0x28
 80078ce:	d046      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	2b30      	cmp	r3, #48	; 0x30
 80078d6:	d042      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	2b38      	cmp	r3, #56	; 0x38
 80078de:	d03e      	beq.n	800795e <HAL_SPI_Init+0x24a>
 80078e0:	f240 114f 	movw	r1, #335	; 0x14f
 80078e4:	4807      	ldr	r0, [pc, #28]	; (8007904 <HAL_SPI_Init+0x1f0>)
 80078e6:	f7f9 fd56 	bl	8001396 <assert_failed>
 80078ea:	e038      	b.n	800795e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	61da      	str	r2, [r3, #28]
 80078f2:	e034      	b.n	800795e <HAL_SPI_Init+0x24a>
 80078f4:	40013000 	.word	0x40013000
 80078f8:	40003800 	.word	0x40003800
 80078fc:	40003c00 	.word	0x40003c00
 8007900:	40013400 	.word	0x40013400
 8007904:	0800a6c4 	.word	0x0800a6c4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d020      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d01c      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	2b10      	cmp	r3, #16
 800791e:	d018      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	2b18      	cmp	r3, #24
 8007926:	d014      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	2b20      	cmp	r3, #32
 800792e:	d010      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b28      	cmp	r3, #40	; 0x28
 8007936:	d00c      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	2b30      	cmp	r3, #48	; 0x30
 800793e:	d008      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b38      	cmp	r3, #56	; 0x38
 8007946:	d004      	beq.n	8007952 <HAL_SPI_Init+0x23e>
 8007948:	f240 1159 	movw	r1, #345	; 0x159
 800794c:	484a      	ldr	r0, [pc, #296]	; (8007a78 <HAL_SPI_Init+0x364>)
 800794e:	f7f9 fd22 	bl	8001396 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d126      	bne.n	80079be <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a40      	ldr	r2, [pc, #256]	; (8007a7c <HAL_SPI_Init+0x368>)
 800797c:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a3f      	ldr	r2, [pc, #252]	; (8007a80 <HAL_SPI_Init+0x36c>)
 8007982:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3f      	ldr	r2, [pc, #252]	; (8007a84 <HAL_SPI_Init+0x370>)
 8007988:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a3e      	ldr	r2, [pc, #248]	; (8007a88 <HAL_SPI_Init+0x374>)
 800798e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a3e      	ldr	r2, [pc, #248]	; (8007a8c <HAL_SPI_Init+0x378>)
 8007994:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a3d      	ldr	r2, [pc, #244]	; (8007a90 <HAL_SPI_Init+0x37c>)
 800799a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <HAL_SPI_Init+0x380>)
 80079a0:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <HAL_SPI_Init+0x384>)
 80079a6:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <HAL_SPI_Init+0x388>)
 80079b4:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a22:	ea42 0103 	orr.w	r1, r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	0c1b      	lsrs	r3, r3, #16
 8007a3c:	f003 0104 	and.w	r1, r3, #4
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	f003 0210 	and.w	r2, r3, #16
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800a6c4 	.word	0x0800a6c4
 8007a7c:	08007ffd 	.word	0x08007ffd
 8007a80:	08008011 	.word	0x08008011
 8007a84:	08008025 	.word	0x08008025
 8007a88:	08008039 	.word	0x08008039
 8007a8c:	0800804d 	.word	0x0800804d
 8007a90:	08008061 	.word	0x08008061
 8007a94:	08008075 	.word	0x08008075
 8007a98:	08008089 	.word	0x08008089
 8007a9c:	08001419 	.word	0x08001419

08007aa0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_SPI_TransmitReceive+0x2a>
 8007ac0:	f240 417c 	movw	r1, #1148	; 0x47c
 8007ac4:	4884      	ldr	r0, [pc, #528]	; (8007cd8 <HAL_SPI_TransmitReceive+0x238>)
 8007ac6:	f7f9 fc66 	bl	8001396 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_SPI_TransmitReceive+0x38>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e18d      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x354>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae0:	f7f9 ff7c 	bl	80019dc <HAL_GetTick>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d00f      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x82>
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b08:	d107      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <HAL_SPI_TransmitReceive+0x7a>
 8007b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d003      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b20:	e15e      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0x94>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0x94>
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b3a:	e151      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d003      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	887a      	ldrh	r2, [r7, #2]
 8007b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	887a      	ldrh	r2, [r7, #2]
 8007b72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	887a      	ldrh	r2, [r7, #2]
 8007b78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d007      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bac:	d178      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_SPI_TransmitReceive+0x11c>
 8007bb6:	8b7b      	ldrh	r3, [r7, #26]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d166      	bne.n	8007c8a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	881a      	ldrh	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	1c9a      	adds	r2, r3, #2
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be0:	e053      	b.n	8007c8a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d11b      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x188>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d016      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x188>
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d113      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	881a      	ldrh	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	1c9a      	adds	r2, r3, #2
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d119      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x1ca>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d014      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c66:	2301      	movs	r3, #1
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c6a:	f7f9 feb7 	bl	80019dc <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d807      	bhi.n	8007c8a <HAL_SPI_TransmitReceive+0x1ea>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c80:	d003      	beq.n	8007c8a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c88:	e0aa      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1a6      	bne.n	8007be2 <HAL_SPI_TransmitReceive+0x142>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1a1      	bne.n	8007be2 <HAL_SPI_TransmitReceive+0x142>
 8007c9e:	e07f      	b.n	8007da0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x20e>
 8007ca8:	8b7b      	ldrh	r3, [r7, #26]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d16e      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd4:	e05a      	b.n	8007d8c <HAL_SPI_TransmitReceive+0x2ec>
 8007cd6:	bf00      	nop
 8007cd8:	0800a6c4 	.word	0x0800a6c4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d11c      	bne.n	8007d24 <HAL_SPI_TransmitReceive+0x284>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d017      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x284>
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d114      	bne.n	8007d24 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	330c      	adds	r3, #12
 8007d04:	7812      	ldrb	r2, [r2, #0]
 8007d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d119      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x2c6>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d014      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d62:	2301      	movs	r3, #1
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d66:	f7f9 fe39 	bl	80019dc <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d803      	bhi.n	8007d7e <HAL_SPI_TransmitReceive+0x2de>
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x2e4>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d8a:	e029      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1a2      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x23c>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d19d      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fa17 	bl	80081d8 <SPI_EndRxTxTransaction>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007dbc:	e010      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	e000      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007dde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3730      	adds	r7, #48	; 0x30
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10f      	bne.n	8007e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	099b      	lsrs	r3, r3, #6
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
    return;
 8007e3e:	e0d8      	b.n	8007ff2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x66>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	09db      	lsrs	r3, r3, #7
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
    return;
 8007e60:	e0c7      	b.n	8007ff2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10c      	bne.n	8007e88 <HAL_SPI_IRQHandler+0x8c>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	099b      	lsrs	r3, r3, #6
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80b5 	beq.w	8007ff2 <HAL_SPI_IRQHandler+0x1f6>
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80ae 	beq.w	8007ff2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	099b      	lsrs	r3, r3, #6
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d023      	beq.n	8007eea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d011      	beq.n	8007ed2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	f043 0204 	orr.w	r2, r3, #4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	e00b      	b.n	8007eea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	693b      	ldr	r3, [r7, #16]
        return;
 8007ee8:	e083      	b.n	8007ff2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d014      	beq.n	8007f20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	f043 0201 	orr.w	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00c      	beq.n	8007f46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f043 0208 	orr.w	r2, r3, #8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60bb      	str	r3, [r7, #8]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	60bb      	str	r3, [r7, #8]
 8007f44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d050      	beq.n	8007ff0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <HAL_SPI_IRQHandler+0x17e>
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d034      	beq.n	8007fe4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0203 	bic.w	r2, r2, #3
 8007f88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d011      	beq.n	8007fb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_SPI_IRQHandler+0x1fc>)
 8007f98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fb f916 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d017      	beq.n	8007fee <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc2:	4a0d      	ldr	r2, [pc, #52]	; (8007ff8 <HAL_SPI_IRQHandler+0x1fc>)
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fb f900 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007fe2:	e004      	b.n	8007fee <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007fec:	e000      	b.n	8007ff0 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8007fee:	bf00      	nop
    return;
 8007ff0:	bf00      	nop
  }
}
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	0800809d 	.word	0x0800809d

08007ffc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	4613      	mov	r3, r2
 80080d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080d8:	f7f9 fc80 	bl	80019dc <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080e8:	f7f9 fc78 	bl	80019dc <HAL_GetTick>
 80080ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080ee:	4b39      	ldr	r3, [pc, #228]	; (80081d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	015b      	lsls	r3, r3, #5
 80080f4:	0d1b      	lsrs	r3, r3, #20
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	fb02 f303 	mul.w	r3, r2, r3
 80080fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080fe:	e054      	b.n	80081aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d050      	beq.n	80081aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008108:	f7f9 fc68 	bl	80019dc <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	429a      	cmp	r2, r3
 8008116:	d902      	bls.n	800811e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d13d      	bne.n	800819a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800812c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d111      	bne.n	800815c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	d004      	beq.n	800814c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814a:	d107      	bne.n	800815c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008164:	d10f      	bne.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e017      	b.n	80081ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d19b      	bne.n	8008100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000000 	.word	0x20000000

080081d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <SPI_EndRxTxTransaction+0x7c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <SPI_EndRxTxTransaction+0x80>)
 80081ea:	fba2 2303 	umull	r2, r3, r2, r3
 80081ee:	0d5b      	lsrs	r3, r3, #21
 80081f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008202:	d112      	bne.n	800822a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	2180      	movs	r1, #128	; 0x80
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff ff5a 	bl	80080c8 <SPI_WaitFlagStateUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d016      	beq.n	8008248 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e00f      	b.n	800824a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3b01      	subs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008240:	2b80      	cmp	r3, #128	; 0x80
 8008242:	d0f2      	beq.n	800822a <SPI_EndRxTxTransaction+0x52>
 8008244:	e000      	b.n	8008248 <SPI_EndRxTxTransaction+0x70>
        break;
 8008246:	bf00      	nop
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000000 	.word	0x20000000
 8008258:	165e9f81 	.word	0x165e9f81

0800825c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0c5      	b.n	80083fa <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a64      	ldr	r2, [pc, #400]	; (8008404 <HAL_TIM_Base_Init+0x1a8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d045      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008280:	d040      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a60      	ldr	r2, [pc, #384]	; (8008408 <HAL_TIM_Base_Init+0x1ac>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d03b      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a5e      	ldr	r2, [pc, #376]	; (800840c <HAL_TIM_Base_Init+0x1b0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d036      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a5d      	ldr	r2, [pc, #372]	; (8008410 <HAL_TIM_Base_Init+0x1b4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d031      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a5b      	ldr	r2, [pc, #364]	; (8008414 <HAL_TIM_Base_Init+0x1b8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d02c      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a5a      	ldr	r2, [pc, #360]	; (8008418 <HAL_TIM_Base_Init+0x1bc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d027      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a58      	ldr	r2, [pc, #352]	; (800841c <HAL_TIM_Base_Init+0x1c0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a57      	ldr	r2, [pc, #348]	; (8008420 <HAL_TIM_Base_Init+0x1c4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d01d      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a55      	ldr	r2, [pc, #340]	; (8008424 <HAL_TIM_Base_Init+0x1c8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a54      	ldr	r2, [pc, #336]	; (8008428 <HAL_TIM_Base_Init+0x1cc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a52      	ldr	r2, [pc, #328]	; (800842c <HAL_TIM_Base_Init+0x1d0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a51      	ldr	r2, [pc, #324]	; (8008430 <HAL_TIM_Base_Init+0x1d4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a4f      	ldr	r2, [pc, #316]	; (8008434 <HAL_TIM_Base_Init+0x1d8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_Base_Init+0xa8>
 80082fa:	f240 1113 	movw	r1, #275	; 0x113
 80082fe:	484e      	ldr	r0, [pc, #312]	; (8008438 <HAL_TIM_Base_Init+0x1dc>)
 8008300:	f7f9 f849 	bl	8001396 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d014      	beq.n	8008336 <HAL_TIM_Base_Init+0xda>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b10      	cmp	r3, #16
 8008312:	d010      	beq.n	8008336 <HAL_TIM_Base_Init+0xda>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b20      	cmp	r3, #32
 800831a:	d00c      	beq.n	8008336 <HAL_TIM_Base_Init+0xda>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	d008      	beq.n	8008336 <HAL_TIM_Base_Init+0xda>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b60      	cmp	r3, #96	; 0x60
 800832a:	d004      	beq.n	8008336 <HAL_TIM_Base_Init+0xda>
 800832c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008330:	4841      	ldr	r0, [pc, #260]	; (8008438 <HAL_TIM_Base_Init+0x1dc>)
 8008332:	f7f9 f830 	bl	8001396 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00e      	beq.n	800835c <HAL_TIM_Base_Init+0x100>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008346:	d009      	beq.n	800835c <HAL_TIM_Base_Init+0x100>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008350:	d004      	beq.n	800835c <HAL_TIM_Base_Init+0x100>
 8008352:	f240 1115 	movw	r1, #277	; 0x115
 8008356:	4838      	ldr	r0, [pc, #224]	; (8008438 <HAL_TIM_Base_Init+0x1dc>)
 8008358:	f7f9 f81d 	bl	8001396 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d008      	beq.n	8008376 <HAL_TIM_Base_Init+0x11a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	2b80      	cmp	r3, #128	; 0x80
 800836a:	d004      	beq.n	8008376 <HAL_TIM_Base_Init+0x11a>
 800836c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008370:	4831      	ldr	r0, [pc, #196]	; (8008438 <HAL_TIM_Base_Init+0x1dc>)
 8008372:	f7f9 f810 	bl	8001396 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f856 	bl	800843c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f000 fa4a 	bl	800883c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40010000 	.word	0x40010000
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800
 8008410:	40000c00 	.word	0x40000c00
 8008414:	40001000 	.word	0x40001000
 8008418:	40001400 	.word	0x40001400
 800841c:	40010400 	.word	0x40010400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800
 800842c:	40001800 	.word	0x40001800
 8008430:	40001c00 	.word	0x40001c00
 8008434:	40002000 	.word	0x40002000
 8008438:	0800a6fc 	.word	0x0800a6fc

0800843c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a51      	ldr	r2, [pc, #324]	; (80085a4 <HAL_TIM_Base_Start_IT+0x154>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d045      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846a:	d040      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a4d      	ldr	r2, [pc, #308]	; (80085a8 <HAL_TIM_Base_Start_IT+0x158>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d03b      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a4c      	ldr	r2, [pc, #304]	; (80085ac <HAL_TIM_Base_Start_IT+0x15c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d036      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a4a      	ldr	r2, [pc, #296]	; (80085b0 <HAL_TIM_Base_Start_IT+0x160>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d031      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a49      	ldr	r2, [pc, #292]	; (80085b4 <HAL_TIM_Base_Start_IT+0x164>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d02c      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a47      	ldr	r2, [pc, #284]	; (80085b8 <HAL_TIM_Base_Start_IT+0x168>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d027      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a46      	ldr	r2, [pc, #280]	; (80085bc <HAL_TIM_Base_Start_IT+0x16c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d022      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a44      	ldr	r2, [pc, #272]	; (80085c0 <HAL_TIM_Base_Start_IT+0x170>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d01d      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a43      	ldr	r2, [pc, #268]	; (80085c4 <HAL_TIM_Base_Start_IT+0x174>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d018      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a41      	ldr	r2, [pc, #260]	; (80085c8 <HAL_TIM_Base_Start_IT+0x178>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a40      	ldr	r2, [pc, #256]	; (80085cc <HAL_TIM_Base_Start_IT+0x17c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00e      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a3e      	ldr	r2, [pc, #248]	; (80085d0 <HAL_TIM_Base_Start_IT+0x180>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d009      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a3d      	ldr	r2, [pc, #244]	; (80085d4 <HAL_TIM_Base_Start_IT+0x184>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d004      	beq.n	80084ee <HAL_TIM_Base_Start_IT+0x9e>
 80084e4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80084e8:	483b      	ldr	r0, [pc, #236]	; (80085d8 <HAL_TIM_Base_Start_IT+0x188>)
 80084ea:	f7f8 ff54 	bl	8001396 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d001      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e04e      	b.n	800859c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <HAL_TIM_Base_Start_IT+0x154>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d022      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008528:	d01d      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <HAL_TIM_Base_Start_IT+0x158>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d018      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1c      	ldr	r2, [pc, #112]	; (80085ac <HAL_TIM_Base_Start_IT+0x15c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1b      	ldr	r2, [pc, #108]	; (80085b0 <HAL_TIM_Base_Start_IT+0x160>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00e      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <HAL_TIM_Base_Start_IT+0x16c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d009      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1a      	ldr	r2, [pc, #104]	; (80085c0 <HAL_TIM_Base_Start_IT+0x170>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d004      	beq.n	8008566 <HAL_TIM_Base_Start_IT+0x116>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <HAL_TIM_Base_Start_IT+0x17c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d111      	bne.n	800858a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0307 	and.w	r3, r3, #7
 8008570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b06      	cmp	r3, #6
 8008576:	d010      	beq.n	800859a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0201 	orr.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008588:	e007      	b.n	800859a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f042 0201 	orr.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40000400 	.word	0x40000400
 80085ac:	40000800 	.word	0x40000800
 80085b0:	40000c00 	.word	0x40000c00
 80085b4:	40001000 	.word	0x40001000
 80085b8:	40001400 	.word	0x40001400
 80085bc:	40010400 	.word	0x40010400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800
 80085cc:	40001800 	.word	0x40001800
 80085d0:	40001c00 	.word	0x40001c00
 80085d4:	40002000 	.word	0x40002000
 80085d8:	0800a6fc 	.word	0x0800a6fc

080085dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0202 	mvn.w	r2, #2
 8008608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f8ee 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f8e0 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8f1 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b04      	cmp	r3, #4
 8008644:	d122      	bne.n	800868c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b04      	cmp	r3, #4
 8008652:	d11b      	bne.n	800868c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0204 	mvn.w	r2, #4
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2202      	movs	r2, #2
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8c4 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f8b6 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f8c7 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b08      	cmp	r3, #8
 8008698:	d122      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f003 0308 	and.w	r3, r3, #8
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d11b      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0208 	mvn.w	r2, #8
 80086b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2204      	movs	r2, #4
 80086b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f89a 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80086cc:	e005      	b.n	80086da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f88c 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f89d 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	2b10      	cmp	r3, #16
 80086ec:	d122      	bne.n	8008734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d11b      	bne.n	8008734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0210 	mvn.w	r2, #16
 8008704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2208      	movs	r2, #8
 800870a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f870 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 8008720:	e005      	b.n	800872e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f862 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f873 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10e      	bne.n	8008760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b01      	cmp	r3, #1
 800874e:	d107      	bne.n	8008760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f06f 0201 	mvn.w	r2, #1
 8008758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7f8 fe04 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876a:	2b80      	cmp	r3, #128	; 0x80
 800876c:	d10e      	bne.n	800878c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008778:	2b80      	cmp	r3, #128	; 0x80
 800877a:	d107      	bne.n	800878c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f902 	bl	8008990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b40      	cmp	r3, #64	; 0x40
 8008798:	d10e      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a4:	2b40      	cmp	r3, #64	; 0x40
 80087a6:	d107      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f838 	bl	8008828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	d10e      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d107      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0220 	mvn.w	r2, #32
 80087dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8cc 	bl	800897c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a40      	ldr	r2, [pc, #256]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885a:	d00f      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a3d      	ldr	r2, [pc, #244]	; (8008954 <TIM_Base_SetConfig+0x118>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a3c      	ldr	r2, [pc, #240]	; (8008958 <TIM_Base_SetConfig+0x11c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a3b      	ldr	r2, [pc, #236]	; (800895c <TIM_Base_SetConfig+0x120>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a3a      	ldr	r2, [pc, #232]	; (8008960 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d108      	bne.n	800888e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a2f      	ldr	r2, [pc, #188]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d02b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889c:	d027      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a2c      	ldr	r2, [pc, #176]	; (8008954 <TIM_Base_SetConfig+0x118>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d023      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a2b      	ldr	r2, [pc, #172]	; (8008958 <TIM_Base_SetConfig+0x11c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d01f      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a2a      	ldr	r2, [pc, #168]	; (800895c <TIM_Base_SetConfig+0x120>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d01b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a29      	ldr	r2, [pc, #164]	; (8008960 <TIM_Base_SetConfig+0x124>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d017      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a28      	ldr	r2, [pc, #160]	; (8008964 <TIM_Base_SetConfig+0x128>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a27      	ldr	r2, [pc, #156]	; (8008968 <TIM_Base_SetConfig+0x12c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00f      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a26      	ldr	r2, [pc, #152]	; (800896c <TIM_Base_SetConfig+0x130>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a25      	ldr	r2, [pc, #148]	; (8008970 <TIM_Base_SetConfig+0x134>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a24      	ldr	r2, [pc, #144]	; (8008974 <TIM_Base_SetConfig+0x138>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a23      	ldr	r2, [pc, #140]	; (8008978 <TIM_Base_SetConfig+0x13c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689a      	ldr	r2, [r3, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_Base_SetConfig+0xf8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <TIM_Base_SetConfig+0x124>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d103      	bne.n	800893c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	615a      	str	r2, [r3, #20]
}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	40010000 	.word	0x40010000
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800
 800895c:	40000c00 	.word	0x40000c00
 8008960:	40010400 	.word	0x40010400
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800
 8008970:	40001800 	.word	0x40001800
 8008974:	40001c00 	.word	0x40001c00
 8008978:	40002000 	.word	0x40002000

0800897c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ba:	d10e      	bne.n	80089da <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d107      	bne.n	80089da <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f06f 0201 	mvn.w	r2, #1
 80089d2:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f804 	bl	80089e2 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	4603      	mov	r3, r0
 80089fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a08:	2b84      	cmp	r3, #132	; 0x84
 8008a0a:	d005      	beq.n	8008a18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	3303      	adds	r3, #3
 8008a16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a18:	68fb      	ldr	r3, [r7, #12]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a2a:	f000 fc57 	bl	80092dc <vTaskStartScheduler>
  
  return osOK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a36:	b089      	sub	sp, #36	; 0x24
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d020      	beq.n	8008a88 <osThreadCreate+0x54>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01c      	beq.n	8008a88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685c      	ldr	r4, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681d      	ldr	r5, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691e      	ldr	r6, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff ffc8 	bl	80089f6 <makeFreeRtosPriority>
 8008a66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a70:	9202      	str	r2, [sp, #8]
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	9100      	str	r1, [sp, #0]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	4632      	mov	r2, r6
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fa4e 	bl	8008f1e <xTaskCreateStatic>
 8008a82:	4603      	mov	r3, r0
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e01c      	b.n	8008ac2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685c      	ldr	r4, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a94:	b29e      	uxth	r6, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff ffaa 	bl	80089f6 <makeFreeRtosPriority>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	9200      	str	r2, [sp, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	4632      	mov	r2, r6
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 fa90 	bl	8008fd8 <xTaskCreate>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d001      	beq.n	8008ac2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e000      	b.n	8008ac4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008acc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <osDelay+0x16>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	e000      	b.n	8008ae4 <osDelay+0x18>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fbc5 	bl	8009274 <vTaskDelay>
  
  return osOK;
 8008aea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <osMessageCreate+0x36>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6859      	ldr	r1, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	2400      	movs	r4, #0
 8008b20:	9400      	str	r4, [sp, #0]
 8008b22:	f000 f92b 	bl	8008d7c <xQueueGenericCreateStatic>
 8008b26:	4603      	mov	r3, r0
 8008b28:	e008      	b.n	8008b3c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	4619      	mov	r1, r3
 8008b36:	f000 f999 	bl	8008e6c <xQueueGenericCreate>
 8008b3a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd90      	pop	{r4, r7, pc}

08008b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f103 0208 	add.w	r2, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f103 0208 	add.w	r2, r3, #8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f103 0208 	add.w	r2, r3, #8
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008be6:	b480      	push	{r7}
 8008be8:	b085      	sub	sp, #20
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d103      	bne.n	8008c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	e00c      	b.n	8008c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e002      	b.n	8008c14 <vListInsert+0x2e>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d2f6      	bcs.n	8008c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	601a      	str	r2, [r3, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6892      	ldr	r2, [r2, #8]
 8008c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6852      	ldr	r2, [r2, #4]
 8008c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d103      	bne.n	8008c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	1e5a      	subs	r2, r3, #1
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xQueueGenericReset+0x2a>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60bb      	str	r3, [r7, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cd6:	f000 fffd 	bl	8009cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	441a      	add	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d06:	3b01      	subs	r3, #1
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	22ff      	movs	r2, #255	; 0xff
 8008d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d114      	bne.n	8008d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01a      	beq.n	8008d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3310      	adds	r3, #16
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fcfd 	bl	8009738 <xTaskRemoveFromEventList>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d012      	beq.n	8008d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <xQueueGenericReset+0xcc>)
 8008d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	e009      	b.n	8008d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3310      	adds	r3, #16
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fef2 	bl	8008b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff feed 	bl	8008b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d6a:	f000 ffe3 	bl	8009d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d6e:	2301      	movs	r3, #1
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08e      	sub	sp, #56	; 0x38
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <xQueueGenericCreateStatic+0x52>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <xQueueGenericCreateStatic+0x56>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <xQueueGenericCreateStatic+0x58>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	623b      	str	r3, [r7, #32]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <xQueueGenericCreateStatic+0x7e>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <xQueueGenericCreateStatic+0x82>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <xQueueGenericCreateStatic+0x84>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61fb      	str	r3, [r7, #28]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e1a:	2348      	movs	r3, #72	; 0x48
 8008e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b48      	cmp	r3, #72	; 0x48
 8008e22:	d00a      	beq.n	8008e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	61bb      	str	r3, [r7, #24]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00d      	beq.n	8008e62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4613      	mov	r3, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f83f 	bl	8008ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	; 0x28
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	613b      	str	r3, [r7, #16]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	fb02 f303 	mul.w	r3, r2, r3
 8008e9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3348      	adds	r3, #72	; 0x48
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fff7 	bl	8009e98 <pvPortMalloc>
 8008eaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d011      	beq.n	8008ed6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	3348      	adds	r3, #72	; 0x48
 8008eba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ec4:	79fa      	ldrb	r2, [r7, #7]
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 f805 	bl	8008ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f0e:	2101      	movs	r1, #1
 8008f10:	69b8      	ldr	r0, [r7, #24]
 8008f12:	f7ff fecb 	bl	8008cac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b08e      	sub	sp, #56	; 0x38
 8008f22:	af04      	add	r7, sp, #16
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	623b      	str	r3, [r7, #32]
}
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	61fb      	str	r3, [r7, #28]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f64:	23b4      	movs	r3, #180	; 0xb4
 8008f66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2bb4      	cmp	r3, #180	; 0xb4
 8008f6c:	d00a      	beq.n	8008f84 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	61bb      	str	r3, [r7, #24]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d01e      	beq.n	8008fca <xTaskCreateStatic+0xac>
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01b      	beq.n	8008fca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f851 	bl	8009064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fc4:	f000 f8ec 	bl	80091a0 <prvAddNewTaskToReadyList>
 8008fc8:	e001      	b.n	8008fce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fce:	697b      	ldr	r3, [r7, #20]
	}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3728      	adds	r7, #40	; 0x28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08c      	sub	sp, #48	; 0x30
 8008fdc:	af04      	add	r7, sp, #16
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 ff53 	bl	8009e98 <pvPortMalloc>
 8008ff2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00e      	beq.n	8009018 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ffa:	20b4      	movs	r0, #180	; 0xb4
 8008ffc:	f000 ff4c 	bl	8009e98 <pvPortMalloc>
 8009000:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
 800900e:	e005      	b.n	800901c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009010:	6978      	ldr	r0, [r7, #20]
 8009012:	f001 f80d 	bl	800a030 <vPortFree>
 8009016:	e001      	b.n	800901c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d017      	beq.n	8009052 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	2300      	movs	r3, #0
 800902e:	9303      	str	r3, [sp, #12]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f80f 	bl	8009064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009046:	69f8      	ldr	r0, [r7, #28]
 8009048:	f000 f8aa 	bl	80091a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800904c:	2301      	movs	r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	e002      	b.n	8009058 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009058:	69bb      	ldr	r3, [r7, #24]
	}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800907c:	3b01      	subs	r3, #1
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	617b      	str	r3, [r7, #20]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01f      	beq.n	80090f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]
 80090b6:	e012      	b.n	80090de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	4413      	add	r3, r2
 80090be:	7819      	ldrb	r1, [r3, #0]
 80090c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	3334      	adds	r3, #52	; 0x34
 80090c8:	460a      	mov	r2, r1
 80090ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3301      	adds	r3, #1
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	2b0f      	cmp	r3, #15
 80090e2:	d9e9      	bls.n	80090b8 <prvInitialiseNewTask+0x54>
 80090e4:	e000      	b.n	80090e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80090e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090f0:	e003      	b.n	80090fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	2b06      	cmp	r3, #6
 80090fe:	d901      	bls.n	8009104 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009100:	2306      	movs	r3, #6
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800910e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	2200      	movs	r2, #0
 8009114:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	3304      	adds	r3, #4
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fd32 	bl	8008b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	3318      	adds	r3, #24
 8009124:	4618      	mov	r0, r3
 8009126:	f7ff fd2d 	bl	8008b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	f1c3 0207 	rsb	r2, r3, #7
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	2200      	movs	r2, #0
 800914c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	334c      	adds	r3, #76	; 0x4c
 8009154:	2260      	movs	r2, #96	; 0x60
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f001 f8ab 	bl	800a2b4 <memset>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	4a0c      	ldr	r2, [pc, #48]	; (8009194 <prvInitialiseNewTask+0x130>)
 8009162:	651a      	str	r2, [r3, #80]	; 0x50
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	4a0c      	ldr	r2, [pc, #48]	; (8009198 <prvInitialiseNewTask+0x134>)
 8009168:	655a      	str	r2, [r3, #84]	; 0x54
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <prvInitialiseNewTask+0x138>)
 800916e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	69b8      	ldr	r0, [r7, #24]
 8009176:	f000 fc81 	bl	8009a7c <pxPortInitialiseStack>
 800917a:	4602      	mov	r2, r0
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800918c:	bf00      	nop
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	0800a77c 	.word	0x0800a77c
 8009198:	0800a79c 	.word	0x0800a79c
 800919c:	0800a75c 	.word	0x0800a75c

080091a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091a8:	f000 fd94 	bl	8009cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091ac:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <prvAddNewTaskToReadyList+0xb8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3301      	adds	r3, #1
 80091b2:	4a29      	ldr	r2, [pc, #164]	; (8009258 <prvAddNewTaskToReadyList+0xb8>)
 80091b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <prvAddNewTaskToReadyList+0xbc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091be:	4a27      	ldr	r2, [pc, #156]	; (800925c <prvAddNewTaskToReadyList+0xbc>)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091c4:	4b24      	ldr	r3, [pc, #144]	; (8009258 <prvAddNewTaskToReadyList+0xb8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d110      	bne.n	80091ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091cc:	f000 fb2e 	bl	800982c <prvInitialiseTaskLists>
 80091d0:	e00d      	b.n	80091ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091d2:	4b23      	ldr	r3, [pc, #140]	; (8009260 <prvAddNewTaskToReadyList+0xc0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <prvAddNewTaskToReadyList+0xbc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d802      	bhi.n	80091ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091e8:	4a1c      	ldr	r2, [pc, #112]	; (800925c <prvAddNewTaskToReadyList+0xbc>)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091ee:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <prvAddNewTaskToReadyList+0xc4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <prvAddNewTaskToReadyList+0xc4>)
 80091f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	2201      	movs	r2, #1
 80091fe:	409a      	lsls	r2, r3
 8009200:	4b19      	ldr	r3, [pc, #100]	; (8009268 <prvAddNewTaskToReadyList+0xc8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4313      	orrs	r3, r2
 8009206:	4a18      	ldr	r2, [pc, #96]	; (8009268 <prvAddNewTaskToReadyList+0xc8>)
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4a15      	ldr	r2, [pc, #84]	; (800926c <prvAddNewTaskToReadyList+0xcc>)
 8009218:	441a      	add	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3304      	adds	r3, #4
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7ff fcbc 	bl	8008b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009226:	f000 fd85 	bl	8009d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <prvAddNewTaskToReadyList+0xc0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009232:	4b0a      	ldr	r3, [pc, #40]	; (800925c <prvAddNewTaskToReadyList+0xbc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d207      	bcs.n	8009250 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <prvAddNewTaskToReadyList+0xd0>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000810 	.word	0x20000810
 800925c:	20000710 	.word	0x20000710
 8009260:	2000081c 	.word	0x2000081c
 8009264:	2000082c 	.word	0x2000082c
 8009268:	20000818 	.word	0x20000818
 800926c:	20000714 	.word	0x20000714
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d017      	beq.n	80092b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <vTaskDelay+0x60>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <vTaskDelay+0x30>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	60bb      	str	r3, [r7, #8]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092a4:	f000 f884 	bl	80093b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092a8:	2100      	movs	r1, #0
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fb80 	bl	80099b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092b0:	f000 f88c 	bl	80093cc <xTaskResumeAll>
 80092b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d107      	bne.n	80092cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <vTaskDelay+0x64>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000838 	.word	0x20000838
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092ea:	463a      	mov	r2, r7
 80092ec:	1d39      	adds	r1, r7, #4
 80092ee:	f107 0308 	add.w	r3, r7, #8
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f7 fd4c 	bl	8000d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	9202      	str	r2, [sp, #8]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	2300      	movs	r3, #0
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	460a      	mov	r2, r1
 800930a:	4921      	ldr	r1, [pc, #132]	; (8009390 <vTaskStartScheduler+0xb4>)
 800930c:	4821      	ldr	r0, [pc, #132]	; (8009394 <vTaskStartScheduler+0xb8>)
 800930e:	f7ff fe06 	bl	8008f1e <xTaskCreateStatic>
 8009312:	4603      	mov	r3, r0
 8009314:	4a20      	ldr	r2, [pc, #128]	; (8009398 <vTaskStartScheduler+0xbc>)
 8009316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009318:	4b1f      	ldr	r3, [pc, #124]	; (8009398 <vTaskStartScheduler+0xbc>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009320:	2301      	movs	r3, #1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e001      	b.n	800932a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d11b      	bne.n	8009368 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	613b      	str	r3, [r7, #16]
}
 8009342:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009344:	4b15      	ldr	r3, [pc, #84]	; (800939c <vTaskStartScheduler+0xc0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	334c      	adds	r3, #76	; 0x4c
 800934a:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <vTaskStartScheduler+0xc4>)
 800934c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <vTaskStartScheduler+0xc8>)
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <vTaskStartScheduler+0xcc>)
 8009358:	2201      	movs	r2, #1
 800935a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800935c:	4b13      	ldr	r3, [pc, #76]	; (80093ac <vTaskStartScheduler+0xd0>)
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009362:	f000 fc15 	bl	8009b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009366:	e00e      	b.n	8009386 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d10a      	bne.n	8009386 <vTaskStartScheduler+0xaa>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60fb      	str	r3, [r7, #12]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <vTaskStartScheduler+0xa8>
}
 8009386:	bf00      	nop
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	0800a734 	.word	0x0800a734
 8009394:	080097fd 	.word	0x080097fd
 8009398:	20000834 	.word	0x20000834
 800939c:	20000710 	.word	0x20000710
 80093a0:	20000010 	.word	0x20000010
 80093a4:	20000830 	.word	0x20000830
 80093a8:	2000081c 	.word	0x2000081c
 80093ac:	20000814 	.word	0x20000814

080093b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093b4:	4b04      	ldr	r3, [pc, #16]	; (80093c8 <vTaskSuspendAll+0x18>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a03      	ldr	r2, [pc, #12]	; (80093c8 <vTaskSuspendAll+0x18>)
 80093bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093be:	bf00      	nop
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	20000838 	.word	0x20000838

080093cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093da:	4b41      	ldr	r3, [pc, #260]	; (80094e0 <xTaskResumeAll+0x114>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	603b      	str	r3, [r7, #0]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093f8:	f000 fc6c 	bl	8009cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093fc:	4b38      	ldr	r3, [pc, #224]	; (80094e0 <xTaskResumeAll+0x114>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	4a37      	ldr	r2, [pc, #220]	; (80094e0 <xTaskResumeAll+0x114>)
 8009404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009406:	4b36      	ldr	r3, [pc, #216]	; (80094e0 <xTaskResumeAll+0x114>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d161      	bne.n	80094d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800940e:	4b35      	ldr	r3, [pc, #212]	; (80094e4 <xTaskResumeAll+0x118>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d05d      	beq.n	80094d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009416:	e02e      	b.n	8009476 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009418:	4b33      	ldr	r3, [pc, #204]	; (80094e8 <xTaskResumeAll+0x11c>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3318      	adds	r3, #24
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff fc17 	bl	8008c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fc12 	bl	8008c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	2201      	movs	r2, #1
 800943a:	409a      	lsls	r2, r3
 800943c:	4b2b      	ldr	r3, [pc, #172]	; (80094ec <xTaskResumeAll+0x120>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4313      	orrs	r3, r2
 8009442:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <xTaskResumeAll+0x120>)
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4a27      	ldr	r2, [pc, #156]	; (80094f0 <xTaskResumeAll+0x124>)
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7ff fb9e 	bl	8008b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	4b23      	ldr	r3, [pc, #140]	; (80094f4 <xTaskResumeAll+0x128>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009470:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <xTaskResumeAll+0x12c>)
 8009472:	2201      	movs	r2, #1
 8009474:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009476:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <xTaskResumeAll+0x11c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1cc      	bne.n	8009418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009484:	f000 fa74 	bl	8009970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009488:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <xTaskResumeAll+0x130>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d010      	beq.n	80094b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009494:	f000 f836 	bl	8009504 <xTaskIncrementTick>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800949e:	4b16      	ldr	r3, [pc, #88]	; (80094f8 <xTaskResumeAll+0x12c>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1f1      	bne.n	8009494 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80094b0:	4b12      	ldr	r3, [pc, #72]	; (80094fc <xTaskResumeAll+0x130>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <xTaskResumeAll+0x12c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <xTaskResumeAll+0x134>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094d2:	f000 fc2f 	bl	8009d34 <vPortExitCritical>

	return xAlreadyYielded;
 80094d6:	68bb      	ldr	r3, [r7, #8]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20000838 	.word	0x20000838
 80094e4:	20000810 	.word	0x20000810
 80094e8:	200007d0 	.word	0x200007d0
 80094ec:	20000818 	.word	0x20000818
 80094f0:	20000714 	.word	0x20000714
 80094f4:	20000710 	.word	0x20000710
 80094f8:	20000824 	.word	0x20000824
 80094fc:	20000820 	.word	0x20000820
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800950e:	4b4e      	ldr	r3, [pc, #312]	; (8009648 <xTaskIncrementTick+0x144>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f040 808e 	bne.w	8009634 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009518:	4b4c      	ldr	r3, [pc, #304]	; (800964c <xTaskIncrementTick+0x148>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009520:	4a4a      	ldr	r2, [pc, #296]	; (800964c <xTaskIncrementTick+0x148>)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d120      	bne.n	800956e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800952c:	4b48      	ldr	r3, [pc, #288]	; (8009650 <xTaskIncrementTick+0x14c>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <xTaskIncrementTick+0x48>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	603b      	str	r3, [r7, #0]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <xTaskIncrementTick+0x46>
 800954c:	4b40      	ldr	r3, [pc, #256]	; (8009650 <xTaskIncrementTick+0x14c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	4b40      	ldr	r3, [pc, #256]	; (8009654 <xTaskIncrementTick+0x150>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a3e      	ldr	r2, [pc, #248]	; (8009650 <xTaskIncrementTick+0x14c>)
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	4a3e      	ldr	r2, [pc, #248]	; (8009654 <xTaskIncrementTick+0x150>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	4b3d      	ldr	r3, [pc, #244]	; (8009658 <xTaskIncrementTick+0x154>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a3c      	ldr	r2, [pc, #240]	; (8009658 <xTaskIncrementTick+0x154>)
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	f000 fa01 	bl	8009970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800956e:	4b3b      	ldr	r3, [pc, #236]	; (800965c <xTaskIncrementTick+0x158>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	429a      	cmp	r2, r3
 8009576:	d348      	bcc.n	800960a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009578:	4b35      	ldr	r3, [pc, #212]	; (8009650 <xTaskIncrementTick+0x14c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d104      	bne.n	800958c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009582:	4b36      	ldr	r3, [pc, #216]	; (800965c <xTaskIncrementTick+0x158>)
 8009584:	f04f 32ff 	mov.w	r2, #4294967295
 8009588:	601a      	str	r2, [r3, #0]
					break;
 800958a:	e03e      	b.n	800960a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958c:	4b30      	ldr	r3, [pc, #192]	; (8009650 <xTaskIncrementTick+0x14c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d203      	bcs.n	80095ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095a4:	4a2d      	ldr	r2, [pc, #180]	; (800965c <xTaskIncrementTick+0x158>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095aa:	e02e      	b.n	800960a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff fb51 	bl	8008c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	3318      	adds	r3, #24
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff fb48 	bl	8008c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	2201      	movs	r2, #1
 80095ce:	409a      	lsls	r2, r3
 80095d0:	4b23      	ldr	r3, [pc, #140]	; (8009660 <xTaskIncrementTick+0x15c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	4a22      	ldr	r2, [pc, #136]	; (8009660 <xTaskIncrementTick+0x15c>)
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4a1f      	ldr	r2, [pc, #124]	; (8009664 <xTaskIncrementTick+0x160>)
 80095e8:	441a      	add	r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7ff fad4 	bl	8008b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <xTaskIncrementTick+0x164>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	429a      	cmp	r2, r3
 8009602:	d3b9      	bcc.n	8009578 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009604:	2301      	movs	r3, #1
 8009606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009608:	e7b6      	b.n	8009578 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800960a:	4b17      	ldr	r3, [pc, #92]	; (8009668 <xTaskIncrementTick+0x164>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4914      	ldr	r1, [pc, #80]	; (8009664 <xTaskIncrementTick+0x160>)
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d901      	bls.n	8009626 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009622:	2301      	movs	r3, #1
 8009624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009626:	4b11      	ldr	r3, [pc, #68]	; (800966c <xTaskIncrementTick+0x168>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d007      	beq.n	800963e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800962e:	2301      	movs	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e004      	b.n	800963e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <xTaskIncrementTick+0x16c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	4a0d      	ldr	r2, [pc, #52]	; (8009670 <xTaskIncrementTick+0x16c>)
 800963c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800963e:	697b      	ldr	r3, [r7, #20]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000838 	.word	0x20000838
 800964c:	20000814 	.word	0x20000814
 8009650:	200007c8 	.word	0x200007c8
 8009654:	200007cc 	.word	0x200007cc
 8009658:	20000828 	.word	0x20000828
 800965c:	20000830 	.word	0x20000830
 8009660:	20000818 	.word	0x20000818
 8009664:	20000714 	.word	0x20000714
 8009668:	20000710 	.word	0x20000710
 800966c:	20000824 	.word	0x20000824
 8009670:	20000820 	.word	0x20000820

08009674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800967a:	4b29      	ldr	r3, [pc, #164]	; (8009720 <vTaskSwitchContext+0xac>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009682:	4b28      	ldr	r3, [pc, #160]	; (8009724 <vTaskSwitchContext+0xb0>)
 8009684:	2201      	movs	r2, #1
 8009686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009688:	e044      	b.n	8009714 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800968a:	4b26      	ldr	r3, [pc, #152]	; (8009724 <vTaskSwitchContext+0xb0>)
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	4b25      	ldr	r3, [pc, #148]	; (8009728 <vTaskSwitchContext+0xb4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	fab3 f383 	clz	r3, r3
 800969c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	f1c3 031f 	rsb	r3, r3, #31
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	4921      	ldr	r1, [pc, #132]	; (800972c <vTaskSwitchContext+0xb8>)
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	607b      	str	r3, [r7, #4]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <vTaskSwitchContext+0x5a>
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4a14      	ldr	r2, [pc, #80]	; (800972c <vTaskSwitchContext+0xb8>)
 80096dc:	4413      	add	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	605a      	str	r2, [r3, #4]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3308      	adds	r3, #8
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d104      	bne.n	8009700 <vTaskSwitchContext+0x8c>
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	605a      	str	r2, [r3, #4]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	4a0a      	ldr	r2, [pc, #40]	; (8009730 <vTaskSwitchContext+0xbc>)
 8009708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800970a:	4b09      	ldr	r3, [pc, #36]	; (8009730 <vTaskSwitchContext+0xbc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	334c      	adds	r3, #76	; 0x4c
 8009710:	4a08      	ldr	r2, [pc, #32]	; (8009734 <vTaskSwitchContext+0xc0>)
 8009712:	6013      	str	r3, [r2, #0]
}
 8009714:	bf00      	nop
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000838 	.word	0x20000838
 8009724:	20000824 	.word	0x20000824
 8009728:	20000818 	.word	0x20000818
 800972c:	20000714 	.word	0x20000714
 8009730:	20000710 	.word	0x20000710
 8009734:	20000010 	.word	0x20000010

08009738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3318      	adds	r3, #24
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fa75 	bl	8008c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976e:	4b1d      	ldr	r3, [pc, #116]	; (80097e4 <xTaskRemoveFromEventList+0xac>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11c      	bne.n	80097b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	3304      	adds	r3, #4
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff fa6c 	bl	8008c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	2201      	movs	r2, #1
 8009786:	409a      	lsls	r2, r3
 8009788:	4b17      	ldr	r3, [pc, #92]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4313      	orrs	r3, r2
 800978e:	4a16      	ldr	r2, [pc, #88]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4a13      	ldr	r2, [pc, #76]	; (80097ec <xTaskRemoveFromEventList+0xb4>)
 80097a0:	441a      	add	r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7ff f9f8 	bl	8008b9e <vListInsertEnd>
 80097ae:	e005      	b.n	80097bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3318      	adds	r3, #24
 80097b4:	4619      	mov	r1, r3
 80097b6:	480e      	ldr	r0, [pc, #56]	; (80097f0 <xTaskRemoveFromEventList+0xb8>)
 80097b8:	f7ff f9f1 	bl	8008b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <xTaskRemoveFromEventList+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d905      	bls.n	80097d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097ca:	2301      	movs	r3, #1
 80097cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097ce:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <xTaskRemoveFromEventList+0xc0>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e001      	b.n	80097da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097da:	697b      	ldr	r3, [r7, #20]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000838 	.word	0x20000838
 80097e8:	20000818 	.word	0x20000818
 80097ec:	20000714 	.word	0x20000714
 80097f0:	200007d0 	.word	0x200007d0
 80097f4:	20000710 	.word	0x20000710
 80097f8:	20000824 	.word	0x20000824

080097fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009804:	f000 f852 	bl	80098ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <prvIdleTask+0x28>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d9f9      	bls.n	8009804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <prvIdleTask+0x2c>)
 8009812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009820:	e7f0      	b.n	8009804 <prvIdleTask+0x8>
 8009822:	bf00      	nop
 8009824:	20000714 	.word	0x20000714
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	e00c      	b.n	8009852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4a12      	ldr	r2, [pc, #72]	; (800988c <prvInitialiseTaskLists+0x60>)
 8009844:	4413      	add	r3, r2
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff f97c 	bl	8008b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3301      	adds	r3, #1
 8009850:	607b      	str	r3, [r7, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b06      	cmp	r3, #6
 8009856:	d9ef      	bls.n	8009838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009858:	480d      	ldr	r0, [pc, #52]	; (8009890 <prvInitialiseTaskLists+0x64>)
 800985a:	f7ff f973 	bl	8008b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800985e:	480d      	ldr	r0, [pc, #52]	; (8009894 <prvInitialiseTaskLists+0x68>)
 8009860:	f7ff f970 	bl	8008b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009864:	480c      	ldr	r0, [pc, #48]	; (8009898 <prvInitialiseTaskLists+0x6c>)
 8009866:	f7ff f96d 	bl	8008b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800986a:	480c      	ldr	r0, [pc, #48]	; (800989c <prvInitialiseTaskLists+0x70>)
 800986c:	f7ff f96a 	bl	8008b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009870:	480b      	ldr	r0, [pc, #44]	; (80098a0 <prvInitialiseTaskLists+0x74>)
 8009872:	f7ff f967 	bl	8008b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <prvInitialiseTaskLists+0x78>)
 8009878:	4a05      	ldr	r2, [pc, #20]	; (8009890 <prvInitialiseTaskLists+0x64>)
 800987a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800987c:	4b0a      	ldr	r3, [pc, #40]	; (80098a8 <prvInitialiseTaskLists+0x7c>)
 800987e:	4a05      	ldr	r2, [pc, #20]	; (8009894 <prvInitialiseTaskLists+0x68>)
 8009880:	601a      	str	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000714 	.word	0x20000714
 8009890:	200007a0 	.word	0x200007a0
 8009894:	200007b4 	.word	0x200007b4
 8009898:	200007d0 	.word	0x200007d0
 800989c:	200007e4 	.word	0x200007e4
 80098a0:	200007fc 	.word	0x200007fc
 80098a4:	200007c8 	.word	0x200007c8
 80098a8:	200007cc 	.word	0x200007cc

080098ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098b2:	e019      	b.n	80098e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098b4:	f000 fa0e 	bl	8009cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b8:	4b10      	ldr	r3, [pc, #64]	; (80098fc <prvCheckTasksWaitingTermination+0x50>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff f9c7 	bl	8008c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098ca:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <prvCheckTasksWaitingTermination+0x54>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	4a0b      	ldr	r2, [pc, #44]	; (8009900 <prvCheckTasksWaitingTermination+0x54>)
 80098d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098d4:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <prvCheckTasksWaitingTermination+0x58>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3b01      	subs	r3, #1
 80098da:	4a0a      	ldr	r2, [pc, #40]	; (8009904 <prvCheckTasksWaitingTermination+0x58>)
 80098dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098de:	f000 fa29 	bl	8009d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f810 	bl	8009908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098e8:	4b06      	ldr	r3, [pc, #24]	; (8009904 <prvCheckTasksWaitingTermination+0x58>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e1      	bne.n	80098b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200007e4 	.word	0x200007e4
 8009900:	20000810 	.word	0x20000810
 8009904:	200007f8 	.word	0x200007f8

08009908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	334c      	adds	r3, #76	; 0x4c
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fd2f 	bl	800a378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fb81 	bl	800a030 <vPortFree>
				vPortFree( pxTCB );
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb7e 	bl	800a030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009934:	e018      	b.n	8009968 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800993c:	2b01      	cmp	r3, #1
 800993e:	d103      	bne.n	8009948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fb75 	bl	800a030 <vPortFree>
	}
 8009946:	e00f      	b.n	8009968 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800994e:	2b02      	cmp	r3, #2
 8009950:	d00a      	beq.n	8009968 <prvDeleteTCB+0x60>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	60fb      	str	r3, [r7, #12]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <prvDeleteTCB+0x5e>
	}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <prvResetNextTaskUnblockTime+0x38>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <prvResetNextTaskUnblockTime+0x3c>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009988:	e008      	b.n	800999c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <prvResetNextTaskUnblockTime+0x38>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvResetNextTaskUnblockTime+0x3c>)
 800999a:	6013      	str	r3, [r2, #0]
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	200007c8 	.word	0x200007c8
 80099ac:	20000830 	.word	0x20000830

080099b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099ba:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <prvAddCurrentTaskToDelayedList+0xb0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099c0:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff f946 	bl	8008c58 <uxListRemove>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10b      	bne.n	80099ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099d2:	4b24      	ldr	r3, [pc, #144]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	2201      	movs	r2, #1
 80099da:	fa02 f303 	lsl.w	r3, r2, r3
 80099de:	43da      	mvns	r2, r3
 80099e0:	4b21      	ldr	r3, [pc, #132]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4013      	ands	r3, r2
 80099e6:	4a20      	ldr	r2, [pc, #128]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f0:	d10a      	bne.n	8009a08 <prvAddCurrentTaskToDelayedList+0x58>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099f8:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4619      	mov	r1, r3
 8009a00:	481a      	ldr	r0, [pc, #104]	; (8009a6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a02:	f7ff f8cc 	bl	8008b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a06:	e026      	b.n	8009a56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a10:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d209      	bcs.n	8009a34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7ff f8da 	bl	8008be6 <vListInsert>
}
 8009a32:	e010      	b.n	8009a56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a34:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7ff f8d0 	bl	8008be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d202      	bcs.n	8009a56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a50:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6013      	str	r3, [r2, #0]
}
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000814 	.word	0x20000814
 8009a64:	20000710 	.word	0x20000710
 8009a68:	20000818 	.word	0x20000818
 8009a6c:	200007fc 	.word	0x200007fc
 8009a70:	200007cc 	.word	0x200007cc
 8009a74:	200007c8 	.word	0x200007c8
 8009a78:	20000830 	.word	0x20000830

08009a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3b04      	subs	r3, #4
 8009a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3b04      	subs	r3, #4
 8009a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f023 0201 	bic.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aac:	4a0c      	ldr	r2, [pc, #48]	; (8009ae0 <pxPortInitialiseStack+0x64>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b14      	subs	r3, #20
 8009ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3b04      	subs	r3, #4
 8009ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f06f 0202 	mvn.w	r2, #2
 8009aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3b20      	subs	r3, #32
 8009ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	08009ae5 	.word	0x08009ae5

08009ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <prvTaskExitError+0x54>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d00a      	beq.n	8009b0e <prvTaskExitError+0x2a>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	60fb      	str	r3, [r7, #12]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <prvTaskExitError+0x28>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	60bb      	str	r3, [r7, #8]
}
 8009b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b22:	bf00      	nop
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0fc      	beq.n	8009b24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	2000000c 	.word	0x2000000c
 8009b3c:	00000000 	.word	0x00000000

08009b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <pxCurrentTCBConst2>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	6808      	ldr	r0, [r1, #0]
 8009b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	f380 8809 	msr	PSP, r0
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	4770      	bx	lr
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst2>:
 8009b60:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b68:	4808      	ldr	r0, [pc, #32]	; (8009b8c <prvPortStartFirstTask+0x24>)
 8009b6a:	6800      	ldr	r0, [r0, #0]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f380 8808 	msr	MSP, r0
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8814 	msr	CONTROL, r0
 8009b7a:	b662      	cpsie	i
 8009b7c:	b661      	cpsie	f
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	df00      	svc	0
 8009b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b8a:	bf00      	nop
 8009b8c:	e000ed08 	.word	0xe000ed08

08009b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b96:	4b46      	ldr	r3, [pc, #280]	; (8009cb0 <xPortStartScheduler+0x120>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a46      	ldr	r2, [pc, #280]	; (8009cb4 <xPortStartScheduler+0x124>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10a      	bne.n	8009bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009bb6:	4b3e      	ldr	r3, [pc, #248]	; (8009cb0 <xPortStartScheduler+0x120>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3f      	ldr	r2, [pc, #252]	; (8009cb8 <xPortStartScheduler+0x128>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10a      	bne.n	8009bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	60fb      	str	r3, [r7, #12]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bd6:	4b39      	ldr	r3, [pc, #228]	; (8009cbc <xPortStartScheduler+0x12c>)
 8009bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	22ff      	movs	r2, #255	; 0xff
 8009be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	4b31      	ldr	r3, [pc, #196]	; (8009cc0 <xPortStartScheduler+0x130>)
 8009bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c04:	e009      	b.n	8009c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c06:	4b2f      	ldr	r3, [pc, #188]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	4a2d      	ldr	r2, [pc, #180]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	2b80      	cmp	r3, #128	; 0x80
 8009c24:	d0ef      	beq.n	8009c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c26:	4b27      	ldr	r3, [pc, #156]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1c3 0307 	rsb	r3, r3, #7
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d00a      	beq.n	8009c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	60bb      	str	r3, [r7, #8]
}
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c48:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c52:	4b1c      	ldr	r3, [pc, #112]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c5a:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <xPortStartScheduler+0x134>)
 8009c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c66:	4b18      	ldr	r3, [pc, #96]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a14      	ldr	r2, [pc, #80]	; (8009cc8 <xPortStartScheduler+0x138>)
 8009c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c7e:	f000 f8dd 	bl	8009e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <xPortStartScheduler+0x13c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c88:	f000 f8fc 	bl	8009e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c8c:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <xPortStartScheduler+0x140>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a0f      	ldr	r2, [pc, #60]	; (8009cd0 <xPortStartScheduler+0x140>)
 8009c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c98:	f7ff ff66 	bl	8009b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c9c:	f7ff fcea 	bl	8009674 <vTaskSwitchContext>
	prvTaskExitError();
 8009ca0:	f7ff ff20 	bl	8009ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	e000ed00 	.word	0xe000ed00
 8009cb4:	410fc271 	.word	0x410fc271
 8009cb8:	410fc270 	.word	0x410fc270
 8009cbc:	e000e400 	.word	0xe000e400
 8009cc0:	2000083c 	.word	0x2000083c
 8009cc4:	20000840 	.word	0x20000840
 8009cc8:	e000ed20 	.word	0xe000ed20
 8009ccc:	2000000c 	.word	0x2000000c
 8009cd0:	e000ef34 	.word	0xe000ef34

08009cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	607b      	str	r3, [r7, #4]
}
 8009cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cee:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a0d      	ldr	r2, [pc, #52]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <vPortEnterCritical+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10f      	bne.n	8009d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <vPortEnterCritical+0x5c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	603b      	str	r3, [r7, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <vPortEnterCritical+0x4a>
	}
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	2000000c 	.word	0x2000000c
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d3a:	4b12      	ldr	r3, [pc, #72]	; (8009d84 <vPortExitCritical+0x50>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <vPortExitCritical+0x24>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d58:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <vPortExitCritical+0x50>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <vPortExitCritical+0x50>)
 8009d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <vPortExitCritical+0x50>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <vPortExitCritical+0x42>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	f383 8811 	msr	BASEPRI, r3
}
 8009d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	2000000c 	.word	0x2000000c
	...

08009d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d90:	f3ef 8009 	mrs	r0, PSP
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <pxCurrentTCBConst>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	f01e 0f10 	tst.w	lr, #16
 8009da0:	bf08      	it	eq
 8009da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	6010      	str	r0, [r2, #0]
 8009dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009db4:	f380 8811 	msr	BASEPRI, r0
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f7ff fc58 	bl	8009674 <vTaskSwitchContext>
 8009dc4:	f04f 0000 	mov.w	r0, #0
 8009dc8:	f380 8811 	msr	BASEPRI, r0
 8009dcc:	bc09      	pop	{r0, r3}
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd6:	f01e 0f10 	tst.w	lr, #16
 8009dda:	bf08      	it	eq
 8009ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009de0:	f380 8809 	msr	PSP, r0
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w

08009df0 <pxCurrentTCBConst>:
 8009df0:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop

08009df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	607b      	str	r3, [r7, #4]
}
 8009e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e12:	f7ff fb77 	bl	8009504 <xTaskIncrementTick>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <SysTick_Handler+0x40>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f383 8811 	msr	BASEPRI, r3
}
 8009e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e46:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <vPortSetupTimerInterrupt+0x38>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <vPortSetupTimerInterrupt+0x3c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <vPortSetupTimerInterrupt+0x40>)
 8009e52:	fba2 2303 	umull	r2, r3, r2, r3
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <vPortSetupTimerInterrupt+0x44>)
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e5e:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <vPortSetupTimerInterrupt+0x34>)
 8009e60:	2207      	movs	r2, #7
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	e000e010 	.word	0xe000e010
 8009e74:	e000e018 	.word	0xe000e018
 8009e78:	20000000 	.word	0x20000000
 8009e7c:	10624dd3 	.word	0x10624dd3
 8009e80:	e000e014 	.word	0xe000e014

08009e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e94 <vPortEnableVFP+0x10>
 8009e88:	6801      	ldr	r1, [r0, #0]
 8009e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e8e:	6001      	str	r1, [r0, #0]
 8009e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e92:	bf00      	nop
 8009e94:	e000ed88 	.word	0xe000ed88

08009e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08a      	sub	sp, #40	; 0x28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ea4:	f7ff fa84 	bl	80093b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ea8:	4b5b      	ldr	r3, [pc, #364]	; (800a018 <pvPortMalloc+0x180>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009eb0:	f000 f920 	bl	800a0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009eb4:	4b59      	ldr	r3, [pc, #356]	; (800a01c <pvPortMalloc+0x184>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 8093 	bne.w	8009fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01d      	beq.n	8009f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ec8:	2208      	movs	r2, #8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d014      	beq.n	8009f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f023 0307 	bic.w	r3, r3, #7
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <pvPortMalloc+0x6c>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	617b      	str	r3, [r7, #20]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d06e      	beq.n	8009fe8 <pvPortMalloc+0x150>
 8009f0a:	4b45      	ldr	r3, [pc, #276]	; (800a020 <pvPortMalloc+0x188>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d869      	bhi.n	8009fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f14:	4b43      	ldr	r3, [pc, #268]	; (800a024 <pvPortMalloc+0x18c>)
 8009f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f18:	4b42      	ldr	r3, [pc, #264]	; (800a024 <pvPortMalloc+0x18c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f1e:	e004      	b.n	8009f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d903      	bls.n	8009f3c <pvPortMalloc+0xa4>
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f1      	bne.n	8009f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f3c:	4b36      	ldr	r3, [pc, #216]	; (800a018 <pvPortMalloc+0x180>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d050      	beq.n	8009fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	4413      	add	r3, r2
 8009f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	2308      	movs	r3, #8
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d91f      	bls.n	8009fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <pvPortMalloc+0xf8>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	613b      	str	r3, [r7, #16]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fa2:	69b8      	ldr	r0, [r7, #24]
 8009fa4:	f000 f908 	bl	800a1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fa8:	4b1d      	ldr	r3, [pc, #116]	; (800a020 <pvPortMalloc+0x188>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	4a1b      	ldr	r2, [pc, #108]	; (800a020 <pvPortMalloc+0x188>)
 8009fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fb6:	4b1a      	ldr	r3, [pc, #104]	; (800a020 <pvPortMalloc+0x188>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4b1b      	ldr	r3, [pc, #108]	; (800a028 <pvPortMalloc+0x190>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d203      	bcs.n	8009fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fc2:	4b17      	ldr	r3, [pc, #92]	; (800a020 <pvPortMalloc+0x188>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a18      	ldr	r2, [pc, #96]	; (800a028 <pvPortMalloc+0x190>)
 8009fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	4b13      	ldr	r3, [pc, #76]	; (800a01c <pvPortMalloc+0x184>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <pvPortMalloc+0x194>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	4a11      	ldr	r2, [pc, #68]	; (800a02c <pvPortMalloc+0x194>)
 8009fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fe8:	f7ff f9f0 	bl	80093cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	f003 0307 	and.w	r3, r3, #7
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <pvPortMalloc+0x174>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60fb      	str	r3, [r7, #12]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <pvPortMalloc+0x172>
	return pvReturn;
 800a00c:	69fb      	ldr	r3, [r7, #28]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3728      	adds	r7, #40	; 0x28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	2001024c 	.word	0x2001024c
 800a01c:	20010260 	.word	0x20010260
 800a020:	20010250 	.word	0x20010250
 800a024:	20010244 	.word	0x20010244
 800a028:	20010254 	.word	0x20010254
 800a02c:	20010258 	.word	0x20010258

0800a030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d04d      	beq.n	800a0de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a042:	2308      	movs	r3, #8
 800a044:	425b      	negs	r3, r3
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4413      	add	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <vPortFree+0xb8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4013      	ands	r3, r2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <vPortFree+0x44>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60fb      	str	r3, [r7, #12]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <vPortFree+0x62>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60bb      	str	r3, [r7, #8]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <vPortFree+0xb8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01e      	beq.n	800a0de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d11a      	bne.n	800a0de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <vPortFree+0xb8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	43db      	mvns	r3, r3
 800a0b2:	401a      	ands	r2, r3
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0b8:	f7ff f97a 	bl	80093b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <vPortFree+0xbc>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <vPortFree+0xbc>)
 800a0c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f000 f874 	bl	800a1b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <vPortFree+0xc0>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <vPortFree+0xc0>)
 800a0d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0da:	f7ff f977 	bl	80093cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20010260 	.word	0x20010260
 800a0ec:	20010250 	.word	0x20010250
 800a0f0:	2001025c 	.word	0x2001025c

0800a0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0fa:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800a0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a100:	4b27      	ldr	r3, [pc, #156]	; (800a1a0 <prvHeapInit+0xac>)
 800a102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f003 0307 	and.w	r3, r3, #7
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3307      	adds	r3, #7
 800a112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f023 0307 	bic.w	r3, r3, #7
 800a11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	4a1f      	ldr	r2, [pc, #124]	; (800a1a0 <prvHeapInit+0xac>)
 800a124:	4413      	add	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a12c:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <prvHeapInit+0xb0>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <prvHeapInit+0xb0>)
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4413      	add	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a140:	2208      	movs	r2, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f023 0307 	bic.w	r3, r3, #7
 800a14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a15      	ldr	r2, [pc, #84]	; (800a1a8 <prvHeapInit+0xb4>)
 800a154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <prvHeapInit+0xb4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2200      	movs	r2, #0
 800a15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <prvHeapInit+0xb4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <prvHeapInit+0xb4>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	4a0a      	ldr	r2, [pc, #40]	; (800a1ac <prvHeapInit+0xb8>)
 800a182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <prvHeapInit+0xbc>)
 800a18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <prvHeapInit+0xc0>)
 800a18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20000844 	.word	0x20000844
 800a1a4:	20010244 	.word	0x20010244
 800a1a8:	2001024c 	.word	0x2001024c
 800a1ac:	20010254 	.word	0x20010254
 800a1b0:	20010250 	.word	0x20010250
 800a1b4:	20010260 	.word	0x20010260

0800a1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1c0:	4b28      	ldr	r3, [pc, #160]	; (800a264 <prvInsertBlockIntoFreeList+0xac>)
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e002      	b.n	800a1cc <prvInsertBlockIntoFreeList+0x14>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d8f7      	bhi.n	800a1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d108      	bne.n	800a1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	441a      	add	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d118      	bne.n	800a240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	4b15      	ldr	r3, [pc, #84]	; (800a268 <prvInsertBlockIntoFreeList+0xb0>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d00d      	beq.n	800a236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	e008      	b.n	800a248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <prvInsertBlockIntoFreeList+0xb0>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
 800a23e:	e003      	b.n	800a248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d002      	beq.n	800a256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20010244 	.word	0x20010244
 800a268:	2001024c 	.word	0x2001024c

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4d0d      	ldr	r5, [pc, #52]	; (800a2a4 <__libc_init_array+0x38>)
 800a270:	4c0d      	ldr	r4, [pc, #52]	; (800a2a8 <__libc_init_array+0x3c>)
 800a272:	1b64      	subs	r4, r4, r5
 800a274:	10a4      	asrs	r4, r4, #2
 800a276:	2600      	movs	r6, #0
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	4d0b      	ldr	r5, [pc, #44]	; (800a2ac <__libc_init_array+0x40>)
 800a27e:	4c0c      	ldr	r4, [pc, #48]	; (800a2b0 <__libc_init_array+0x44>)
 800a280:	f000 f8e2 	bl	800a448 <_init>
 800a284:	1b64      	subs	r4, r4, r5
 800a286:	10a4      	asrs	r4, r4, #2
 800a288:	2600      	movs	r6, #0
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800a7c4 	.word	0x0800a7c4
 800a2a8:	0800a7c4 	.word	0x0800a7c4
 800a2ac:	0800a7c4 	.word	0x0800a7c4
 800a2b0:	0800a7c8 	.word	0x0800a7c8

0800a2b4 <memset>:
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <memset+0xa>
 800a2bc:	4770      	bx	lr
 800a2be:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c2:	e7f9      	b.n	800a2b8 <memset+0x4>

0800a2c4 <_free_r>:
 800a2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	d044      	beq.n	800a354 <_free_r+0x90>
 800a2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ce:	9001      	str	r0, [sp, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2d6:	bfb8      	it	lt
 800a2d8:	18e4      	addlt	r4, r4, r3
 800a2da:	f000 f8a9 	bl	800a430 <__malloc_lock>
 800a2de:	4a1e      	ldr	r2, [pc, #120]	; (800a358 <_free_r+0x94>)
 800a2e0:	9801      	ldr	r0, [sp, #4]
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	b933      	cbnz	r3, 800a2f4 <_free_r+0x30>
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	6014      	str	r4, [r2, #0]
 800a2ea:	b003      	add	sp, #12
 800a2ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f0:	f000 b8a4 	b.w	800a43c <__malloc_unlock>
 800a2f4:	42a3      	cmp	r3, r4
 800a2f6:	d908      	bls.n	800a30a <_free_r+0x46>
 800a2f8:	6825      	ldr	r5, [r4, #0]
 800a2fa:	1961      	adds	r1, r4, r5
 800a2fc:	428b      	cmp	r3, r1
 800a2fe:	bf01      	itttt	eq
 800a300:	6819      	ldreq	r1, [r3, #0]
 800a302:	685b      	ldreq	r3, [r3, #4]
 800a304:	1949      	addeq	r1, r1, r5
 800a306:	6021      	streq	r1, [r4, #0]
 800a308:	e7ed      	b.n	800a2e6 <_free_r+0x22>
 800a30a:	461a      	mov	r2, r3
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	b10b      	cbz	r3, 800a314 <_free_r+0x50>
 800a310:	42a3      	cmp	r3, r4
 800a312:	d9fa      	bls.n	800a30a <_free_r+0x46>
 800a314:	6811      	ldr	r1, [r2, #0]
 800a316:	1855      	adds	r5, r2, r1
 800a318:	42a5      	cmp	r5, r4
 800a31a:	d10b      	bne.n	800a334 <_free_r+0x70>
 800a31c:	6824      	ldr	r4, [r4, #0]
 800a31e:	4421      	add	r1, r4
 800a320:	1854      	adds	r4, r2, r1
 800a322:	42a3      	cmp	r3, r4
 800a324:	6011      	str	r1, [r2, #0]
 800a326:	d1e0      	bne.n	800a2ea <_free_r+0x26>
 800a328:	681c      	ldr	r4, [r3, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	6053      	str	r3, [r2, #4]
 800a32e:	4421      	add	r1, r4
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	e7da      	b.n	800a2ea <_free_r+0x26>
 800a334:	d902      	bls.n	800a33c <_free_r+0x78>
 800a336:	230c      	movs	r3, #12
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	e7d6      	b.n	800a2ea <_free_r+0x26>
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	428b      	cmp	r3, r1
 800a342:	bf04      	itt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	bf04      	itt	eq
 800a34c:	1949      	addeq	r1, r1, r5
 800a34e:	6021      	streq	r1, [r4, #0]
 800a350:	6054      	str	r4, [r2, #4]
 800a352:	e7ca      	b.n	800a2ea <_free_r+0x26>
 800a354:	b003      	add	sp, #12
 800a356:	bd30      	pop	{r4, r5, pc}
 800a358:	20010264 	.word	0x20010264

0800a35c <cleanup_glue>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	460c      	mov	r4, r1
 800a360:	6809      	ldr	r1, [r1, #0]
 800a362:	4605      	mov	r5, r0
 800a364:	b109      	cbz	r1, 800a36a <cleanup_glue+0xe>
 800a366:	f7ff fff9 	bl	800a35c <cleanup_glue>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a372:	f7ff bfa7 	b.w	800a2c4 <_free_r>
	...

0800a378 <_reclaim_reent>:
 800a378:	4b2c      	ldr	r3, [pc, #176]	; (800a42c <_reclaim_reent+0xb4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4283      	cmp	r3, r0
 800a37e:	b570      	push	{r4, r5, r6, lr}
 800a380:	4604      	mov	r4, r0
 800a382:	d051      	beq.n	800a428 <_reclaim_reent+0xb0>
 800a384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a386:	b143      	cbz	r3, 800a39a <_reclaim_reent+0x22>
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d14a      	bne.n	800a424 <_reclaim_reent+0xac>
 800a38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a390:	6819      	ldr	r1, [r3, #0]
 800a392:	b111      	cbz	r1, 800a39a <_reclaim_reent+0x22>
 800a394:	4620      	mov	r0, r4
 800a396:	f7ff ff95 	bl	800a2c4 <_free_r>
 800a39a:	6961      	ldr	r1, [r4, #20]
 800a39c:	b111      	cbz	r1, 800a3a4 <_reclaim_reent+0x2c>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7ff ff90 	bl	800a2c4 <_free_r>
 800a3a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3a6:	b111      	cbz	r1, 800a3ae <_reclaim_reent+0x36>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7ff ff8b 	bl	800a2c4 <_free_r>
 800a3ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a3b0:	b111      	cbz	r1, 800a3b8 <_reclaim_reent+0x40>
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f7ff ff86 	bl	800a2c4 <_free_r>
 800a3b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a3ba:	b111      	cbz	r1, 800a3c2 <_reclaim_reent+0x4a>
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7ff ff81 	bl	800a2c4 <_free_r>
 800a3c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3c4:	b111      	cbz	r1, 800a3cc <_reclaim_reent+0x54>
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff ff7c 	bl	800a2c4 <_free_r>
 800a3cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a3ce:	b111      	cbz	r1, 800a3d6 <_reclaim_reent+0x5e>
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff ff77 	bl	800a2c4 <_free_r>
 800a3d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a3d8:	b111      	cbz	r1, 800a3e0 <_reclaim_reent+0x68>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7ff ff72 	bl	800a2c4 <_free_r>
 800a3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3e2:	b111      	cbz	r1, 800a3ea <_reclaim_reent+0x72>
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7ff ff6d 	bl	800a2c4 <_free_r>
 800a3ea:	69a3      	ldr	r3, [r4, #24]
 800a3ec:	b1e3      	cbz	r3, 800a428 <_reclaim_reent+0xb0>
 800a3ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4798      	blx	r3
 800a3f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a3f6:	b1b9      	cbz	r1, 800a428 <_reclaim_reent+0xb0>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3fe:	f7ff bfad 	b.w	800a35c <cleanup_glue>
 800a402:	5949      	ldr	r1, [r1, r5]
 800a404:	b941      	cbnz	r1, 800a418 <_reclaim_reent+0xa0>
 800a406:	3504      	adds	r5, #4
 800a408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a40a:	2d80      	cmp	r5, #128	; 0x80
 800a40c:	68d9      	ldr	r1, [r3, #12]
 800a40e:	d1f8      	bne.n	800a402 <_reclaim_reent+0x8a>
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff ff57 	bl	800a2c4 <_free_r>
 800a416:	e7ba      	b.n	800a38e <_reclaim_reent+0x16>
 800a418:	680e      	ldr	r6, [r1, #0]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f7ff ff52 	bl	800a2c4 <_free_r>
 800a420:	4631      	mov	r1, r6
 800a422:	e7ef      	b.n	800a404 <_reclaim_reent+0x8c>
 800a424:	2500      	movs	r5, #0
 800a426:	e7ef      	b.n	800a408 <_reclaim_reent+0x90>
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	bf00      	nop
 800a42c:	20000010 	.word	0x20000010

0800a430 <__malloc_lock>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__malloc_lock+0x8>)
 800a432:	f7f7 ba74 	b.w	800191e <__retarget_lock_acquire_recursive>
 800a436:	bf00      	nop
 800a438:	20000700 	.word	0x20000700

0800a43c <__malloc_unlock>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__malloc_unlock+0x8>)
 800a43e:	f7f7 ba82 	b.w	8001946 <__retarget_lock_release_recursive>
 800a442:	bf00      	nop
 800a444:	20000700 	.word	0x20000700

0800a448 <_init>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr

0800a454 <_fini>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	bf00      	nop
 800a458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45a:	bc08      	pop	{r3}
 800a45c:	469e      	mov	lr, r3
 800a45e:	4770      	bx	lr
