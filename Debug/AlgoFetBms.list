
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800babc  0800babc  0001babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be08  0800be08  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be10  0800be10  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be10  0800be10  0001be10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be14  0800be14  0001be14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800be18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010348  200000b4  0800becc  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200103fc  0800becc  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022aab  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056bd  00000000  00000000  00042b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00048250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  00049f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028179  00000000  00000000  0004ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029353  00000000  00000000  00073c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f293c  00000000  00000000  0009cf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f8a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078f4  00000000  00000000  0018f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800baa4 	.word	0x0800baa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800baa4 	.word	0x0800baa4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	4613      	mov	r3, r2
 8000520:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	b2da      	uxtb	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000530:	f240 1301 	movw	r3, #257	; 0x101
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_OvrVIEW_can_codegen(BAT_BMS_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e007      	b.n	8000560 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x20>
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	73fa      	strb	r2, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	2200      	movs	r2, #0
 800055e:	715a      	strb	r2, [r3, #5]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d802      	bhi.n	800056c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x2c>
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d9f1      	bls.n	8000550 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_StateReqSrc & (0xFFU));
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	795a      	ldrb	r2, [r3, #5]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4313      	orrs	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_bms_PackState & (0xFFU));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	799a      	ldrb	r2, [r3, #6]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	4313      	orrs	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	719a      	strb	r2, [r3, #6]

  cframe->MsgId = BAT_BMS_OvrVIEW_CANID;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
 8000590:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_OvrVIEW_DLC;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2202      	movs	r2, #2
 8000596:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_OvrVIEW_IDE;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_OvrVIEW_CANID;
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	001ff610 	.word	0x001ff610

080005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_ExtTemp_can_codegen(BAT_BMS_ExtTemp_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_ExtTemp_DLC) && (i < 8); cframe->Data[i++] = 0);
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e007      	b.n	80005d0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x20>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	73fa      	strb	r2, [r7, #15]
 80005c6:	461a      	mov	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	715a      	strb	r2, [r3, #5]
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d802      	bhi.n	80005dc <Pack_BAT_BMS_ExtTemp_can_codegen+0x2c>
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d9f1      	bls.n	80005c0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_ext_temp1 & (0xFFU));
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	795a      	ldrb	r2, [r3, #5]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_bms_ext_temp1 >> 8) & (0xFFU));
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	799a      	ldrb	r2, [r3, #6]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_bms_ext_temp2 & (0xFFU));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	79da      	ldrb	r2, [r3, #7]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	885b      	ldrh	r3, [r3, #2]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b2da      	uxtb	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_bms_ext_temp2 >> 8) & (0xFFU));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	7a1a      	ldrb	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_BMS_ExtTemp_CANID;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
 8000630:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_ExtTemp_DLC;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2204      	movs	r2, #4
 8000636:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_ExtTemp_IDE;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2201      	movs	r2, #1
 800063c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_ExtTemp_CANID;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	001ff611 	.word	0x001ff611

08000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_A_can_codegen(BAT_AFE_vBRICK_A_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_A_DLC) && (i < 8); cframe->Data[i++] = 0);
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e007      	b.n	8000670 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x20>
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	73fa      	strb	r2, [r7, #15]
 8000666:	461a      	mov	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	715a      	strb	r2, [r3, #5]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d802      	bhi.n	800067c <Pack_BAT_AFE_vBRICK_A_can_codegen+0x2c>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b07      	cmp	r3, #7
 800067a:	d9f1      	bls.n	8000660 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick01 & (0xFFU));
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick01 >> 8) & (0xFFU));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	799a      	ldrb	r2, [r3, #6]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick02 & (0xFFU));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	79da      	ldrb	r2, [r3, #7]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick02 >> 8) & (0xFFU));
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	7a1a      	ldrb	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick03 & (0xFFU));
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a5a      	ldrb	r2, [r3, #9]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick03 >> 8) & (0xFFU));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	7a9a      	ldrb	r2, [r3, #10]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick04 & (0xFFU));
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	7ada      	ldrb	r2, [r3, #11]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	88db      	ldrh	r3, [r3, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick04 >> 8) & (0xFFU));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7b1a      	ldrb	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	88db      	ldrh	r3, [r3, #6]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b29b      	uxth	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_A_CANID;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
 8000720:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_A_DLC;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2208      	movs	r2, #8
 8000726:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_A_IDE;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_A_CANID;
 800072e:	4b03      	ldr	r3, [pc, #12]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	001ff710 	.word	0x001ff710

08000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_B_can_codegen(BAT_AFE_vBRICK_B_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_B_DLC) && (i < 8); cframe->Data[i++] = 0);
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e007      	b.n	8000760 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x20>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	73fa      	strb	r2, [r7, #15]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	715a      	strb	r2, [r3, #5]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d802      	bhi.n	800076c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x2c>
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b07      	cmp	r3, #7
 800076a:	d9f1      	bls.n	8000750 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick05 & (0xFFU));
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	795a      	ldrb	r2, [r3, #5]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick05 >> 8) & (0xFFU));
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	799a      	ldrb	r2, [r3, #6]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick06 & (0xFFU));
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	79da      	ldrb	r2, [r3, #7]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick06 >> 8) & (0xFFU));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	7a1a      	ldrb	r2, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick07 & (0xFFU));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	7a5a      	ldrb	r2, [r3, #9]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick07 >> 8) & (0xFFU));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7a9a      	ldrb	r2, [r3, #10]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick08 & (0xFFU));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	7ada      	ldrb	r2, [r3, #11]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	88db      	ldrh	r3, [r3, #6]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick08 >> 8) & (0xFFU));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	7b1a      	ldrb	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	88db      	ldrh	r3, [r3, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_B_CANID;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
 8000810:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_B_DLC;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2208      	movs	r2, #8
 8000816:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_B_IDE;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_B_CANID;
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	001ff711 	.word	0x001ff711

08000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_C_can_codegen(BAT_AFE_vBRICK_C_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_C_DLC) && (i < 8); cframe->Data[i++] = 0);
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e007      	b.n	8000850 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x20>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	73fa      	strb	r2, [r7, #15]
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	2200      	movs	r2, #0
 800084e:	715a      	strb	r2, [r3, #5]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d802      	bhi.n	800085c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x2c>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d9f1      	bls.n	8000840 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick09 & (0xFFU));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	795a      	ldrb	r2, [r3, #5]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick09 >> 8) & (0xFFU));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	799a      	ldrb	r2, [r3, #6]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick10 & (0xFFU));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	79da      	ldrb	r2, [r3, #7]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	885b      	ldrh	r3, [r3, #2]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick10 >> 8) & (0xFFU));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	7a1a      	ldrb	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	885b      	ldrh	r3, [r3, #2]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick11 & (0xFFU));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	7a5a      	ldrb	r2, [r3, #9]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	889b      	ldrh	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick11 >> 8) & (0xFFU));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7a9a      	ldrb	r2, [r3, #10]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick12 & (0xFFU));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	7ada      	ldrb	r2, [r3, #11]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	88db      	ldrh	r3, [r3, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick12 >> 8) & (0xFFU));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	7b1a      	ldrb	r2, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	88db      	ldrh	r3, [r3, #6]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_C_CANID;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
 8000900:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_C_DLC;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2208      	movs	r2, #8
 8000906:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_C_IDE;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_C_CANID;
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	001ff712 	.word	0x001ff712

08000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_D_can_codegen(BAT_AFE_vBRICK_D_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_D_DLC) && (i < 8); cframe->Data[i++] = 0);
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e007      	b.n	8000940 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x20>
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	73fa      	strb	r2, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	715a      	strb	r2, [r3, #5]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d802      	bhi.n	800094c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x2c>
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b07      	cmp	r3, #7
 800094a:	d9f1      	bls.n	8000930 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick13 & (0xFFU));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	795a      	ldrb	r2, [r3, #5]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick13 >> 8) & (0xFFU));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	799a      	ldrb	r2, [r3, #6]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick14 & (0xFFU));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	79da      	ldrb	r2, [r3, #7]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b2da      	uxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick14 >> 8) & (0xFFU));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	7a1a      	ldrb	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_AFE_vBRICK_D_CANID;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_D_DLC;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2204      	movs	r2, #4
 80009a6:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_D_IDE;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_D_CANID;
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	001ff713 	.word	0x001ff713

080009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e007      	b.n	80009e0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	73fa      	strb	r2, [r7, #15]
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d802      	bhi.n	80009ec <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d9f1      	bls.n	80009d0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	795a      	ldrb	r2, [r3, #5]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	799a      	ldrb	r2, [r3, #6]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	79da      	ldrb	r2, [r3, #7]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	885b      	ldrh	r3, [r3, #2]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	7a1a      	ldrb	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	001ff810 	.word	0x001ff810

08000a58 <Pack_BAT_GAUGE_ViT_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_ViT_can_codegen(BAT_GAUGE_ViT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_ViT_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e007      	b.n	8000a78 <Pack_BAT_GAUGE_ViT_can_codegen+0x20>
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	73fa      	strb	r2, [r7, #15]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	715a      	strb	r2, [r3, #5]
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d802      	bhi.n	8000a84 <Pack_BAT_GAUGE_ViT_can_codegen+0x2c>
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d9f1      	bls.n	8000a68 <Pack_BAT_GAUGE_ViT_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_vPack & (0xFFU));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	795a      	ldrb	r2, [r3, #5]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_gauge_vPack >> 8) & (0xFFU));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	799a      	ldrb	r2, [r3, #6]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_iPack & (0xFFU));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	79da      	ldrb	r2, [r3, #7]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_iPack >> 8) & (0xFFU));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	7a1a      	ldrb	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aca:	121b      	asrs	r3, r3, #8
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_gauge_tPack & (0xFFU));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	7a5a      	ldrb	r2, [r3, #9]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_gauge_tPack >> 8) & (0xFFU));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	7a9a      	ldrb	r2, [r3, #10]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	889b      	ldrh	r3, [r3, #4]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	729a      	strb	r2, [r3, #10]

  cframe->MsgId = BAT_GAUGE_ViT_CANID;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
 8000b04:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_ViT_DLC;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2206      	movs	r2, #6
 8000b0a:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_ViT_IDE;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_ViT_CANID;
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	001ff820 	.word	0x001ff820

08000b24 <bq76952_init>:
extern int16_t bq76952_TS3config(void);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	80fb      	strh	r3, [r7, #6]
  do
  {
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <bq76952_init+0x70>)
 8000b32:	f249 2234 	movw	r2, #37428	; 0x9234
 8000b36:	805a      	strh	r2, [r3, #2]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <bq76952_init+0x70>)
 8000b3a:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 8000b3e:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.len = 4;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <bq76952_init+0x70>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	701a      	strb	r2, [r3, #0]
    AFE_RAMwrite.vCellModecmd = 0x03C3;           //0x03C3 for 6S | 0x0303 for 4S
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <bq76952_init+0x74>)
 8000b48:	f240 32c3 	movw	r2, #963	; 0x3c3
 8000b4c:	801a      	strh	r2, [r3, #0]
    AFE_RAMwrite.FETs_CONTROL = 0x0;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <bq76952_init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	805a      	strh	r2, [r3, #2]
    AFE_RAMwrite.enabledProtectionsA = 0xBC;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <bq76952_init+0x74>)
 8000b56:	22bc      	movs	r2, #188	; 0xbc
 8000b58:	809a      	strh	r2, [r3, #4]
    AFE_RAMwrite.enabledProtectionsB = 0xF7;      //(Also sets OTC, OTD and OTF as 1)
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <bq76952_init+0x74>)
 8000b5c:	22f7      	movs	r2, #247	; 0xf7
 8000b5e:	80da      	strh	r2, [r3, #6]
    AFE_RAMwrite.prechargeStartVoltage = 0x0A8C;  //2700mV
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <bq76952_init+0x74>)
 8000b62:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000b66:	811a      	strh	r2, [r3, #8]
    AFE_RAMwrite.prechargeStopVoltage = 0x0AF0;   //2800mV
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <bq76952_init+0x74>)
 8000b6a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000b6e:	815a      	strh	r2, [r3, #10]
    AFE_RAMwrite.TS3config = 0x07;                //Default for TS3: 0X07 | Default for TS1: 0x07
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <bq76952_init+0x74>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	819a      	strh	r2, [r3, #12]

    bq76952_vCellMode();
 8000b76:	f000 f991 	bl	8000e9c <bq76952_vCellMode>
    bq76952_FETs_Control();
 8000b7a:	f000 f95f 	bl	8000e3c <bq76952_FETs_Control>
    bq76952_TS3config();
 8000b7e:	f000 f9bf 	bl	8000f00 <bq76952_TS3config>
    //OCCThreshold --> 0x05				#Rsense is 1mohm. Unit is 2mV, so 10mV means a threshold of 10A
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    ret_val = SYS_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	80fb      	strh	r3, [r7, #6]
  } while(false);

  return ret_val;
 8000b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000d0 	.word	0x200000d0
 8000b98:	200000d8 	.word	0x200000d8

08000b9c <bq76952_FETs_SleepDisable>:

//------------------------------------------------------------------------------
// FET CONTROL COMMANDS
static int16_t bq76952_FETs_SleepDisable(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  // Puts the FETs in performance mode
  int16_t ret_val = SYS_ERR;
 8000ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba6:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SLEEP_DISABLE))
 8000ba8:	219a      	movs	r1, #154	; 0x9a
 8000baa:	203e      	movs	r0, #62	; 0x3e
 8000bac:	f000 fab8 	bl	8001120 <bq76952_write_sub_cmd>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <bq76952_FETs_SleepDisable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
 8000bba:	e000      	b.n	8000bbe <bq76952_FETs_SleepDisable+0x22>
      break;
 8000bbc:	bf00      	nop
  } while(false);
  return ret_val;
 8000bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <bq76952_FETs_enable>:
static int16_t bq76952_FETs_enable(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8000bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd4:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 8000bd6:	2122      	movs	r1, #34	; 0x22
 8000bd8:	203e      	movs	r0, #62	; 0x3e
 8000bda:	f000 faa1 	bl	8001120 <bq76952_write_sub_cmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <bq76952_FETs_enable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	80fb      	strh	r3, [r7, #6]
 8000be8:	e000      	b.n	8000bec <bq76952_FETs_enable+0x22>
      break;
 8000bea:	bf00      	nop
  } while(false);
  return ret_val;
 8000bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <bq76952_allFETs_on>:
static int16_t bq76952_allFETs_on(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8000bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c02:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 8000c04:	2196      	movs	r1, #150	; 0x96
 8000c06:	203e      	movs	r0, #62	; 0x3e
 8000c08:	f000 fa8a 	bl	8001120 <bq76952_write_sub_cmd>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <bq76952_allFETs_on+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	e000      	b.n	8000c1a <bq76952_allFETs_on+0x22>
      break;
 8000c18:	bf00      	nop
  } while(false);
  return ret_val;
 8000c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <bq76952_allFETs_off>:
static int16_t bq76952_allFETs_off(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8000c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c30:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 8000c32:	2195      	movs	r1, #149	; 0x95
 8000c34:	203e      	movs	r0, #62	; 0x3e
 8000c36:	f000 fa73 	bl	8001120 <bq76952_write_sub_cmd>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <bq76952_allFETs_off+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	e000      	b.n	8000c48 <bq76952_allFETs_off+0x22>
      break;
 8000c46:	bf00      	nop
  } while(false);
  return ret_val;
 8000c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <bq76952_dischargeOFF>:
static int16_t bq76952_dischargeOFF(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  //Disable DSG and PDSG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DSG_PDSG_OFF))
 8000c60:	2193      	movs	r1, #147	; 0x93
 8000c62:	203e      	movs	r0, #62	; 0x3e
 8000c64:	f000 fa5c 	bl	8001120 <bq76952_write_sub_cmd>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <bq76952_dischargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	e000      	b.n	8000c76 <bq76952_dischargeOFF+0x22>
      break;
 8000c74:	bf00      	nop
  } while(false);
  return ret_val;
 8000c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <bq76952_chargeOFF>:
static int16_t bq76952_chargeOFF(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  //Disable CHG and PCHG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8c:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, CHG_PCHG_OFF))
 8000c8e:	2194      	movs	r1, #148	; 0x94
 8000c90:	203e      	movs	r0, #62	; 0x3e
 8000c92:	f000 fa45 	bl	8001120 <bq76952_write_sub_cmd>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <bq76952_chargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	80fb      	strh	r3, [r7, #6]
 8000ca0:	e000      	b.n	8000ca4 <bq76952_chargeOFF+0x22>
      break;
 8000ca2:	bf00      	nop
  } while(false);
  return ret_val;
 8000ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <bq76952_FETs_ON>:


extern int16_t bq76952_FETs_ON(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000cba:	f7ff ff86 	bl	8000bca <bq76952_FETs_enable>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d112      	bne.n	8000cea <bq76952_FETs_ON+0x3a>
    {
      break;
    }
    HAL_Delay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f002 f83d 	bl	8002d44 <HAL_Delay>
    if(SYS_OK!= bq76952_FETs_SleepDisable())
 8000cca:	f7ff ff67 	bl	8000b9c <bq76952_FETs_SleepDisable>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10c      	bne.n	8000cee <bq76952_FETs_ON+0x3e>
    {
      break;
    }
    HAL_Delay(50);
 8000cd4:	2032      	movs	r0, #50	; 0x32
 8000cd6:	f002 f835 	bl	8002d44 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_on())
 8000cda:	f7ff ff8d 	bl	8000bf8 <bq76952_allFETs_on>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d106      	bne.n	8000cf2 <bq76952_FETs_ON+0x42>
    {
      break;
    }
    ret_val = SYS_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	e004      	b.n	8000cf4 <bq76952_FETs_ON+0x44>
      break;
 8000cea:	bf00      	nop
 8000cec:	e002      	b.n	8000cf4 <bq76952_FETs_ON+0x44>
      break;
 8000cee:	bf00      	nop
 8000cf0:	e000      	b.n	8000cf4 <bq76952_FETs_ON+0x44>
      break;
 8000cf2:	bf00      	nop
  }while(false);
  return ret_val;
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	b21b      	sxth	r3, r3
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <bq76952_FETs_OFF>:
extern int16_t bq76952_FETs_OFF(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  //To switch off the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d0c:	f7ff ff5d 	bl	8000bca <bq76952_FETs_enable>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10a      	bne.n	8000d2c <bq76952_FETs_OFF+0x2a>
    {
      break;
    }
    HAL_Delay(50);
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f002 f814 	bl	8002d44 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_off())
 8000d1c:	f7ff ff83 	bl	8000c26 <bq76952_allFETs_off>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <bq76952_FETs_OFF+0x2e>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	e002      	b.n	8000d32 <bq76952_FETs_OFF+0x30>
      break;
 8000d2c:	bf00      	nop
 8000d2e:	e000      	b.n	8000d32 <bq76952_FETs_OFF+0x30>
      break;
 8000d30:	bf00      	nop
  }while(false);
  return ret_val;
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	b21b      	sxth	r3, r3
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <bq76952_Charge>:

extern int16_t bq76952_Charge(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  //Takes the BMS to Charging mode
  uint8_t ret_val = SYS_ERR;
 8000d46:	23ff      	movs	r3, #255	; 0xff
 8000d48:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d4a:	f7ff ff3e 	bl	8000bca <bq76952_FETs_enable>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10c      	bne.n	8000d6e <bq76952_Charge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 8000d54:	f7ff ff50 	bl	8000bf8 <bq76952_allFETs_on>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <bq76952_Charge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_dischargeOFF())
 8000d5e:	f7ff ff79 	bl	8000c54 <bq76952_dischargeOFF>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d106      	bne.n	8000d76 <bq76952_Charge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	e004      	b.n	8000d78 <bq76952_Charge+0x38>
      break;
 8000d6e:	bf00      	nop
 8000d70:	e002      	b.n	8000d78 <bq76952_Charge+0x38>
      break;
 8000d72:	bf00      	nop
 8000d74:	e000      	b.n	8000d78 <bq76952_Charge+0x38>
      break;
 8000d76:	bf00      	nop
  }while(false);
  return ret_val;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	b21b      	sxth	r3, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <bq76952_Discharge>:
extern int16_t bq76952_Discharge(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  //Takes the BMS to Discharging mode
  uint8_t ret_val = SYS_ERR;
 8000d8a:	23ff      	movs	r3, #255	; 0xff
 8000d8c:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d8e:	f7ff ff1c 	bl	8000bca <bq76952_FETs_enable>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10c      	bne.n	8000db2 <bq76952_Discharge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 8000d98:	f7ff ff2e 	bl	8000bf8 <bq76952_allFETs_on>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <bq76952_Discharge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_chargeOFF())
 8000da2:	f7ff ff6e 	bl	8000c82 <bq76952_chargeOFF>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <bq76952_Discharge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	e004      	b.n	8000dbc <bq76952_Discharge+0x38>
      break;
 8000db2:	bf00      	nop
 8000db4:	e002      	b.n	8000dbc <bq76952_Discharge+0x38>
      break;
 8000db6:	bf00      	nop
 8000db8:	e000      	b.n	8000dbc <bq76952_Discharge+0x38>
      break;
 8000dba:	bf00      	nop
  }while(false);
  return ret_val;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	b21b      	sxth	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <bq76952_AFE_reset>:
  return ret_val;
}
//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76952_AFE_reset(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8000dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd2:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 8000dd4:	2112      	movs	r1, #18
 8000dd6:	203e      	movs	r0, #62	; 0x3e
 8000dd8:	f000 f9a2 	bl	8001120 <bq76952_write_sub_cmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <bq76952_AFE_reset+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	e000      	b.n	8000dea <bq76952_AFE_reset+0x22>
      break;
 8000de8:	bf00      	nop
  } while(false);
  return ret_val;
 8000dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <bq76952_get_device_number>:
    ret_val = SYS_OK;
    return ret_val;
}

extern int16_t bq76952_get_device_number(uint16_t *pDev_num)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
    int16_t ret_val = SYS_ERR;
 8000dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e02:	81fb      	strh	r3, [r7, #14]
    do
    {
      if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 8000e04:	2101      	movs	r1, #1
 8000e06:	203e      	movs	r0, #62	; 0x3e
 8000e08:	f000 f98a 	bl	8001120 <bq76952_write_sub_cmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10a      	bne.n	8000e28 <bq76952_get_device_number+0x32>
      {
        break;
      }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, pDev_num, 2))
 8000e12:	2202      	movs	r2, #2
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	2040      	movs	r0, #64	; 0x40
 8000e18:	f000 fa08 	bl	800122c <bq76952_read_sub_cmd_data_buffer>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d104      	bne.n	8000e2c <bq76952_get_device_number+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	81fb      	strh	r3, [r7, #14]
 8000e26:	e002      	b.n	8000e2e <bq76952_get_device_number+0x38>
        break;
 8000e28:	bf00      	nop
 8000e2a:	e000      	b.n	8000e2e <bq76952_get_device_number+0x38>
      break;
 8000e2c:	bf00      	nop
  } while(false);
  return ret_val;
 8000e2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <bq76952_FETs_Control>:
  return ret_val;
}

/*------------------RAM Register Commands-----------------------------*/
extern int16_t bq76952_FETs_Control(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  //To control the FETs with MCU only
  uint16_t data=0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	80bb      	strh	r3, [r7, #4]
  int16_t ret_val = SYS_ERR;
 8000e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_RAM_register(FET_CONTROL, AFE_RAMwrite.FETs_CONTROL, 1))
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <bq76952_FETs_Control+0x5c>)
 8000e4e:	885b      	ldrh	r3, [r3, #2]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	2097      	movs	r0, #151	; 0x97
 8000e56:	f000 f885 	bl	8000f64 <bq76952_write_RAM_register>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <bq76952_FETs_Control+0x44>
    {
      break;
    }
    if(SYS_OK != bq76952_read_RAM_register(FET_CONTROL, &data))
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	2097      	movs	r0, #151	; 0x97
 8000e66:	f000 f8d4 	bl	8001012 <bq76952_read_RAM_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d109      	bne.n	8000e84 <bq76952_FETs_Control+0x48>
    {
      break;
    }
    if(data!= AFE_RAMwrite.FETs_CONTROL)
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <bq76952_FETs_Control+0x5c>)
 8000e72:	885a      	ldrh	r2, [r3, #2]
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d106      	bne.n	8000e88 <bq76952_FETs_Control+0x4c>
    {
      break;
    }
    ret_val = SYS_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	e004      	b.n	8000e8a <bq76952_FETs_Control+0x4e>
      break;
 8000e80:	bf00      	nop
 8000e82:	e002      	b.n	8000e8a <bq76952_FETs_Control+0x4e>
      break;
 8000e84:	bf00      	nop
 8000e86:	e000      	b.n	8000e8a <bq76952_FETs_Control+0x4e>
      break;
 8000e88:	bf00      	nop
  } while(false);

  return ret_val;
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000d8 	.word	0x200000d8

08000e9c <bq76952_vCellMode>:
extern int16_t bq76952_vCellMode (void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(VCellMode, AFE_RAMwrite.vCellModecmd, 2))
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <bq76952_vCellMode+0x60>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f249 3004 	movw	r0, #37636	; 0x9304
 8000eb8:	f000 f854 	bl	8000f64 <bq76952_write_RAM_register>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d110      	bne.n	8000ee4 <bq76952_vCellMode+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(VCellMode, &data))
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f249 3004 	movw	r0, #37636	; 0x9304
 8000eca:	f000 f8a2 	bl	8001012 <bq76952_read_RAM_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d109      	bne.n	8000ee8 <bq76952_vCellMode+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.vCellModecmd)
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <bq76952_vCellMode+0x60>)
 8000ed6:	881a      	ldrh	r2, [r3, #0]
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d106      	bne.n	8000eec <bq76952_vCellMode+0x50>
    {
      break;
    }
      ret_val = SYS_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	e004      	b.n	8000eee <bq76952_vCellMode+0x52>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e002      	b.n	8000eee <bq76952_vCellMode+0x52>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <bq76952_vCellMode+0x52>
      break;
 8000eec:	bf00      	nop
  }while(false);
  return ret_val;
 8000eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000d8 	.word	0x200000d8

08000f00 <bq76952_TS3config>:
    ret_val = SYS_OK;
  }while(false);
  return ret_val;
}
extern int16_t bq76952_TS3config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0a:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(PrechargeStopVoltage, AFE_RAMwrite.TS3config, 1))
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <bq76952_TS3config+0x60>)
 8000f12:	899b      	ldrh	r3, [r3, #12]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	f249 300c 	movw	r0, #37644	; 0x930c
 8000f1c:	f000 f822 	bl	8000f64 <bq76952_write_RAM_register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d110      	bne.n	8000f48 <bq76952_TS3config+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(PrechargeStopVoltage, &data))
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f249 300c 	movw	r0, #37644	; 0x930c
 8000f2e:	f000 f870 	bl	8001012 <bq76952_read_RAM_register>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <bq76952_TS3config+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.TS3config)
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <bq76952_TS3config+0x60>)
 8000f3a:	899a      	ldrh	r2, [r3, #12]
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d106      	bne.n	8000f50 <bq76952_TS3config+0x50>
    {
      break;
    }ret_val = SYS_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	80fb      	strh	r3, [r7, #6]
 8000f46:	e004      	b.n	8000f52 <bq76952_TS3config+0x52>
      break;
 8000f48:	bf00      	nop
 8000f4a:	e002      	b.n	8000f52 <bq76952_TS3config+0x52>
      break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <bq76952_TS3config+0x52>
      break;
 8000f50:	bf00      	nop
  }while(false);
  return ret_val;
 8000f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000d8 	.word	0x200000d8

08000f64 <bq76952_write_RAM_register>:
static int16_t bq76952_write_RAM_register (uint16_t reg_address, uint16_t cmd, uint8_t datalen)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	70fb      	strb	r3, [r7, #3]
  //Writes to RAM Register
  uint16_t TX_Buffer;
  uint16_t ret_val = SYS_ERR;
 8000f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f7a:	81fb      	strh	r3, [r7, #14]
  uint8_t TX_Buff[2] = {0x00, 0x00};
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	81bb      	strh	r3, [r7, #12]
  uint8_t TX_RegData[4] = {0x00, 0x00, 0x00, 0x00};
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  TX_RegData[0] = reg_address & 0xff;
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	723b      	strb	r3, [r7, #8]
  TX_RegData[1] = (reg_address >> 8) & 0xff;
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	727b      	strb	r3, [r7, #9]
  TX_RegData[2] = cmd & 0xff; //1st byte of data
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	72bb      	strb	r3, [r7, #10]
  TX_RegData[3] = (cmd>>8) & 0xff;
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	72fb      	strb	r3, [r7, #11]

  TX_Buff[0] = Checksum(TX_RegData, SUB_CMD_LEN+datalen);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f853 	bl	800105c <Checksum>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	733b      	strb	r3, [r7, #12]
  TX_Buff[1] = SUB_CMD_LEN + CHECKSUM_LEN + datalen;
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	737b      	strb	r3, [r7, #13]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address)) //Writes register address to Subcommand Memory 0x3E
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	203e      	movs	r0, #62	; 0x3e
 8000fc8:	f000 f8aa 	bl	8001120 <bq76952_write_sub_cmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d114      	bne.n	8000ffc <bq76952_write_RAM_register+0x98>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_DATA_BUFF_ADDR, cmd)) //Writes Command to Buffer Memory 0x40
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2040      	movs	r0, #64	; 0x40
 8000fd8:	f000 f8a2 	bl	8001120 <bq76952_write_sub_cmd>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10e      	bne.n	8001000 <bq76952_write_RAM_register+0x9c>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(RAM_REG_LSB_ADDR, TX_Buff))  //Writes Checksum and Datalength to 0x60 and 0x61
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2060      	movs	r0, #96	; 0x60
 8000fec:	f000 f898 	bl	8001120 <bq76952_write_sub_cmd>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <bq76952_write_RAM_register+0xa0>
    {
      break;
    }
    ret_val = SYS_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	e004      	b.n	8001006 <bq76952_write_RAM_register+0xa2>
      break;
 8000ffc:	bf00      	nop
 8000ffe:	e002      	b.n	8001006 <bq76952_write_RAM_register+0xa2>
      break;
 8001000:	bf00      	nop
 8001002:	e000      	b.n	8001006 <bq76952_write_RAM_register+0xa2>
      break;
 8001004:	bf00      	nop
  }while(false);
  return ret_val;
 8001006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <bq76952_read_RAM_register>:

static int16_t bq76952_read_RAM_register (uint16_t reg_address, uint16_t *pData)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	6039      	str	r1, [r7, #0]
 800101c:	80fb      	strh	r3, [r7, #6]
  //Reads from the RAM Register
  uint16_t ret_val = SYS_ERR;
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	81fb      	strh	r3, [r7, #14]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address))
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4619      	mov	r1, r3
 8001028:	203e      	movs	r0, #62	; 0x3e
 800102a:	f000 f879 	bl	8001120 <bq76952_write_sub_cmd>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10a      	bne.n	800104a <bq76952_read_RAM_register+0x38>
    {
      break;
    }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, pData, 2))
 8001034:	2202      	movs	r2, #2
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	2040      	movs	r0, #64	; 0x40
 800103a:	f000 f8f7 	bl	800122c <bq76952_read_sub_cmd_data_buffer>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <bq76952_read_RAM_register+0x3c>
    {
      break;
    }
    ret_val = SYS_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	e002      	b.n	8001050 <bq76952_read_RAM_register+0x3e>
      break;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <bq76952_read_RAM_register+0x3e>
      break;
 800104e:	bf00      	nop
  }while(false);
  return ret_val;
 8001050:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <Checksum>:

static uint8_t Checksum(uint8_t *pData, uint8_t len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t checksum = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]

  for(i=0; i<len; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e009      	b.n	8001086 <Checksum+0x2a>
    checksum += pData[i];
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	4413      	add	r3, r2
 800107e:	73bb      	strb	r3, [r7, #14]
  for(i=0; i<len; i++)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3f1      	bcc.n	8001072 <Checksum+0x16>

  checksum = 0xff & ~checksum;
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	43db      	mvns	r3, r3
 8001092:	73bb      	strb	r3, [r7, #14]

  return(checksum);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <CRC8>:


static uint8_t CRC8(uint8_t *pData, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 80010b2:	e029      	b.n	8001108 <CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e020      	b.n	80010fc <CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 80010ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da09      	bge.n	80010d6 <CRC8+0x34>
      {
        crc *= 2;
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 80010c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010cc:	f083 0307 	eor.w	r3, r3, #7
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	e002      	b.n	80010dc <CRC8+0x3a>
      }
      else
        crc *= 2;
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]

      if((*pData & i) != 0)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	4013      	ands	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <CRC8+0x54>
        crc ^= 0x107;
 80010ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ee:	f083 0307 	eor.w	r3, r3, #7
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	085b      	lsrs	r3, r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1db      	bne.n	80010ba <CRC8+0x18>
    }
    pData++;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	70fa      	strb	r2, [r7, #3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1d0      	bne.n	80010b4 <CRC8+0x12>
  }
  return (crc);
 8001112:	7bbb      	ldrb	r3, [r7, #14]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint16_t subCmdRegAddr, uint16_t subCmd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4613      	mov	r3, r2
 800112e:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001138:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113e:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <bq76952_write_sub_cmd+0x100>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	823b      	strh	r3, [r7, #16]
 8001146:	2300      	movs	r3, #0
 8001148:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <bq76952_write_sub_cmd+0x100>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	81bb      	strh	r3, [r7, #12]
 8001150:	2300      	movs	r3, #0
 8001152:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	773b      	strb	r3, [r7, #28]
 8001160:	e054      	b.n	800120c <bq76952_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 8001162:	7efa      	ldrb	r2, [r7, #27]
 8001164:	7f3b      	ldrb	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	7f3b      	ldrb	r3, [r7, #28]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	fa42 f303 	asr.w	r3, r2, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	747b      	strb	r3, [r7, #17]
    pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff8e 	bl	80010a2 <CRC8>
 8001186:	4603      	mov	r3, r0
 8001188:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 800118a:	7c3b      	ldrb	r3, [r7, #16]
 800118c:	b21a      	sxth	r2, r3
 800118e:	7c7b      	ldrb	r3, [r7, #17]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	82fb      	strh	r3, [r7, #22]
    do
    {
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 800119a:	2200      	movs	r2, #0
 800119c:	2110      	movs	r1, #16
 800119e:	4821      	ldr	r0, [pc, #132]	; (8001224 <bq76952_write_sub_cmd+0x104>)
 80011a0:	f004 fb18 	bl	80057d4 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	f107 0110 	add.w	r1, r7, #16
 80011ac:	230a      	movs	r3, #10
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2303      	movs	r3, #3
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <bq76952_write_sub_cmd+0x108>)
 80011b4:	f007 fb96 	bl	80088e4 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 80011b8:	2201      	movs	r2, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	4819      	ldr	r0, [pc, #100]	; (8001224 <bq76952_write_sub_cmd+0x104>)
 80011be:	f004 fb09 	bl	80057d4 <HAL_GPIO_WritePin>
      HAL_Delay(2);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f001 fdbe 	bl	8002d44 <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 80011c8:	7b3b      	ldrb	r3, [r7, #12]
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 80011d8:	7f7b      	ldrb	r3, [r7, #29]
 80011da:	3301      	adds	r3, #1
 80011dc:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 80011de:	8afa      	ldrh	r2, [r7, #22]
 80011e0:	8b3b      	ldrh	r3, [r7, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d002      	beq.n	80011ec <bq76952_write_sub_cmd+0xcc>
 80011e6:	7f7b      	ldrb	r3, [r7, #29]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d9d6      	bls.n	800119a <bq76952_write_sub_cmd+0x7a>
    if(TxByte == RxByte)
 80011ec:	8afa      	ldrh	r2, [r7, #22]
 80011ee:	8b3b      	ldrh	r3, [r7, #24]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d104      	bne.n	80011fe <bq76952_write_sub_cmd+0xde>
    {
      retry_cnt=0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	777b      	strb	r3, [r7, #29]
      ret_val = SYS_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	83fb      	strh	r3, [r7, #30]
 80011fc:	e003      	b.n	8001206 <bq76952_write_sub_cmd+0xe6>
    }
    else
    {
      ret_val = SYS_ERR;
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	83fb      	strh	r3, [r7, #30]
      break;
 8001204:	e005      	b.n	8001212 <bq76952_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001206:	7f3b      	ldrb	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	773b      	strb	r3, [r7, #28]
 800120c:	7f3b      	ldrb	r3, [r7, #28]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d9a7      	bls.n	8001162 <bq76952_write_sub_cmd+0x42>
    }
  }
  return ret_val;
 8001212:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800babc 	.word	0x0800babc
 8001224:	40020800 	.word	0x40020800
 8001228:	200006f8 	.word	0x200006f8

0800122c <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t *pData, uint8_t len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	; 0x40
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[SUB_CMD_DATA_BUFF_LEN_MAX] = {0};  //To store the initial data from the Buffer
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]
  int16_t ret_val = SYS_ERR;
 8001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001258:	86fb      	strh	r3, [r7, #54]	; 0x36
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 800125a:	79bb      	ldrb	r3, [r7, #6]
 800125c:	2b20      	cmp	r3, #32
 800125e:	f200 8088 	bhi.w	8001372 <bq76952_read_sub_cmd_data_buffer+0x146>
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8084 	beq.w	8001372 <bq76952_read_sub_cmd_data_buffer+0x146>
    {
      break;
    }
    if(pData == NULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d07f      	beq.n	8001370 <bq76952_read_sub_cmd_data_buffer+0x144>
    {
      break;
    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <bq76952_read_sub_cmd_data_buffer+0x154>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	2300      	movs	r3, #0
 8001278:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <bq76952_read_sub_cmd_data_buffer+0x154>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	813b      	strh	r3, [r7, #8]
 8001280:	2300      	movs	r3, #0
 8001282:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001290:	e05a      	b.n	8001348 <bq76952_read_sub_cmd_data_buffer+0x11c>
    {
      pTxData[0] = subCmdRegAddr + i;
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	733b      	strb	r3, [r7, #12]
      pTxData[1] = 0xFF;
 800129e:	23ff      	movs	r3, #255	; 0xff
 80012a0:	737b      	strb	r3, [r7, #13]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2102      	movs	r1, #2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fefa 	bl	80010a2 <CRC8>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73bb      	strb	r3, [r7, #14]
      TxByte = pTxData[0];
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      retry_cnt = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	4830      	ldr	r0, [pc, #192]	; (8001384 <bq76952_read_sub_cmd_data_buffer+0x158>)
 80012c4:	f004 fa86 	bl	80057d4 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	f107 010c 	add.w	r1, r7, #12
 80012d0:	230a      	movs	r3, #10
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2303      	movs	r3, #3
 80012d6:	482c      	ldr	r0, [pc, #176]	; (8001388 <bq76952_read_sub_cmd_data_buffer+0x15c>)
 80012d8:	f007 fb04 	bl	80088e4 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 80012dc:	2201      	movs	r2, #1
 80012de:	2110      	movs	r1, #16
 80012e0:	4828      	ldr	r0, [pc, #160]	; (8001384 <bq76952_read_sub_cmd_data_buffer+0x158>)
 80012e2:	f004 fa77 	bl	80057d4 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 80012e6:	2002      	movs	r0, #2
 80012e8:	f001 fd2c 	bl	8002d44 <HAL_Delay>
        RxByte = pRxData[0];
 80012ec:	7a3b      	ldrb	r3, [r7, #8]
 80012ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        retry_cnt++;
 80012f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012f6:	3301      	adds	r3, #1
 80012f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      } while((TxByte != RxByte) && (retry_cnt < 4));
 80012fc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001300:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001304:	429a      	cmp	r2, r3
 8001306:	d003      	beq.n	8001310 <bq76952_read_sub_cmd_data_buffer+0xe4>
 8001308:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800130c:	2b03      	cmp	r3, #3
 800130e:	d9d6      	bls.n	80012be <bq76952_read_sub_cmd_data_buffer+0x92>
      if(TxByte == RxByte)
 8001310:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001314:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001318:	429a      	cmp	r2, r3
 800131a:	d10c      	bne.n	8001336 <bq76952_read_sub_cmd_data_buffer+0x10a>
      {
        retry_cnt=0;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        RX_DATA[i] = pRxData[1];
 8001322:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001326:	7a7a      	ldrb	r2, [r7, #9]
 8001328:	3338      	adds	r3, #56	; 0x38
 800132a:	443b      	add	r3, r7
 800132c:	f803 2c28 	strb.w	r2, [r3, #-40]
        ret_val = SYS_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001334:	e003      	b.n	800133e <bq76952_read_sub_cmd_data_buffer+0x112>
      }
      else
      {
        ret_val = SYS_ERR;
 8001336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133a:	86fb      	strh	r3, [r7, #54]	; 0x36
        break;
 800133c:	e009      	b.n	8001352 <bq76952_read_sub_cmd_data_buffer+0x126>
    for (uint8_t i = 0; i < len; i++)
 800133e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001342:	3301      	adds	r3, #1
 8001344:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001348:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	429a      	cmp	r2, r3
 8001350:	d39f      	bcc.n	8001292 <bq76952_read_sub_cmd_data_buffer+0x66>
      }
    }
    if(ret_val == SYS_OK)
 8001352:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10b      	bne.n	8001372 <bq76952_read_sub_cmd_data_buffer+0x146>
      *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 800135a:	7c7b      	ldrb	r3, [r7, #17]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7c3b      	ldrb	r3, [r7, #16]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	e000      	b.n	8001372 <bq76952_read_sub_cmd_data_buffer+0x146>
      break;
 8001370:	bf00      	nop
  } while(false);
  return ret_val;
 8001372:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8001376:	4618      	mov	r0, r3
 8001378:	3738      	adds	r7, #56	; 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800babc 	.word	0x0800babc
 8001384:	40020800 	.word	0x40020800
 8001388:	200006f8 	.word	0x200006f8

0800138c <bq76952_dir_cmd_read>:
  }
  return ret_val;
}

extern int16_t bq76952_dir_cmd_read(uint8_t dirCmdRegAddr, uint16_t *pData, uint8_t len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
  //To read data from the direct command registers
  uint8_t RX_DATA[READ_DIR_CMD_BUFF_LEN] = {0};
 800139c:	2300      	movs	r3, #0
 800139e:	82bb      	strh	r3, [r7, #20]
  int16_t ret_val = SYS_ERR;
 80013a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a4:	83fb      	strh	r3, [r7, #30]
  do
  {
    if((len > DIR_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d873      	bhi.n	8001494 <bq76952_dir_cmd_read+0x108>
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d070      	beq.n	8001494 <bq76952_dir_cmd_read+0x108>
    {
      break;
    }
    if(pData == NULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d06c      	beq.n	8001492 <bq76952_dir_cmd_read+0x106>
    {
      break;
    }
    uint8_t pTxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <bq76952_dir_cmd_read+0x114>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	823b      	strh	r3, [r7, #16]
 80013be:	2300      	movs	r3, #0
 80013c0:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <bq76952_dir_cmd_read+0x114>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	81bb      	strh	r3, [r7, #12]
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	777b      	strb	r3, [r7, #29]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	773b      	strb	r3, [r7, #28]
 80013d4:	e04b      	b.n	800146e <bq76952_dir_cmd_read+0xe2>
    {
      pTxData[0] = dirCmdRegAddr + i;
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	7f3b      	ldrb	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	743b      	strb	r3, [r7, #16]
      pTxData[1] = 0xFF;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	747b      	strb	r3, [r7, #17]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe59 	bl	80010a2 <CRC8>
 80013f0:	4603      	mov	r3, r0
 80013f2:	74bb      	strb	r3, [r7, #18]
      TxByte = pTxData[0];
 80013f4:	7c3b      	ldrb	r3, [r7, #16]
 80013f6:	837b      	strh	r3, [r7, #26]
      retry_cnt = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	777b      	strb	r3, [r7, #29]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	4828      	ldr	r0, [pc, #160]	; (80014a4 <bq76952_dir_cmd_read+0x118>)
 8001402:	f004 f9e7 	bl	80057d4 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_DIR_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	f107 0110 	add.w	r1, r7, #16
 800140e:	230a      	movs	r3, #10
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2303      	movs	r3, #3
 8001414:	4824      	ldr	r0, [pc, #144]	; (80014a8 <bq76952_dir_cmd_read+0x11c>)
 8001416:	f007 fa65 	bl	80088e4 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <bq76952_dir_cmd_read+0x118>)
 8001420:	f004 f9d8 	bl	80057d4 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001424:	2002      	movs	r0, #2
 8001426:	f001 fc8d 	bl	8002d44 <HAL_Delay>
        RxByte = pRxData[0];
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	833b      	strh	r3, [r7, #24]
        retry_cnt++;
 800142e:	7f7b      	ldrb	r3, [r7, #29]
 8001430:	3301      	adds	r3, #1
 8001432:	777b      	strb	r3, [r7, #29]
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001434:	8b7a      	ldrh	r2, [r7, #26]
 8001436:	8b3b      	ldrh	r3, [r7, #24]
 8001438:	429a      	cmp	r2, r3
 800143a:	d002      	beq.n	8001442 <bq76952_dir_cmd_read+0xb6>
 800143c:	7f7b      	ldrb	r3, [r7, #29]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d9dc      	bls.n	80013fc <bq76952_dir_cmd_read+0x70>
      if(TxByte == RxByte)
 8001442:	8b7a      	ldrh	r2, [r7, #26]
 8001444:	8b3b      	ldrh	r3, [r7, #24]
 8001446:	429a      	cmp	r2, r3
 8001448:	d10a      	bne.n	8001460 <bq76952_dir_cmd_read+0xd4>
      {
        retry_cnt=0;
 800144a:	2300      	movs	r3, #0
 800144c:	777b      	strb	r3, [r7, #29]
        RX_DATA[i] = pRxData[1];
 800144e:	7f3b      	ldrb	r3, [r7, #28]
 8001450:	7b7a      	ldrb	r2, [r7, #13]
 8001452:	3320      	adds	r3, #32
 8001454:	443b      	add	r3, r7
 8001456:	f803 2c0c 	strb.w	r2, [r3, #-12]
        ret_val = SYS_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	83fb      	strh	r3, [r7, #30]
 800145e:	e003      	b.n	8001468 <bq76952_dir_cmd_read+0xdc>
      }
      else
      {
        ret_val = SYS_ERR;
 8001460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001464:	83fb      	strh	r3, [r7, #30]
        break;
 8001466:	e005      	b.n	8001474 <bq76952_dir_cmd_read+0xe8>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001468:	7f3b      	ldrb	r3, [r7, #28]
 800146a:	3301      	adds	r3, #1
 800146c:	773b      	strb	r3, [r7, #28]
 800146e:	7f3b      	ldrb	r3, [r7, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d9b0      	bls.n	80013d6 <bq76952_dir_cmd_read+0x4a>
      }
    }
    if(ret_val == SYS_OK)
 8001474:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <bq76952_dir_cmd_read+0x108>
      *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 800147c:	7d7b      	ldrb	r3, [r7, #21]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7d3b      	ldrb	r3, [r7, #20]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	801a      	strh	r2, [r3, #0]
 8001490:	e000      	b.n	8001494 <bq76952_dir_cmd_read+0x108>
      break;
 8001492:	bf00      	nop
  } while(false);
  return ret_val;
 8001494:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0800babc 	.word	0x0800babc
 80014a4:	40020800 	.word	0x40020800
 80014a8:	200006f8 	.word	0x200006f8

080014ac <app_afe_data_read>:
BAT_AFE_vBRICK_D_t batAfeBrickD;
BAT_GAUGE_OvrVIEW_t batGaugeOvr;
BAT_GAUGE_ViT_t batGaugeViT;

int16_t app_afe_data_read(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  uint8_t CellVoltageHolder = Cell1Voltage;
 80014b2:	2314      	movs	r3, #20
 80014b4:	71fb      	strb	r3, [r7, #7]
  int16_t ret_val = SYS_ERR;
 80014b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ba:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_get_device_number(AFE_data.device_number))
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <app_afe_data_read+0xe0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc98 	bl	8000df6 <bq76952_get_device_number>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d14e      	bne.n	800156a <app_afe_data_read+0xbe>
    {
      break;
    }
    if(SYS_OK != bq76952_dir_cmd_read(StackVoltage, AFE_data.stack_vol, 2))
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <app_afe_data_read+0xe0>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	2202      	movs	r2, #2
 80014d2:	4619      	mov	r1, r3
 80014d4:	2034      	movs	r0, #52	; 0x34
 80014d6:	f7ff ff59 	bl	800138c <bq76952_dir_cmd_read>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d146      	bne.n	800156e <app_afe_data_read+0xc2>
    {
      break;
    }
    if(SYS_OK != bq76952_dir_cmd_read(PACKPinVoltage, AFE_data.pack_vol, 2))
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <app_afe_data_read+0xe0>)
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	2202      	movs	r2, #2
 80014e6:	4619      	mov	r1, r3
 80014e8:	2036      	movs	r0, #54	; 0x36
 80014ea:	f7ff ff4f 	bl	800138c <bq76952_dir_cmd_read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d13e      	bne.n	8001572 <app_afe_data_read+0xc6>
    {
      break;
    }
    if(SYS_OK != bq76952_dir_cmd_read(CC2Current, AFE_data.pack_curr, 2))
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <app_afe_data_read+0xe0>)
 80014f6:	891b      	ldrh	r3, [r3, #8]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4619      	mov	r1, r3
 80014fc:	203a      	movs	r0, #58	; 0x3a
 80014fe:	f7ff ff45 	bl	800138c <bq76952_dir_cmd_read>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d136      	bne.n	8001576 <app_afe_data_read+0xca>
    {
      break;
    }
    if(SYS_OK != bq76952_dir_cmd_read(TS1Temperature, AFE_data.temps[0], 2))
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <app_afe_data_read+0xe0>)
 800150a:	8bdb      	ldrh	r3, [r3, #30]
 800150c:	2202      	movs	r2, #2
 800150e:	4619      	mov	r1, r3
 8001510:	2070      	movs	r0, #112	; 0x70
 8001512:	f7ff ff3b 	bl	800138c <bq76952_dir_cmd_read>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d12e      	bne.n	800157a <app_afe_data_read+0xce>
    {
      break;
    }
    if(SYS_OK != bq76952_dir_cmd_read(TS3Temperature, AFE_data.temps[1], 2))
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <app_afe_data_read+0xe0>)
 800151e:	8c1b      	ldrh	r3, [r3, #32]
 8001520:	2202      	movs	r2, #2
 8001522:	4619      	mov	r1, r3
 8001524:	2074      	movs	r0, #116	; 0x74
 8001526:	f7ff ff31 	bl	800138c <bq76952_dir_cmd_read>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d126      	bne.n	800157e <app_afe_data_read+0xd2>
    {
      break;
    }
    for(uint8_t i=0;i<10;i++)
 8001530:	2300      	movs	r3, #0
 8001532:	70fb      	strb	r3, [r7, #3]
 8001534:	e013      	b.n	800155e <app_afe_data_read+0xb2>
    {
        if(SYS_OK == bq76952_dir_cmd_read(CellVoltageHolder, AFE_data.cellvoltages[i], 2))
 8001536:	79f8      	ldrb	r0, [r7, #7]
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <app_afe_data_read+0xe0>)
 800153c:	3304      	adds	r3, #4
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	885b      	ldrh	r3, [r3, #2]
 8001544:	2202      	movs	r2, #2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff ff20 	bl	800138c <bq76952_dir_cmd_read>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <app_afe_data_read+0xac>
          CellVoltageHolder+=2;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3302      	adds	r3, #2
 8001556:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0;i<10;i++)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	3301      	adds	r3, #1
 800155c:	70fb      	strb	r3, [r7, #3]
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	2b09      	cmp	r3, #9
 8001562:	d9e8      	bls.n	8001536 <app_afe_data_read+0x8a>
    }
    ret_val = SYS_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	80bb      	strh	r3, [r7, #4]
 8001568:	e00a      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 800156a:	bf00      	nop
 800156c:	e008      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 800156e:	bf00      	nop
 8001570:	e006      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 8001572:	bf00      	nop
 8001574:	e004      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 8001576:	bf00      	nop
 8001578:	e002      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 800157a:	bf00      	nop
 800157c:	e000      	b.n	8001580 <app_afe_data_read+0xd4>
      break;
 800157e:	bf00      	nop
  }while(false);
  return ret_val;
 8001580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000e8 	.word	0x200000e8

08001590 <app_afe_can_message_update>:

int16_t app_afe_can_message_update(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	batGaugeViT.BAT_gauge_vPack = AFE_data.pack_vol;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <app_afe_can_message_update+0x7c>)
 8001596:	889a      	ldrh	r2, [r3, #4]
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <app_afe_can_message_update+0x80>)
 800159a:	801a      	strh	r2, [r3, #0]
	batGaugeViT.BAT_gauge_iPack = AFE_data.pack_curr;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <app_afe_can_message_update+0x7c>)
 800159e:	891b      	ldrh	r3, [r3, #8]
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <app_afe_can_message_update+0x80>)
 80015a4:	805a      	strh	r2, [r3, #2]
	batGaugeViT.BAT_gauge_tPack = AFE_data.temps[0];
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <app_afe_can_message_update+0x7c>)
 80015a8:	8bda      	ldrh	r2, [r3, #30]
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <app_afe_can_message_update+0x80>)
 80015ac:	809a      	strh	r2, [r3, #4]
	batAfeBrickA.BAT_afe_vBrick01 = AFE_data.cellvoltages[0];
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <app_afe_can_message_update+0x7c>)
 80015b0:	895a      	ldrh	r2, [r3, #10]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <app_afe_can_message_update+0x84>)
 80015b4:	801a      	strh	r2, [r3, #0]
	batAfeBrickA.BAT_afe_vBrick02 = AFE_data.cellvoltages[1];
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <app_afe_can_message_update+0x7c>)
 80015b8:	899a      	ldrh	r2, [r3, #12]
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <app_afe_can_message_update+0x84>)
 80015bc:	805a      	strh	r2, [r3, #2]
	batAfeBrickA.BAT_afe_vBrick03 = AFE_data.cellvoltages[2];
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <app_afe_can_message_update+0x7c>)
 80015c0:	89da      	ldrh	r2, [r3, #14]
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <app_afe_can_message_update+0x84>)
 80015c4:	809a      	strh	r2, [r3, #4]
	batAfeBrickA.BAT_afe_vBrick04 = AFE_data.cellvoltages[3];
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <app_afe_can_message_update+0x7c>)
 80015c8:	8a1a      	ldrh	r2, [r3, #16]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <app_afe_can_message_update+0x84>)
 80015cc:	80da      	strh	r2, [r3, #6]
	batAfeBrickB.BAT_afe_vBrick05 = AFE_data.cellvoltages[4];
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <app_afe_can_message_update+0x7c>)
 80015d0:	8a5a      	ldrh	r2, [r3, #18]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <app_afe_can_message_update+0x88>)
 80015d4:	801a      	strh	r2, [r3, #0]
	batAfeBrickB.BAT_afe_vBrick06 = AFE_data.cellvoltages[5];
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <app_afe_can_message_update+0x7c>)
 80015d8:	8a9a      	ldrh	r2, [r3, #20]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <app_afe_can_message_update+0x88>)
 80015dc:	805a      	strh	r2, [r3, #2]
	batAfeBrickB.BAT_afe_vBrick07 = AFE_data.cellvoltages[6];
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <app_afe_can_message_update+0x7c>)
 80015e0:	8ada      	ldrh	r2, [r3, #22]
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <app_afe_can_message_update+0x88>)
 80015e4:	809a      	strh	r2, [r3, #4]
	batAfeBrickB.BAT_afe_vBrick08 = AFE_data.cellvoltages[7];
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <app_afe_can_message_update+0x7c>)
 80015e8:	8b1a      	ldrh	r2, [r3, #24]
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <app_afe_can_message_update+0x88>)
 80015ec:	80da      	strh	r2, [r3, #6]
	batAfeBrickC.BAT_afe_vBrick09 = AFE_data.cellvoltages[8];
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <app_afe_can_message_update+0x7c>)
 80015f0:	8b5a      	ldrh	r2, [r3, #26]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <app_afe_can_message_update+0x8c>)
 80015f4:	801a      	strh	r2, [r3, #0]
	batAfeBrickC.BAT_afe_vBrick10 = AFE_data.cellvoltages[9];
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <app_afe_can_message_update+0x7c>)
 80015f8:	8b9a      	ldrh	r2, [r3, #28]
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <app_afe_can_message_update+0x8c>)
 80015fc:	805a      	strh	r2, [r3, #2]
}
 80015fe:	bf00      	nop
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200000e8 	.word	0x200000e8
 8001610:	20000138 	.word	0x20000138
 8001614:	20000118 	.word	0x20000118
 8001618:	20000120 	.word	0x20000120
 800161c:	20000128 	.word	0x20000128

08001620 <app_afe_init>:

int16_t app_afe_init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162a:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	2110      	movs	r1, #16
 8001630:	4806      	ldr	r0, [pc, #24]	; (800164c <app_afe_init+0x2c>)
 8001632:	f004 f8cf 	bl	80057d4 <HAL_GPIO_WritePin>
	  bq76952_init();
 8001636:	f7ff fa75 	bl	8000b24 <bq76952_init>
		ret_val = SYS_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40020800 	.word	0x40020800

08001650 <HAL_CAN_RxFifo0MsgPendingCallback>:
int count = 0;
uint32_t id;
uint8_t state[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <app_can_tx_header_bat_bms_ovr>:

int16_t app_can_tx_header_bat_bms_ovr()
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    TxBatBmsOvr.DLC = BAT_BMS_OvrVIEW_DLC;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 800166a:	2202      	movs	r2, #2
 800166c:	611a      	str	r2, [r3, #16]
    TxBatBmsOvr.ExtId = 0;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
    TxBatBmsOvr.IDE = CAN_ID_STD;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    TxBatBmsOvr.RTR = CAN_RTR_DATA;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    TxBatBmsOvr.StdId = BAT_BMS_OvrVIEW_CANID;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <app_can_tx_header_bat_bms_ovr+0x38>)
 8001684:	601a      	str	r2, [r3, #0]
    TxBatBmsOvr.TransmitGlobalTime = DISABLE;
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <app_can_tx_header_bat_bms_ovr+0x34>)
 8001688:	2200      	movs	r2, #0
 800168a:	751a      	strb	r2, [r3, #20]
}
 800168c:	bf00      	nop
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000178 	.word	0x20000178
 800169c:	001ff610 	.word	0x001ff610

080016a0 <app_can_tx_header_bat_bms_ext_temp>:

int16_t app_can_tx_header_bat_bms_ext_temp()
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
    TxBatExtTemp.DLC = BAT_BMS_ExtTemp_DLC;
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	611a      	str	r2, [r3, #16]
    TxBatExtTemp.ExtId = 0;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
    TxBatExtTemp.IDE = CAN_ID_STD;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    TxBatExtTemp.RTR = CAN_RTR_DATA;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    TxBatExtTemp.StdId = BAT_BMS_ExtTemp_CANID;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <app_can_tx_header_bat_bms_ext_temp+0x38>)
 80016c0:	601a      	str	r2, [r3, #0]
    TxBatExtTemp.TransmitGlobalTime = DISABLE;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <app_can_tx_header_bat_bms_ext_temp+0x34>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	751a      	strb	r2, [r3, #20]
}
 80016c8:	bf00      	nop
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000190 	.word	0x20000190
 80016d8:	001ff611 	.word	0x001ff611

080016dc <app_can_tx_header_bat_gauge_ovr>:

int16_t app_can_tx_header_bat_gauge_ovr()
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    TxBatGaugeOvr.DLC = BAT_GAUGE_OvrVIEW_DLC;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	611a      	str	r2, [r3, #16]
    TxBatGaugeOvr.ExtId = 0;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
    TxBatGaugeOvr.IDE = CAN_ID_STD;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    TxBatGaugeOvr.RTR = CAN_RTR_DATA;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    TxBatGaugeOvr.StdId = BAT_GAUGE_OvrVIEW_CANID;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <app_can_tx_header_bat_gauge_ovr+0x38>)
 80016fc:	601a      	str	r2, [r3, #0]
    TxBatGaugeOvr.TransmitGlobalTime = DISABLE;
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <app_can_tx_header_bat_gauge_ovr+0x34>)
 8001700:	2200      	movs	r2, #0
 8001702:	751a      	strb	r2, [r3, #20]
}
 8001704:	bf00      	nop
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	200001a8 	.word	0x200001a8
 8001714:	001ff810 	.word	0x001ff810

08001718 <app_can_tx_header_bat_gauge_Vit>:

int16_t app_can_tx_header_bat_gauge_Vit()
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    TxBatGaugeVit.DLC = BAT_GAUGE_ViT_DLC;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 800171e:	2206      	movs	r2, #6
 8001720:	611a      	str	r2, [r3, #16]
    TxBatGaugeVit.ExtId = 0;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
    TxBatGaugeVit.IDE = CAN_ID_STD;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
    TxBatGaugeVit.RTR = CAN_RTR_DATA;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
    TxBatGaugeVit.StdId = BAT_GAUGE_ViT_CANID;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <app_can_tx_header_bat_gauge_Vit+0x38>)
 8001738:	601a      	str	r2, [r3, #0]
    TxBatGaugeVit.TransmitGlobalTime = DISABLE;
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <app_can_tx_header_bat_gauge_Vit+0x34>)
 800173c:	2200      	movs	r2, #0
 800173e:	751a      	strb	r2, [r3, #20]
}
 8001740:	bf00      	nop
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200001c0 	.word	0x200001c0
 8001750:	001ff820 	.word	0x001ff820

08001754 <app_can_tx_header_bat_brickA_Vit>:

int16_t app_can_tx_header_bat_brickA_Vit()
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    TxBrickAViT.DLC = BAT_AFE_vBRICK_A_DLC;
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 800175a:	2208      	movs	r2, #8
 800175c:	611a      	str	r2, [r3, #16]
    TxBrickAViT.ExtId = 0;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
    TxBrickAViT.IDE = CAN_ID_STD;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    TxBrickAViT.RTR = CAN_RTR_DATA;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    TxBrickAViT.StdId = BAT_AFE_vBRICK_A_CANID;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <app_can_tx_header_bat_brickA_Vit+0x38>)
 8001774:	601a      	str	r2, [r3, #0]
    TxBrickAViT.TransmitGlobalTime = DISABLE;
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <app_can_tx_header_bat_brickA_Vit+0x34>)
 8001778:	2200      	movs	r2, #0
 800177a:	751a      	strb	r2, [r3, #20]
}
 800177c:	bf00      	nop
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200001d8 	.word	0x200001d8
 800178c:	001ff710 	.word	0x001ff710

08001790 <app_can_tx_header_bat_brickB_Vit>:

int16_t app_can_tx_header_bat_brickB_Vit()
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    TxBrickBViT.DLC = BAT_AFE_vBRICK_B_DLC;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 8001796:	2208      	movs	r2, #8
 8001798:	611a      	str	r2, [r3, #16]
    TxBrickBViT.ExtId = 0;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
    TxBrickBViT.IDE = CAN_ID_STD;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
    TxBrickBViT.RTR = CAN_RTR_DATA;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
    TxBrickBViT.StdId = BAT_AFE_vBRICK_B_CANID;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 80017ae:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <app_can_tx_header_bat_brickB_Vit+0x38>)
 80017b0:	601a      	str	r2, [r3, #0]
    TxBrickBViT.TransmitGlobalTime = DISABLE;
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <app_can_tx_header_bat_brickB_Vit+0x34>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	751a      	strb	r2, [r3, #20]
}
 80017b8:	bf00      	nop
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	200001f0 	.word	0x200001f0
 80017c8:	001ff711 	.word	0x001ff711

080017cc <app_can_tx_header_bat_brickC_Vit>:

int16_t app_can_tx_header_bat_brickC_Vit()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
    TxBrickCViT.DLC = BAT_AFE_vBRICK_C_DLC;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017d2:	2208      	movs	r2, #8
 80017d4:	611a      	str	r2, [r3, #16]
    TxBrickCViT.ExtId = 0;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
    TxBrickCViT.IDE = CAN_ID_STD;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    TxBrickCViT.RTR = CAN_RTR_DATA;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    TxBrickCViT.StdId = BAT_AFE_vBRICK_C_CANID;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <app_can_tx_header_bat_brickC_Vit+0x38>)
 80017ec:	601a      	str	r2, [r3, #0]
    TxBrickCViT.TransmitGlobalTime = DISABLE;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <app_can_tx_header_bat_brickC_Vit+0x34>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	751a      	strb	r2, [r3, #20]
}
 80017f4:	bf00      	nop
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000208 	.word	0x20000208
 8001804:	001ff712 	.word	0x001ff712

08001808 <tx_header_bat_brickD_vit>:

int16_t tx_header_bat_brickD_vit()
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    TxBrickDViT.DLC = BAT_AFE_vBRICK_D_DLC;
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 800180e:	2204      	movs	r2, #4
 8001810:	611a      	str	r2, [r3, #16]
    TxBrickDViT.ExtId = 0;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
    TxBrickDViT.IDE = CAN_ID_STD;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
    TxBrickDViT.RTR = CAN_RTR_DATA;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    TxBrickDViT.StdId = BAT_AFE_vBRICK_D_CANID;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 8001826:	4a06      	ldr	r2, [pc, #24]	; (8001840 <tx_header_bat_brickD_vit+0x38>)
 8001828:	601a      	str	r2, [r3, #0]
    TxBrickDViT.TransmitGlobalTime = DISABLE;
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <tx_header_bat_brickD_vit+0x34>)
 800182c:	2200      	movs	r2, #0
 800182e:	751a      	strb	r2, [r3, #20]
}
 8001830:	bf00      	nop
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20000220 	.word	0x20000220
 8001840:	001ff713 	.word	0x001ff713

08001844 <app_can_rx_header_fcu_state>:

int16_t app_can_rx_header_fcu_state()
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
    RxHeader.DLC = 8;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <app_can_rx_header_fcu_state+0x30>)
 800184a:	2208      	movs	r2, #8
 800184c:	611a      	str	r2, [r3, #16]
    RxHeader.ExtId = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <app_can_rx_header_fcu_state+0x30>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
    RxHeader.IDE = CAN_ID_STD;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <app_can_rx_header_fcu_state+0x30>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    RxHeader.RTR = CAN_RTR_REMOTE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <app_can_rx_header_fcu_state+0x30>)
 800185c:	2202      	movs	r2, #2
 800185e:	60da      	str	r2, [r3, #12]
    RxHeader.StdId = 0x00;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <app_can_rx_header_fcu_state+0x30>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000238 	.word	0x20000238

08001878 <app_can_set_filter_config>:

int16_t app_can_set_filter_config()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <app_can_set_filter_config+0x54>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
    filterConfig.FilterActivation = ENABLE;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <app_can_set_filter_config+0x54>)
 8001884:	2201      	movs	r2, #1
 8001886:	621a      	str	r2, [r3, #32]
    filterConfig.FilterBank = 2;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <app_can_set_filter_config+0x54>)
 800188a:	2202      	movs	r2, #2
 800188c:	615a      	str	r2, [r3, #20]
    filterConfig.FilterIdLow = 0x0101;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <app_can_set_filter_config+0x54>)
 8001890:	f240 1201 	movw	r2, #257	; 0x101
 8001894:	605a      	str	r2, [r3, #4]
    filterConfig.FilterIdHigh = 0x0000;
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <app_can_set_filter_config+0x54>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
    filterConfig.FilterMaskIdLow = 0x1101;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <app_can_set_filter_config+0x54>)
 800189e:	f241 1201 	movw	r2, #4353	; 0x1101
 80018a2:	60da      	str	r2, [r3, #12]
    filterConfig.FilterMaskIdHigh = 0x1111;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <app_can_set_filter_config+0x54>)
 80018a6:	f241 1211 	movw	r2, #4369	; 0x1111
 80018aa:	609a      	str	r2, [r3, #8]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <app_can_set_filter_config+0x54>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <app_can_set_filter_config+0x54>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	61da      	str	r2, [r3, #28]
    filterConfig.SlaveStartFilterBank = 3;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <app_can_set_filter_config+0x54>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 80018be:	4903      	ldr	r1, [pc, #12]	; (80018cc <app_can_set_filter_config+0x54>)
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <app_can_set_filter_config+0x58>)
 80018c2:	f002 f8b9 	bl	8003a38 <HAL_CAN_ConfigFilter>
}
 80018c6:	bf00      	nop
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000140 	.word	0x20000140
 80018d0:	200002b8 	.word	0x200002b8

080018d4 <app_can_send_tx_msg>:

int16_t app_can_send_tx_msg(uint32_t canId)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	for(int i=0; i<9; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e00e      	b.n	8001900 <app_can_send_tx_msg+0x2c>
	{
		if(canId == can_IDs[i])
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <app_can_send_tx_msg+0x3c>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d104      	bne.n	80018fa <app_can_send_tx_msg+0x26>
		{
			(func_ptrs[i])();
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <app_can_send_tx_msg+0x40>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	4798      	blx	r3
	for(int i=0; i<9; i++)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b08      	cmp	r3, #8
 8001904:	dded      	ble.n	80018e2 <app_can_send_tx_msg+0xe>
		}
	}
}
 8001906:	bf00      	nop
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000020 	.word	0x20000020
 8001914:	20000000 	.word	0x20000000

08001918 <app_can_bat_gauge_ovr_write_data>:
int16_t app_can_bat_gauge_ovr_write_data(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_gauge_ovr();
 800191c:	f7ff fede 	bl	80016dc <app_can_tx_header_bat_gauge_ovr>
    Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGaugeOvr, &canFrame);
 8001920:	4906      	ldr	r1, [pc, #24]	; (800193c <app_can_bat_gauge_ovr_write_data+0x24>)
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <app_can_bat_gauge_ovr_write_data+0x28>)
 8001924:	f7ff f84c 	bl	80009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeOvr, canFrame.Data, &mailbox1Hz);
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <app_can_bat_gauge_ovr_write_data+0x2c>)
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <app_can_bat_gauge_ovr_write_data+0x30>)
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <app_can_bat_gauge_ovr_write_data+0x34>)
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <app_can_bat_gauge_ovr_write_data+0x38>)
 8001930:	f002 fa14 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001934:	bf00      	nop
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000168 	.word	0x20000168
 8001940:	20000134 	.word	0x20000134
 8001944:	20000254 	.word	0x20000254
 8001948:	2000016d 	.word	0x2000016d
 800194c:	200001a8 	.word	0x200001a8
 8001950:	200002b8 	.word	0x200002b8

08001954 <app_can_bat_gauge_vit_write_data>:

int16_t app_can_bat_gauge_vit_write_data(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_gauge_Vit();
 8001958:	f7ff fede 	bl	8001718 <app_can_tx_header_bat_gauge_Vit>
    Pack_BAT_GAUGE_ViT_can_codegen(&batGaugeViT, &canFrame);
 800195c:	4906      	ldr	r1, [pc, #24]	; (8001978 <app_can_bat_gauge_vit_write_data+0x24>)
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <app_can_bat_gauge_vit_write_data+0x28>)
 8001960:	f7ff f87a 	bl	8000a58 <Pack_BAT_GAUGE_ViT_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeVit, canFrame.Data, &mailbox10Hz);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <app_can_bat_gauge_vit_write_data+0x2c>)
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <app_can_bat_gauge_vit_write_data+0x30>)
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <app_can_bat_gauge_vit_write_data+0x34>)
 800196a:	4808      	ldr	r0, [pc, #32]	; (800198c <app_can_bat_gauge_vit_write_data+0x38>)
 800196c:	f002 f9f6 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001970:	bf00      	nop
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000168 	.word	0x20000168
 800197c:	20000138 	.word	0x20000138
 8001980:	20000258 	.word	0x20000258
 8001984:	2000016d 	.word	0x2000016d
 8001988:	200001c0 	.word	0x200001c0
 800198c:	200002b8 	.word	0x200002b8

08001990 <app_can_bms_ovr_write_data>:

int16_t app_can_bms_ovr_write_data(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_bms_ovr();
 8001994:	f7ff fe66 	bl	8001664 <app_can_tx_header_bat_bms_ovr>
    Pack_BAT_BMS_OvrVIEW_can_codegen(&batBmsOvr, &canFrame);
 8001998:	4906      	ldr	r1, [pc, #24]	; (80019b4 <app_can_bms_ovr_write_data+0x24>)
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <app_can_bms_ovr_write_data+0x28>)
 800199c:	f7fe fdd0 	bl	8000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBatBmsOvr, canFrame.Data, &mailbox10Hz);
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <app_can_bms_ovr_write_data+0x2c>)
 80019a2:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <app_can_bms_ovr_write_data+0x30>)
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <app_can_bms_ovr_write_data+0x34>)
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <app_can_bms_ovr_write_data+0x38>)
 80019a8:	f002 f9d8 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 80019ac:	bf00      	nop
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000168 	.word	0x20000168
 80019b8:	20000110 	.word	0x20000110
 80019bc:	20000258 	.word	0x20000258
 80019c0:	2000016d 	.word	0x2000016d
 80019c4:	20000178 	.word	0x20000178
 80019c8:	200002b8 	.word	0x200002b8

080019cc <app_can_bms_exttemp_write_data>:

int16_t app_can_bms_exttemp_write_data(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_bms_ext_temp();
 80019d0:	f7ff fe66 	bl	80016a0 <app_can_tx_header_bat_bms_ext_temp>
    Pack_BAT_BMS_ExtTemp_can_codegen(&batBmsExtTemp, &canFrame);
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <app_can_bms_exttemp_write_data+0x24>)
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <app_can_bms_exttemp_write_data+0x28>)
 80019d8:	f7fe fdea 	bl	80005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBatExtTemp, canFrame.Data, &mailbox1Hz);
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <app_can_bms_exttemp_write_data+0x2c>)
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <app_can_bms_exttemp_write_data+0x30>)
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <app_can_bms_exttemp_write_data+0x34>)
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <app_can_bms_exttemp_write_data+0x38>)
 80019e4:	f002 f9ba 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 80019e8:	bf00      	nop
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000168 	.word	0x20000168
 80019f4:	20000114 	.word	0x20000114
 80019f8:	20000254 	.word	0x20000254
 80019fc:	2000016d 	.word	0x2000016d
 8001a00:	20000190 	.word	0x20000190
 8001a04:	200002b8 	.word	0x200002b8

08001a08 <app_can_bat_afe_brickA_write_data>:

int16_t app_can_bat_afe_brickA_write_data(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_brickA_Vit();
 8001a0c:	f7ff fea2 	bl	8001754 <app_can_tx_header_bat_brickA_Vit>
    Pack_BAT_AFE_vBRICK_A_can_codegen(&batAfeBrickA, &canFrame);
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <app_can_bat_afe_brickA_write_data+0x24>)
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <app_can_bat_afe_brickA_write_data+0x28>)
 8001a14:	f7fe fe1c 	bl	8000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBrickAViT, canFrame.Data, &mailbox1Hz);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <app_can_bat_afe_brickA_write_data+0x2c>)
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <app_can_bat_afe_brickA_write_data+0x30>)
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <app_can_bat_afe_brickA_write_data+0x34>)
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <app_can_bat_afe_brickA_write_data+0x38>)
 8001a20:	f002 f99c 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001a24:	bf00      	nop
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000168 	.word	0x20000168
 8001a30:	20000118 	.word	0x20000118
 8001a34:	20000254 	.word	0x20000254
 8001a38:	2000016d 	.word	0x2000016d
 8001a3c:	200001d8 	.word	0x200001d8
 8001a40:	200002b8 	.word	0x200002b8

08001a44 <app_can_bat_afe_brickB_write_data>:

int16_t app_can_bat_afe_brickB_write_data(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_brickB_Vit();
 8001a48:	f7ff fea2 	bl	8001790 <app_can_tx_header_bat_brickB_Vit>
    Pack_BAT_AFE_vBRICK_B_can_codegen(&batAfeBrickB, &canFrame);
 8001a4c:	4906      	ldr	r1, [pc, #24]	; (8001a68 <app_can_bat_afe_brickB_write_data+0x24>)
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <app_can_bat_afe_brickB_write_data+0x28>)
 8001a50:	f7fe fe76 	bl	8000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBrickBViT, canFrame.Data, &mailbox1Hz);
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <app_can_bat_afe_brickB_write_data+0x2c>)
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <app_can_bat_afe_brickB_write_data+0x30>)
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <app_can_bat_afe_brickB_write_data+0x34>)
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <app_can_bat_afe_brickB_write_data+0x38>)
 8001a5c:	f002 f97e 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001a60:	bf00      	nop
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000168 	.word	0x20000168
 8001a6c:	20000120 	.word	0x20000120
 8001a70:	20000254 	.word	0x20000254
 8001a74:	2000016d 	.word	0x2000016d
 8001a78:	200001f0 	.word	0x200001f0
 8001a7c:	200002b8 	.word	0x200002b8

08001a80 <app_can_bat_afe_brickC_write_data>:

int16_t app_can_bat_afe_brickC_write_data(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    app_can_tx_header_bat_brickC_Vit();
 8001a84:	f7ff fea2 	bl	80017cc <app_can_tx_header_bat_brickC_Vit>
    Pack_BAT_AFE_vBRICK_C_can_codegen(&batAfeBrickC, &canFrame);
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <app_can_bat_afe_brickC_write_data+0x24>)
 8001a8a:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <app_can_bat_afe_brickC_write_data+0x28>)
 8001a8c:	f7fe fed0 	bl	8000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBrickCViT, canFrame.Data, &mailbox1Hz);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <app_can_bat_afe_brickC_write_data+0x2c>)
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <app_can_bat_afe_brickC_write_data+0x30>)
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <app_can_bat_afe_brickC_write_data+0x34>)
 8001a96:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <app_can_bat_afe_brickC_write_data+0x38>)
 8001a98:	f002 f960 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001a9c:	bf00      	nop
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000168 	.word	0x20000168
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	20000254 	.word	0x20000254
 8001ab0:	2000016d 	.word	0x2000016d
 8001ab4:	20000208 	.word	0x20000208
 8001ab8:	200002b8 	.word	0x200002b8

08001abc <app_can_bat_afe_brickD_write_data>:

int16_t app_can_bat_afe_brickD_write_data(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    tx_header_bat_brickD_vit();
 8001ac0:	f7ff fea2 	bl	8001808 <tx_header_bat_brickD_vit>
    Pack_BAT_AFE_vBRICK_D_can_codegen(&batAfeBrickD, &canFrame);
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <app_can_bat_afe_brickD_write_data+0x24>)
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <app_can_bat_afe_brickD_write_data+0x28>)
 8001ac8:	f7fe ff2a 	bl	8000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>
    HAL_CAN_AddTxMessage(&hcan1, &TxBrickDViT, canFrame.Data, &mailbox1Hz);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <app_can_bat_afe_brickD_write_data+0x2c>)
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <app_can_bat_afe_brickD_write_data+0x30>)
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <app_can_bat_afe_brickD_write_data+0x34>)
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <app_can_bat_afe_brickD_write_data+0x38>)
 8001ad4:	f002 f942 	bl	8003d5c <HAL_CAN_AddTxMessage>
}
 8001ad8:	bf00      	nop
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000168 	.word	0x20000168
 8001ae4:	20000130 	.word	0x20000130
 8001ae8:	20000254 	.word	0x20000254
 8001aec:	2000016d 	.word	0x2000016d
 8001af0:	20000220 	.word	0x20000220
 8001af4:	200002b8 	.word	0x200002b8

08001af8 <app_can_fcu_read_data>:

int16_t app_can_fcu_read_data()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    app_can_set_filter_config();
 8001afc:	f7ff febc 	bl	8001878 <app_can_set_filter_config>
    if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <app_can_fcu_read_data+0x130>)
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <app_can_fcu_read_data+0x134>)
 8001b04:	2100      	movs	r1, #0
 8001b06:	484a      	ldr	r0, [pc, #296]	; (8001c30 <app_can_fcu_read_data+0x138>)
 8001b08:	f002 fa4c 	bl	8003fa4 <HAL_CAN_GetRxMessage>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8083 	bne.w	8001c1a <app_can_fcu_read_data+0x122>
    {
        id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, 1);
 8001b14:	2201      	movs	r2, #1
 8001b16:	4944      	ldr	r1, [pc, #272]	; (8001c28 <app_can_fcu_read_data+0x130>)
 8001b18:	4846      	ldr	r0, [pc, #280]	; (8001c34 <app_can_fcu_read_data+0x13c>)
 8001b1a:	f7fe fcfb 	bl	8000514 <Unpack_FCU_STATE_REQUEST_can_codegen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <app_can_fcu_read_data+0x140>)
 8001b22:	6013      	str	r3, [r2, #0]
	    switch (state[0])
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <app_can_fcu_read_data+0x130>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d878      	bhi.n	8001c1e <app_can_fcu_read_data+0x126>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <app_can_fcu_read_data+0x3c>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b73 	.word	0x08001b73
 8001b3c:	08001b9d 	.word	0x08001b9d
 8001b40:	08001bc7 	.word	0x08001bc7
 8001b44:	08001bf1 	.word	0x08001bf1
	    {
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	483b      	ldr	r0, [pc, #236]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b50:	f003 fe40 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	4838      	ldr	r0, [pc, #224]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b5c:	f003 fe3a 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4835      	ldr	r0, [pc, #212]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b68:	f003 fe34 	bl	80057d4 <HAL_GPIO_WritePin>
				bq76952_FETs_OFF(); // replace with all fets off function call
 8001b6c:	f7ff f8c9 	bl	8000d02 <bq76952_FETs_OFF>
				break;
 8001b70:	e056      	b.n	8001c20 <app_can_fcu_read_data+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b78:	4830      	ldr	r0, [pc, #192]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b7a:	f003 fe2b 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b84:	482d      	ldr	r0, [pc, #180]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b86:	f003 fe25 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b90:	482a      	ldr	r0, [pc, #168]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001b92:	f003 fe1f 	bl	80057d4 <HAL_GPIO_WritePin>
				bq76952_FETs_ON(); //replace with all fets on function call
 8001b96:	f7ff f88b 	bl	8000cb0 <bq76952_FETs_ON>
				break;
 8001b9a:	e041      	b.n	8001c20 <app_can_fcu_read_data+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	4826      	ldr	r0, [pc, #152]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001ba4:	f003 fe16 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bae:	4823      	ldr	r0, [pc, #140]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001bb0:	f003 fe10 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4820      	ldr	r0, [pc, #128]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001bbc:	f003 fe0a 	bl	80057d4 <HAL_GPIO_WritePin>
				bq76952_AFE_reset();// replace with afe reset function call
 8001bc0:	f7ff f902 	bl	8000dc8 <bq76952_AFE_reset>
				break;
 8001bc4:	e02c      	b.n	8001c20 <app_can_fcu_read_data+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bcc:	481b      	ldr	r0, [pc, #108]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001bce:	f003 fe01 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd8:	4818      	ldr	r0, [pc, #96]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001bda:	f003 fdfb 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be4:	4815      	ldr	r0, [pc, #84]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001be6:	f003 fdf5 	bl	80057d4 <HAL_GPIO_WritePin>
				bq76952_Charge();
 8001bea:	f7ff f8a9 	bl	8000d40 <bq76952_Charge>
				break;
 8001bee:	e017      	b.n	8001c20 <app_can_fcu_read_data+0x128>
			case 4:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001bf8:	f003 fdec 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001c04:	f003 fde6 	bl	80057d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	480b      	ldr	r0, [pc, #44]	; (8001c3c <app_can_fcu_read_data+0x144>)
 8001c10:	f003 fde0 	bl	80057d4 <HAL_GPIO_WritePin>
				bq76952_Discharge();
 8001c14:	f7ff f8b6 	bl	8000d84 <bq76952_Discharge>
				break;
 8001c18:	e002      	b.n	8001c20 <app_can_fcu_read_data+0x128>
			default:
				break;
		}
    }
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <app_can_fcu_read_data+0x128>
				break;
 8001c1e:	bf00      	nop
}
 8001c20:	bf00      	nop
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000260 	.word	0x20000260
 8001c2c:	20000238 	.word	0x20000238
 8001c30:	200002b8 	.word	0x200002b8
 8001c34:	2000010c 	.word	0x2000010c
 8001c38:	2000025c 	.word	0x2000025c
 8001c3c:	40020400 	.word	0x40020400

08001c40 <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8001c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4a:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <app_gauge_init+0x2c>)
 8001c4e:	2202      	movs	r2, #2
 8001c50:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <app_gauge_init+0x2c>)
 8001c54:	2212      	movs	r2, #18
 8001c56:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8001c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000268 	.word	0x20000268

08001c70 <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7a:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8001c7c:	f000 fad2 	bl	8002224 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8001c80:	f000 fbac 	bl	80023dc <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8001c84:	f000 fd3a 	bl	80026fc <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8001c88:	f000 f8bc 	bl	8001e04 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8001c8c:	f000 f95e 	bl	8001f4c <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 8001c90:	f000 f822 	bl	8001cd8 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8001c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8001cac:	f7ff fcb8 	bl	8001620 <app_afe_init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d107      	bne.n	8001cc6 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8001cb6:	f7ff ffc3 	bl	8001c40 <app_gauge_init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d104      	bne.n	8001cca <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	e002      	b.n	8001ccc <app_sys_peripheral_init+0x2c>
			break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <app_sys_peripheral_init+0x2c>
			break;
 8001cca:	bf00      	nop
	}while(false);

	return ret_val;
 8001ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <MX_ADC1_Init+0x9c>)
 8001cee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <MX_ADC1_Init+0xa0>)
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d3a:	f001 f827 	bl	8002d8c <HAL_ADC_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d44:	f000 fcca 	bl	80026dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d48:	230a      	movs	r3, #10
 8001d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_ADC1_Init+0x98>)
 8001d5a:	f001 f983 	bl	8003064 <HAL_ADC_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d64:	f000 fcba 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000270 	.word	0x20000270
 8001d74:	40012000 	.word	0x40012000
 8001d78:	0f000001 	.word	0x0f000001

08001d7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_ADC_MspInit+0x7c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d127      	bne.n	8001dee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_ADC_MspInit+0x80>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_ADC_MspInit+0x84>)
 8001dea:	f003 f9cf 	bl	800518c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020800 	.word	0x40020800

08001e04 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <MX_CAN1_Init+0x74>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e10:	2205      	movs	r2, #5
 8001e12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e22:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e56:	f001 fb85 	bl	8003564 <HAL_CAN_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e60:	f000 fc3c 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <MX_CAN1_Init+0x70>)
 8001e66:	f001 ff35 	bl	8003cd4 <HAL_CAN_Start>
  app_can_rx_header_fcu_state();
 8001e6a:	f7ff fceb 	bl	8001844 <app_can_rx_header_fcu_state>

  /* USER CODE END CAN1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200002b8 	.word	0x200002b8
 8001e78:	40006400 	.word	0x40006400

08001e7c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_CAN_MspInit+0xc4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d14c      	bne.n	8001f38 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_CAN_MspInit+0xc8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ed6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ee8:	2309      	movs	r3, #9
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4815      	ldr	r0, [pc, #84]	; (8001f48 <HAL_CAN_MspInit+0xcc>)
 8001ef4:	f003 f94a 	bl	800518c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	2013      	movs	r0, #19
 8001efe:	f002 fc7b 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001f02:	2013      	movs	r0, #19
 8001f04:	f002 fca4 	bl	8004850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	2014      	movs	r0, #20
 8001f0e:	f002 fc73 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f12:	2014      	movs	r0, #20
 8001f14:	f002 fc9c 	bl	8004850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2105      	movs	r1, #5
 8001f1c:	2015      	movs	r0, #21
 8001f1e:	f002 fc6b 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f22:	2015      	movs	r0, #21
 8001f24:	f002 fc94 	bl	8004850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2105      	movs	r1, #5
 8001f2c:	2016      	movs	r0, #22
 8001f2e:	f002 fc63 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f32:	2016      	movs	r0, #22
 8001f34:	f002 fc8c 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40006400 	.word	0x40006400
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_DMA_Init+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	200b      	movs	r0, #11
 8001f90:	f002 fc32 	bl	80047f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f94:	200b      	movs	r0, #11
 8001f96:	f002 fc5b 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	2011      	movs	r0, #17
 8001fa0:	f002 fc2a 	bl	80047f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001fa4:	2011      	movs	r0, #17
 8001fa6:	f002 fc53 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2105      	movs	r1, #5
 8001fae:	2038      	movs	r0, #56	; 0x38
 8001fb0:	f002 fc22 	bl	80047f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fb4:	2038      	movs	r0, #56	; 0x38
 8001fb6:	f002 fc4b 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	203b      	movs	r0, #59	; 0x3b
 8001fc0:	f002 fc1a 	bl	80047f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fc4:	203b      	movs	r0, #59	; 0x3b
 8001fc6:	f002 fc43 	bl	8004850 <HAL_NVIC_EnableIRQ>

}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fe8:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <vApplicationGetIdleTaskMemory+0x30>)
 8001fee:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000330 	.word	0x20000330
 8002008:	200003e4 	.word	0x200003e4

0800200c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b096      	sub	sp, #88	; 0x58
 8002010:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */
    /* USER CODE END Init */
    can_tx_queue = xQueueCreate(10, sizeof(uint32_t)); //to be used to queue the messages being sent on CAN line												//only 3 messages can be transmitted at once at the hardware level.
 8002012:	2200      	movs	r2, #0
 8002014:	2104      	movs	r1, #4
 8002016:	200a      	movs	r0, #10
 8002018:	f007 fd96 	bl	8009b48 <xQueueGenericCreate>
 800201c:	4603      	mov	r3, r0
 800201e:	4a27      	ldr	r2, [pc, #156]	; (80020bc <MX_FREERTOS_Init+0xb0>)
 8002020:	6013      	str	r3, [r2, #0]
    can_rx_queue = xQueueCreate(10, sizeof(uint32_t));
 8002022:	2200      	movs	r2, #0
 8002024:	2104      	movs	r1, #4
 8002026:	200a      	movs	r0, #10
 8002028:	f007 fd8e 	bl	8009b48 <xQueueGenericCreate>
 800202c:	4603      	mov	r3, r0
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <MX_FREERTOS_Init+0xb4>)
 8002030:	6013      	str	r3, [r2, #0]
	if(can_tx_queue != NULL)
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_FREERTOS_Init+0xb0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <MX_FREERTOS_Init+0x3a>
    {
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002040:	4820      	ldr	r0, [pc, #128]	; (80020c4 <MX_FREERTOS_Init+0xb8>)
 8002042:	f003 fbc7 	bl	80057d4 <HAL_GPIO_WritePin>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of APP_1HZ_TASK */
    osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <MX_FREERTOS_Init+0xbc>)
 8002048:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800204c:	461d      	mov	r5, r3
 800204e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 800205a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f007 fc09 	bl	8009878 <osThreadCreate>
 8002066:	4603      	mov	r3, r0
 8002068:	4a18      	ldr	r2, [pc, #96]	; (80020cc <MX_FREERTOS_Init+0xc0>)
 800206a:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityNormal, 0, 128);
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_FREERTOS_Init+0xc4>)
 800206e:	f107 0420 	add.w	r4, r7, #32
 8002072:	461d      	mov	r5, r3
 8002074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800207c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f007 fbf6 	bl	8009878 <osThreadCreate>
 800208c:	4603      	mov	r3, r0
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <MX_FREERTOS_Init+0xc8>)
 8002090:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityNormal, 0, 128);
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_FREERTOS_Init+0xcc>)
 8002094:	1d3c      	adds	r4, r7, #4
 8002096:	461d      	mov	r5, r3
 8002098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f007 fbe5 	bl	8009878 <osThreadCreate>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <MX_FREERTOS_Init+0xd0>)
 80020b2:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */
}
 80020b4:	bf00      	nop
 80020b6:	3758      	adds	r7, #88	; 0x58
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}
 80020bc:	20000328 	.word	0x20000328
 80020c0:	2000032c 	.word	0x2000032c
 80020c4:	40020400 	.word	0x40020400
 80020c8:	0800baf0 	.word	0x0800baf0
 80020cc:	2000031c 	.word	0x2000031c
 80020d0:	0800bb0c 	.word	0x0800bb0c
 80020d4:	20000320 	.word	0x20000320
 80020d8:	0800bb28 	.word	0x0800bb28
 80020dc:	20000324 	.word	0x20000324

080020e0 <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const *argument)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 50;
 80020e8:	2332      	movs	r3, #50	; 0x32
 80020ea:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 80020ec:	f008 fbce 	bl	800a88c <xTaskGetTickCount>
 80020f0:	4603      	mov	r3, r0
 80020f2:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        app_afe_data_read();
 80020f4:	f7ff f9da 	bl	80014ac <app_afe_data_read>
        //xSemaphoreTake(can_task_semaphore_handle, 10);
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	4618      	mov	r0, r3
 8002100:	f008 fa32 	bl	800a568 <vTaskDelayUntil>
    {
 8002104:	e7f6      	b.n	80020f4 <app_task_1Hz+0x14>
	...

08002108 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const *argument)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    uint16_t counter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	82fb      	strh	r3, [r7, #22]
    const TickType_t xFrequency = 100;
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8002118:	f008 fbb8 	bl	800a88c <xTaskGetTickCount>
 800211c:	4603      	mov	r3, r0
 800211e:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        //xSemaphoreTake(can_task_semaphore_handle, 1000);
        if(counter%5==0)
 8002120:	8afa      	ldrh	r2, [r7, #22]
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <app_task_10hz+0xa4>)
 8002124:	fba3 1302 	umull	r1, r3, r3, r2
 8002128:	0899      	lsrs	r1, r3, #2
 800212a:	460b      	mov	r3, r1
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <app_task_10hz+0x34>
    	    app_can_fcu_read_data();
 8002138:	f7ff fcde 	bl	8001af8 <app_can_fcu_read_data>
        if(counter%10 == 0)
 800213c:	8afa      	ldrh	r2, [r7, #22]
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <app_task_10hz+0xa4>)
 8002140:	fba3 1302 	umull	r1, r3, r3, r2
 8002144:	08d9      	lsrs	r1, r3, #3
 8002146:	460b      	mov	r3, r1
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <app_task_10hz+0x74>
        {
            for(int i = 1;i<7;i++)
 8002156:	2301      	movs	r3, #1
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e00c      	b.n	8002176 <app_task_10hz+0x6e>
            {
                xQueueSend(can_tx_queue, &can_IDs[i], (TickType_t)10);
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <app_task_10hz+0xa8>)
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <app_task_10hz+0xac>)
 8002166:	1899      	adds	r1, r3, r2
 8002168:	2300      	movs	r3, #0
 800216a:	220a      	movs	r2, #10
 800216c:	f007 fd46 	bl	8009bfc <xQueueGenericSend>
            for(int i = 1;i<7;i++)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3301      	adds	r3, #1
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b06      	cmp	r3, #6
 800217a:	ddef      	ble.n	800215c <app_task_10hz+0x54>
            }
        }
        counter++;
 800217c:	8afb      	ldrh	r3, [r7, #22]
 800217e:	3301      	adds	r3, #1
 8002180:	82fb      	strh	r3, [r7, #22]
        xQueueSend(can_tx_queue, &can_IDs[0],(TickType_t)10); //GaugeVit
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <app_task_10hz+0xa8>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	220a      	movs	r2, #10
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <app_task_10hz+0xac>)
 800218c:	f007 fd36 	bl	8009bfc <xQueueGenericSend>
        xQueueSend(can_tx_queue, &can_IDs[7],(TickType_t)10); //BMS Ovr
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <app_task_10hz+0xa8>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	220a      	movs	r2, #10
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <app_task_10hz+0xb0>)
 800219a:	f007 fd2f 	bl	8009bfc <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f008 f9df 	bl	800a568 <vTaskDelayUntil>
        if(counter%5==0)
 80021aa:	e7b9      	b.n	8002120 <app_task_10hz+0x18>
 80021ac:	cccccccd 	.word	0xcccccccd
 80021b0:	20000328 	.word	0x20000328
 80021b4:	20000020 	.word	0x20000020
 80021b8:	2000003c 	.word	0x2000003c

080021bc <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const *argument)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    uint32_t* pReceive;
    int counter = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
    const TickType_t xFrequency = 10;
 80021c8:	230a      	movs	r3, #10
 80021ca:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 80021cc:	f008 fb5e 	bl	800a88c <xTaskGetTickCount>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
        if(counter%2 == 0)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <app_task_100hz+0x26>
        {
    	    app_afe_can_message_update();
 80021de:	f7ff f9d7 	bl	8001590 <app_afe_can_message_update>
        }
        if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <app_task_100hz+0x64>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f007 fee6 	bl	8009fb8 <uxQueueMessagesWaiting>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00e      	beq.n	8002210 <app_task_100hz+0x54>
        {
        //xSemaphoreTake(can_task_semaphore_handle, 10);
    	    if(xQueueReceive(can_tx_queue, &pReceive, 100) == pdPASS)
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <app_task_100hz+0x64>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f107 0108 	add.w	r1, r7, #8
 80021fa:	2264      	movs	r2, #100	; 0x64
 80021fc:	4618      	mov	r0, r3
 80021fe:	f007 fdfb 	bl	8009df8 <xQueueReceive>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d103      	bne.n	8002210 <app_task_100hz+0x54>
    	    {
    	    	app_can_send_tx_msg(pReceive);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fb62 	bl	80018d4 <app_can_send_tx_msg>
    	    }
        }
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	4618      	mov	r0, r3
 8002218:	f008 f9a6 	bl	800a568 <vTaskDelayUntil>
        if(counter%2 == 0)
 800221c:	e7da      	b.n	80021d4 <app_task_100hz+0x18>
 800221e:	bf00      	nop
 8002220:	20000328 	.word	0x20000328

08002224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a61      	ldr	r2, [pc, #388]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a5a      	ldr	r2, [pc, #360]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a4c      	ldr	r2, [pc, #304]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a45      	ldr	r2, [pc, #276]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <MX_GPIO_Init+0x1a4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2106      	movs	r1, #6
 80022ca:	4840      	ldr	r0, [pc, #256]	; (80023cc <MX_GPIO_Init+0x1a8>)
 80022cc:	f003 fa82 	bl	80057d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 80022d6:	483e      	ldr	r0, [pc, #248]	; (80023d0 <MX_GPIO_Init+0x1ac>)
 80022d8:	f003 fa7c 	bl	80057d4 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 80022dc:	2200      	movs	r2, #0
 80022de:	f24f 0104 	movw	r1, #61444	; 0xf004
 80022e2:	483c      	ldr	r0, [pc, #240]	; (80023d4 <MX_GPIO_Init+0x1b0>)
 80022e4:	f003 fa76 	bl	80057d4 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 80022e8:	f24f 630c 	movw	r3, #62988	; 0xf60c
 80022ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ee:	2303      	movs	r3, #3
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4834      	ldr	r0, [pc, #208]	; (80023d0 <MX_GPIO_Init+0x1ac>)
 80022fe:	f002 ff45 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8002302:	f248 1319 	movw	r3, #33049	; 0x8119
 8002306:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002308:	2303      	movs	r3, #3
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	482d      	ldr	r0, [pc, #180]	; (80023cc <MX_GPIO_Init+0x1a8>)
 8002318:	f002 ff38 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 800231c:	2306      	movs	r3, #6
 800231e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4826      	ldr	r0, [pc, #152]	; (80023cc <MX_GPIO_Init+0x1a8>)
 8002334:	f002 ff2a 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002338:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 800233c:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	481f      	ldr	r0, [pc, #124]	; (80023d0 <MX_GPIO_Init+0x1ac>)
 8002352:	f002 ff1b 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8002356:	2303      	movs	r3, #3
 8002358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	481a      	ldr	r0, [pc, #104]	; (80023d4 <MX_GPIO_Init+0x1b0>)
 800236a:	f002 ff0f 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 800236e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8002372:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <MX_GPIO_Init+0x1b0>)
 8002388:	f002 ff00 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800238c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8002390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_GPIO_Init+0x1b0>)
 80023a2:	f002 fef3 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 80023a6:	2304      	movs	r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MX_GPIO_Init+0x1b4>)
 80023ba:	f002 fee7 	bl	800518c <HAL_GPIO_Init>

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020c00 	.word	0x40020c00

080023dc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_I2C1_Init+0x50>)
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <MX_I2C1_Init+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_I2C1_Init+0x50>)
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_I2C1_Init+0x58>)
 80023ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_I2C1_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_I2C1_Init+0x50>)
 80023f4:	22a8      	movs	r2, #168	; 0xa8
 80023f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_I2C1_Init+0x50>)
 80023fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_I2C1_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_I2C1_Init+0x50>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_I2C1_Init+0x50>)
 800241a:	f003 fa0d 	bl	8005838 <HAL_I2C_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002424:	f000 f95a 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200005e4 	.word	0x200005e4
 8002430:	40005400 	.word	0x40005400
 8002434:	000186a0 	.word	0x000186a0

08002438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a50      	ldr	r2, [pc, #320]	; (8002598 <HAL_I2C_MspInit+0x160>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f040 809a 	bne.w	8002590 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_I2C_MspInit+0x164>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_I2C_MspInit+0x164>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <HAL_I2C_MspInit+0x164>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002478:	23c0      	movs	r3, #192	; 0xc0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247c:	2312      	movs	r3, #18
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002488:	2304      	movs	r3, #4
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4843      	ldr	r0, [pc, #268]	; (80025a0 <HAL_I2C_MspInit+0x168>)
 8002494:	f002 fe7a 	bl	800518c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_I2C_MspInit+0x164>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4a3e      	ldr	r2, [pc, #248]	; (800259c <HAL_I2C_MspInit+0x164>)
 80024a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a6:	6413      	str	r3, [r2, #64]	; 0x40
 80024a8:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_I2C_MspInit+0x164>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024b6:	4a3c      	ldr	r2, [pc, #240]	; (80025a8 <HAL_I2C_MspInit+0x170>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c2:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c8:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ce:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80024f6:	482b      	ldr	r0, [pc, #172]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 80024f8:	f002 f9c2 	bl	8004880 <HAL_DMA_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002502:	f000 f8eb 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <HAL_I2C_MspInit+0x16c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002514:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_I2C_MspInit+0x178>)
 8002516:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_I2C_MspInit+0x174>)
 800251a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_I2C_MspInit+0x174>)
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002536:	2200      	movs	r2, #0
 8002538:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_I2C_MspInit+0x174>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002548:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800254c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002550:	2200      	movs	r2, #0
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002554:	4815      	ldr	r0, [pc, #84]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002556:	f002 f993 	bl	8004880 <HAL_DMA_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8002560:	f000 f8bc 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_I2C_MspInit+0x174>)
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_I2C_MspInit+0x174>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2105      	movs	r1, #5
 8002574:	201f      	movs	r0, #31
 8002576:	f002 f93f 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800257a:	201f      	movs	r0, #31
 800257c:	f002 f968 	bl	8004850 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2105      	movs	r1, #5
 8002584:	2020      	movs	r0, #32
 8002586:	f002 f937 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800258a:	2020      	movs	r0, #32
 800258c:	f002 f960 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40005400 	.word	0x40005400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020400 	.word	0x40020400
 80025a4:	20000638 	.word	0x20000638
 80025a8:	40026010 	.word	0x40026010
 80025ac:	20000698 	.word	0x20000698
 80025b0:	400260a0 	.word	0x400260a0

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b8:	f000 fb82 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 80025bc:	f000 f80a 	bl	80025d4 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 80025c0:	f7ff fb56 	bl	8001c70 <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 80025c4:	f7ff fb6c 	bl	8001ca0 <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80025c8:	f7ff fd20 	bl	800200c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80025cc:	f007 f94d 	bl	800986a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <main+0x1c>
	...

080025d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b094      	sub	sp, #80	; 0x50
 80025d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	2234      	movs	r2, #52	; 0x34
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f009 f994 	bl	800b910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <SystemClock_Config+0xdc>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <SystemClock_Config+0xdc>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <SystemClock_Config+0xdc>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002614:	2300      	movs	r3, #0
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <SystemClock_Config+0xe0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <SystemClock_Config+0xe0>)
 800261e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <SystemClock_Config+0xe0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002630:	2301      	movs	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800263a:	2302      	movs	r3, #2
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002644:	2304      	movs	r3, #4
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002648:	23b4      	movs	r3, #180	; 0xb4
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800264c:	2302      	movs	r3, #2
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002650:	2302      	movs	r3, #2
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002654:	2302      	movs	r3, #2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fc1f 	bl	8007ea0 <HAL_RCC_OscConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002668:	f000 f838 	bl	80026dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800266c:	f004 ff8c 	bl	8007588 <HAL_PWREx_EnableOverDrive>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002676:	f000 f831 	bl	80026dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267a:	230f      	movs	r3, #15
 800267c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800267e:	2302      	movs	r3, #2
 8002680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800268a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002692:	f107 0308 	add.w	r3, r7, #8
 8002696:	2105      	movs	r1, #5
 8002698:	4618      	mov	r0, r3
 800269a:	f004 ffc5 	bl	8007628 <HAL_RCC_ClockConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80026a4:	f000 f81a 	bl	80026dc <Error_Handler>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3750      	adds	r7, #80	; 0x50
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000

080026b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026ca:	f000 fb1b 	bl	8002d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <Error_Handler+0x8>

080026e6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_SPI1_Init+0x64>)
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <MX_SPI1_Init+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MX_SPI1_Init+0x64>)
 8002708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800270c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_SPI1_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_SPI1_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_SPI1_Init+0x64>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_SPI1_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_SPI1_Init+0x64>)
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_SPI1_Init+0x64>)
 8002730:	2238      	movs	r2, #56	; 0x38
 8002732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <MX_SPI1_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_SPI1_Init+0x64>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <MX_SPI1_Init+0x64>)
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_SPI1_Init+0x64>)
 8002748:	220a      	movs	r2, #10
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <MX_SPI1_Init+0x64>)
 800274e:	f005 ff03 	bl	8008558 <HAL_SPI_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002758:	f7ff ffc0 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200006f8 	.word	0x200006f8
 8002764:	40013000 	.word	0x40013000

08002768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_SPI_MspInit+0x150>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 8092 	bne.w	80028b0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_SPI_MspInit+0x154>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_SPI_MspInit+0x154>)
 8002796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800279a:	6453      	str	r3, [r2, #68]	; 0x44
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_SPI_MspInit+0x154>)
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_SPI_MspInit+0x154>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_SPI_MspInit+0x154>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_SPI_MspInit+0x154>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027c4:	23e0      	movs	r3, #224	; 0xe0
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027d4:	2305      	movs	r3, #5
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	4838      	ldr	r0, [pc, #224]	; (80028c0 <HAL_SPI_MspInit+0x158>)
 80027e0:	f002 fcd4 	bl	800518c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 80027e6:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_SPI_MspInit+0x160>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 80027ec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80027f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f2:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 8002800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002804:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 800281a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800281e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002826:	4827      	ldr	r0, [pc, #156]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 8002828:	f002 f82a 	bl	8004880 <HAL_DMA_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002832:	f7ff ff53 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 800283a:	64da      	str	r2, [r3, #76]	; 0x4c
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_SPI_MspInit+0x15c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_SPI_MspInit+0x168>)
 8002846:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_SPI_MspInit+0x164>)
 800284a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800284e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_SPI_MspInit+0x164>)
 800285e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002862:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002866:	2200      	movs	r2, #0
 8002868:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_SPI_MspInit+0x164>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002878:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800287c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002886:	f001 fffb 	bl	8004880 <HAL_DMA_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002890:	f7ff ff24 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_SPI_MspInit+0x164>)
 8002898:	649a      	str	r2, [r3, #72]	; 0x48
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_SPI_MspInit+0x164>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2105      	movs	r1, #5
 80028a4:	2023      	movs	r0, #35	; 0x23
 80028a6:	f001 ffa7 	bl	80047f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028aa:	2023      	movs	r0, #35	; 0x23
 80028ac:	f001 ffd0 	bl	8004850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	20000778 	.word	0x20000778
 80028c8:	40026410 	.word	0x40026410
 80028cc:	200007d8 	.word	0x200007d8
 80028d0:	40026458 	.word	0x40026458

080028d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_MspInit+0x54>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_MspInit+0x54>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_MspInit+0x54>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_MspInit+0x54>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_MspInit+0x54>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_MspInit+0x54>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	210f      	movs	r1, #15
 8002916:	f06f 0001 	mvn.w	r0, #1
 800291a:	f001 ff6d 	bl	80047f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_InitTick+0xd4>)
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <HAL_InitTick+0xd4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6453      	str	r3, [r2, #68]	; 0x44
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_InitTick+0xd4>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f005 f83a 	bl	80079dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002968:	f005 f824 	bl	80079b4 <HAL_RCC_GetPCLK2Freq>
 800296c:	4603      	mov	r3, r0
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <HAL_InitTick+0xd8>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	3b01      	subs	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_InitTick+0xdc>)
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_InitTick+0xe0>)
 8002984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_InitTick+0xdc>)
 8002988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800298c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_InitTick+0xdc>)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_InitTick+0xdc>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_InitTick+0xdc>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_InitTick+0xdc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80029a6:	4818      	ldr	r0, [pc, #96]	; (8002a08 <HAL_InitTick+0xdc>)
 80029a8:	f006 fb7a 	bl	80090a0 <HAL_TIM_Base_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80029b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11b      	bne.n	80029f2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80029ba:	4813      	ldr	r0, [pc, #76]	; (8002a08 <HAL_InitTick+0xdc>)
 80029bc:	f006 fc6a 	bl	8009294 <HAL_TIM_Base_Start_IT>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80029c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d111      	bne.n	80029f2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029ce:	2019      	movs	r0, #25
 80029d0:	f001 ff3e 	bl	8004850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d808      	bhi.n	80029ec <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80029da:	2200      	movs	r2, #0
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	2019      	movs	r0, #25
 80029e0:	f001 ff0a 	bl	80047f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_InitTick+0xe4>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e002      	b.n	80029f2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80029f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	20000838 	.word	0x20000838
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	20000044 	.word	0x20000044

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <NMI_Handler+0x4>

08002a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <HardFault_Handler+0x4>

08002a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <MemManage_Handler+0x4>

08002a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <BusFault_Handler+0x4>

08002a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <UsageFault_Handler+0x4>

08002a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <WWDG_IRQHandler+0x10>)
 8002a46:	f006 fecf 	bl	80097e8 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000880 	.word	0x20000880

08002a54 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <DMA1_Stream0_IRQHandler+0x10>)
 8002a5a:	f002 f94d 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000638 	.word	0x20000638

08002a68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <DMA1_Stream6_IRQHandler+0x10>)
 8002a6e:	f002 f943 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000698 	.word	0x20000698

08002a7c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <CAN1_TX_IRQHandler+0x10>)
 8002a82:	f001 fbad 	bl	80041e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200002b8 	.word	0x200002b8

08002a90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <CAN1_RX0_IRQHandler+0x10>)
 8002a96:	f001 fba3 	bl	80041e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002b8 	.word	0x200002b8

08002aa4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <CAN1_RX1_IRQHandler+0x10>)
 8002aaa:	f001 fb99 	bl	80041e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002b8 	.word	0x200002b8

08002ab8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <CAN1_SCE_IRQHandler+0x10>)
 8002abe:	f001 fb8f 	bl	80041e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200002b8 	.word	0x200002b8

08002acc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ad2:	f006 fca5 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000838 	.word	0x20000838

08002ae0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <I2C1_EV_IRQHandler+0x10>)
 8002ae6:	f003 f873 	bl	8005bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200005e4 	.word	0x200005e4

08002af4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <I2C1_ER_IRQHandler+0x10>)
 8002afa:	f003 f9da 	bl	8005eb2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200005e4 	.word	0x200005e4

08002b08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <SPI1_IRQHandler+0x10>)
 8002b0e:	f006 f897 	bl	8008c40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200006f8 	.word	0x200006f8

08002b1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <DMA2_Stream0_IRQHandler+0x10>)
 8002b22:	f002 f8e9 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000778 	.word	0x20000778

08002b30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <DMA2_Stream3_IRQHandler+0x10>)
 8002b36:	f002 f8df 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200007d8 	.word	0x200007d8

08002b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b6c:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b6e:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b74:	e002      	b.n	8002b7c <LoopCopyDataInit>

08002b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7a:	3304      	adds	r3, #4

08002b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b80:	d3f9      	bcc.n	8002b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b82:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b84:	4c0b      	ldr	r4, [pc, #44]	; (8002bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b88:	e001      	b.n	8002b8e <LoopFillZerobss>

08002b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b8c:	3204      	adds	r2, #4

08002b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b90:	d3fb      	bcc.n	8002b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b92:	f7ff ffd7 	bl	8002b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b96:	f008 fe89 	bl	800b8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9a:	f7ff fd0b 	bl	80025b4 <main>
  bx  lr    
 8002b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002bac:	0800be18 	.word	0x0800be18
  ldr r2, =_sbss
 8002bb0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002bb4:	200103fc 	.word	0x200103fc

08002bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC_IRQHandler>

08002bba <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
 8002bcc:	f7ff fd86 	bl	80026dc <Error_Handler>
 8002bd0:	e7fe      	b.n	8002bd0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d904      	bls.n	8002be4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bda:	b672      	cpsid	i
}
 8002bdc:	bf00      	nop
 8002bde:	f7ff fd7d 	bl	80026dc <Error_Handler>
 8002be2:	e7fe      	b.n	8002be2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7a1b      	ldrb	r3, [r3, #8]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	b2d1      	uxtb	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	7211      	strb	r1, [r2, #8]
 8002bf0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60fa      	str	r2, [r7, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c28:	b672      	cpsid	i
}
 8002c2a:	bf00      	nop
 8002c2c:	f7ff fd56 	bl	80026dc <Error_Handler>
 8002c30:	e7fe      	b.n	8002c30 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7a1b      	ldrb	r3, [r3, #8]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7a1b      	ldrb	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d904      	bls.n	8002c50 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c46:	b672      	cpsid	i
}
 8002c48:	bf00      	nop
 8002c4a:	f7ff fd47 	bl	80026dc <Error_Handler>
 8002c4e:	e7fe      	b.n	8002c4e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7a1b      	ldrb	r3, [r3, #8]
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c64:	bf00      	nop
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
}
 8002c7e:	bf00      	nop
 8002c80:	f7ff fd2c 	bl	80026dc <Error_Handler>
 8002c84:	e7fe      	b.n	8002c84 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff96 	bl	8002bba <stm32_lock_acquire>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
 8002ca8:	f7ff fd18 	bl	80026dc <Error_Handler>
 8002cac:	e7fe      	b.n	8002cac <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ffb2 	bl	8002c1a <stm32_lock_release>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_Init+0x40>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_Init+0x40>)
 8002cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_Init+0x40>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f001 fd65 	bl	80047b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cee:	200f      	movs	r0, #15
 8002cf0:	f7ff fe1c 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf4:	f7ff fdee 	bl	80028d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000048 	.word	0x20000048
 8002d28:	200008a0 	.word	0x200008a0

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	200008a0 	.word	0x200008a0

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_Delay+0x44>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000048 	.word	0x20000048

08002d8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e15c      	b.n	800305c <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a8e      	ldr	r2, [pc, #568]	; (8002fe0 <HAL_ADC_Init+0x254>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_ADC_Init+0x3e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a8c      	ldr	r2, [pc, #560]	; (8002fe4 <HAL_ADC_Init+0x258>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_ADC_Init+0x3e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a8b      	ldr	r2, [pc, #556]	; (8002fe8 <HAL_ADC_Init+0x25c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x3e>
 8002dc0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002dc4:	4889      	ldr	r0, [pc, #548]	; (8002fec <HAL_ADC_Init+0x260>)
 8002dc6:	f7ff fc8e 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d013      	beq.n	8002dfa <HAL_ADC_Init+0x6e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dda:	d00e      	beq.n	8002dfa <HAL_ADC_Init+0x6e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_Init+0x6e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_Init+0x6e>
 8002df0:	f240 1143 	movw	r1, #323	; 0x143
 8002df4:	487d      	ldr	r0, [pc, #500]	; (8002fec <HAL_ADC_Init+0x260>)
 8002df6:	f7ff fc76 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d013      	beq.n	8002e2a <HAL_ADC_Init+0x9e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0a:	d00e      	beq.n	8002e2a <HAL_ADC_Init+0x9e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e14:	d009      	beq.n	8002e2a <HAL_ADC_Init+0x9e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_Init+0x9e>
 8002e20:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002e24:	4871      	ldr	r0, [pc, #452]	; (8002fec <HAL_ADC_Init+0x260>)
 8002e26:	f7ff fc5e 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_ADC_Init+0xb8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_Init+0xb8>
 8002e3a:	f240 1145 	movw	r1, #325	; 0x145
 8002e3e:	486b      	ldr	r0, [pc, #428]	; (8002fec <HAL_ADC_Init+0x260>)
 8002e40:	f7ff fc51 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_ADC_Init+0xd2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e1b      	ldrb	r3, [r3, #24]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_Init+0xd2>
 8002e54:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002e58:	4864      	ldr	r0, [pc, #400]	; (8002fec <HAL_ADC_Init+0x260>)
 8002e5a:	f7ff fc44 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d054      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6e:	d04f      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e78:	d04a      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e82:	d045      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e8c:	d040      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002e96:	d03b      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ea0:	d036      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002eaa:	d031      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb4:	d02c      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002ebe:	d027      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002ec8:	d022      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002ed2:	d01d      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002edc:	d018      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002ee6:	d013      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002ef0:	d00e      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002efa:	d009      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <HAL_ADC_Init+0x264>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_ADC_Init+0x184>
 8002f06:	f240 1147 	movw	r1, #327	; 0x147
 8002f0a:	4838      	ldr	r0, [pc, #224]	; (8002fec <HAL_ADC_Init+0x260>)
 8002f0c:	f7ff fbeb 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_ADC_Init+0x1a0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_Init+0x1a0>
 8002f22:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f26:	4831      	ldr	r0, [pc, #196]	; (8002fec <HAL_ADC_Init+0x260>)
 8002f28:	f7ff fbdd 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_ADC_Init+0x1b0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d904      	bls.n	8002f46 <HAL_ADC_Init+0x1ba>
 8002f3c:	f240 1149 	movw	r1, #329	; 0x149
 8002f40:	482a      	ldr	r0, [pc, #168]	; (8002fec <HAL_ADC_Init+0x260>)
 8002f42:	f7ff fbd0 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_ADC_Init+0x1d8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d004      	beq.n	8002f64 <HAL_ADC_Init+0x1d8>
 8002f5a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002f5e:	4823      	ldr	r0, [pc, #140]	; (8002fec <HAL_ADC_Init+0x260>)
 8002f60:	f7ff fbc1 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d00c      	beq.n	8002f86 <HAL_ADC_Init+0x1fa>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_ADC_Init+0x1fa>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_Init+0x1fa>
 8002f7c:	f240 114b 	movw	r1, #331	; 0x14b
 8002f80:	481a      	ldr	r0, [pc, #104]	; (8002fec <HAL_ADC_Init+0x260>)
 8002f82:	f7ff fbb0 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <HAL_ADC_Init+0x218>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_Init+0x218>
 8002f9a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002f9e:	4813      	ldr	r0, [pc, #76]	; (8002fec <HAL_ADC_Init+0x260>)
 8002fa0:	f7ff fba1 	bl	80026e6 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_ADC_Init+0x264>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d022      	beq.n	8002ff4 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01e      	beq.n	8002ff4 <HAL_ADC_Init+0x268>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fbe:	d019      	beq.n	8002ff4 <HAL_ADC_Init+0x268>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d014      	beq.n	8002ff4 <HAL_ADC_Init+0x268>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fd2:	d00f      	beq.n	8002ff4 <HAL_ADC_Init+0x268>
 8002fd4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <HAL_ADC_Init+0x260>)
 8002fda:	f7ff fb84 	bl	80026e6 <assert_failed>
 8002fde:	e009      	b.n	8002ff4 <HAL_ADC_Init+0x268>
 8002fe0:	40012000 	.word	0x40012000
 8002fe4:	40012100 	.word	0x40012100
 8002fe8:	40012200 	.word	0x40012200
 8002fec:	0800bb44 	.word	0x0800bb44
 8002ff0:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fe febd 	bl	8001d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003024:	f023 0302 	bic.w	r3, r3, #2
 8003028:	f043 0202 	orr.w	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f98d 	bl	8003350 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f023 0303 	bic.w	r3, r3, #3
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
 800304c:	e001      	b.n	8003052 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b12      	cmp	r3, #18
 8003078:	d909      	bls.n	800308e <HAL_ADC_ConfigChannel+0x2a>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a72      	ldr	r2, [pc, #456]	; (8003248 <HAL_ADC_ConfigChannel+0x1e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_ADC_ConfigChannel+0x2a>
 8003084:	f240 618b 	movw	r1, #1675	; 0x68b
 8003088:	4870      	ldr	r0, [pc, #448]	; (800324c <HAL_ADC_ConfigChannel+0x1e8>)
 800308a:	f7ff fb2c 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_ADC_ConfigChannel+0x3a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b10      	cmp	r3, #16
 800309c:	d904      	bls.n	80030a8 <HAL_ADC_ConfigChannel+0x44>
 800309e:	f240 618c 	movw	r1, #1676	; 0x68c
 80030a2:	486a      	ldr	r0, [pc, #424]	; (800324c <HAL_ADC_ConfigChannel+0x1e8>)
 80030a4:	f7ff fb1f 	bl	80026e6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d01c      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d018      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d014      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d010      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d00c      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d008      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x8e>
 80030e8:	f240 618d 	movw	r1, #1677	; 0x68d
 80030ec:	4857      	ldr	r0, [pc, #348]	; (800324c <HAL_ADC_ConfigChannel+0x1e8>)
 80030ee:	f7ff fafa 	bl	80026e6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x9c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e118      	b.n	8003332 <HAL_ADC_ConfigChannel+0x2ce>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d925      	bls.n	800315c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	3b1e      	subs	r3, #30
 8003126:	2207      	movs	r2, #7
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43da      	mvns	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	400a      	ands	r2, r1
 8003134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68d9      	ldr	r1, [r3, #12]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	4603      	mov	r3, r0
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4403      	add	r3, r0
 800314e:	3b1e      	subs	r3, #30
 8003150:	409a      	lsls	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e022      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	2207      	movs	r2, #7
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	400a      	ands	r2, r1
 800317e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	4603      	mov	r3, r0
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4403      	add	r3, r0
 8003198:	409a      	lsls	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d824      	bhi.n	80031f4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b05      	subs	r3, #5
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b05      	subs	r3, #5
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
 80031f2:	e051      	b.n	8003298 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d829      	bhi.n	8003250 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b23      	subs	r3, #35	; 0x23
 800320e:	221f      	movs	r2, #31
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	3b23      	subs	r3, #35	; 0x23
 8003238:	fa00 f203 	lsl.w	r2, r0, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	e028      	b.n	8003298 <HAL_ADC_ConfigChannel+0x234>
 8003246:	bf00      	nop
 8003248:	10000012 	.word	0x10000012
 800324c:	0800bb44 	.word	0x0800bb44
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b41      	subs	r3, #65	; 0x41
 8003262:	221f      	movs	r2, #31
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b41      	subs	r3, #65	; 0x41
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_ADC_ConfigChannel+0x2d8>)
 800329a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a27      	ldr	r2, [pc, #156]	; (8003340 <HAL_ADC_ConfigChannel+0x2dc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10f      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x262>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b12      	cmp	r3, #18
 80032ac:	d10b      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_ADC_ConfigChannel+0x2dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d12b      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2c4>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_ADC_ConfigChannel+0x2e0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x27e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d122      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <HAL_ADC_ConfigChannel+0x2e0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_ADC_ConfigChannel+0x2e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a10      	ldr	r2, [pc, #64]	; (800334c <HAL_ADC_ConfigChannel+0x2e8>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9a      	lsrs	r2, r3, #18
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800331a:	e002      	b.n	8003322 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f9      	bne.n	800331c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40012300 	.word	0x40012300
 8003340:	40012000 	.word	0x40012000
 8003344:	10000012 	.word	0x10000012
 8003348:	20000040 	.word	0x20000040
 800334c:	431bde83 	.word	0x431bde83

08003350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003358:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <ADC_Init+0x208>)
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	4a5e      	ldr	r2, [pc, #376]	; (800355c <ADC_Init+0x20c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e00f      	b.n	800344e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800343c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800344c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0202 	bic.w	r2, r2, #2
 800345c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7e1b      	ldrb	r3, [r3, #24]
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d028      	beq.n	80034ce <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <ADC_Init+0x13c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b08      	cmp	r3, #8
 800348a:	d904      	bls.n	8003496 <ADC_Init+0x146>
 800348c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003490:	4833      	ldr	r0, [pc, #204]	; (8003560 <ADC_Init+0x210>)
 8003492:	f7ff f928 	bl	80026e6 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034b4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	3b01      	subs	r3, #1
 80034c2:	035a      	lsls	r2, r3, #13
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e007      	b.n	80034de <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	051a      	lsls	r2, r3, #20
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003520:	025a      	lsls	r2, r3, #9
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	029a      	lsls	r2, r3, #10
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40012300 	.word	0x40012300
 800355c:	0f000001 	.word	0x0f000001
 8003560:	0800bb44 	.word	0x0800bb44

08003564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e243      	b.n	80039fe <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a93      	ldr	r2, [pc, #588]	; (80037c8 <HAL_CAN_Init+0x264>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_CAN_Init+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a91      	ldr	r2, [pc, #580]	; (80037cc <HAL_CAN_Init+0x268>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_CAN_Init+0x30>
 800358a:	f240 111d 	movw	r1, #285	; 0x11d
 800358e:	4890      	ldr	r0, [pc, #576]	; (80037d0 <HAL_CAN_Init+0x26c>)
 8003590:	f7ff f8a9 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7e1b      	ldrb	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_CAN_Init+0x4a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7e1b      	ldrb	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d004      	beq.n	80035ae <HAL_CAN_Init+0x4a>
 80035a4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80035a8:	4889      	ldr	r0, [pc, #548]	; (80037d0 <HAL_CAN_Init+0x26c>)
 80035aa:	f7ff f89c 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7e5b      	ldrb	r3, [r3, #25]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_CAN_Init+0x64>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7e5b      	ldrb	r3, [r3, #25]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d004      	beq.n	80035c8 <HAL_CAN_Init+0x64>
 80035be:	f240 111f 	movw	r1, #287	; 0x11f
 80035c2:	4883      	ldr	r0, [pc, #524]	; (80037d0 <HAL_CAN_Init+0x26c>)
 80035c4:	f7ff f88f 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e9b      	ldrb	r3, [r3, #26]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_CAN_Init+0x7e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7e9b      	ldrb	r3, [r3, #26]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d004      	beq.n	80035e2 <HAL_CAN_Init+0x7e>
 80035d8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80035dc:	487c      	ldr	r0, [pc, #496]	; (80037d0 <HAL_CAN_Init+0x26c>)
 80035de:	f7ff f882 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7edb      	ldrb	r3, [r3, #27]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_CAN_Init+0x98>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7edb      	ldrb	r3, [r3, #27]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d004      	beq.n	80035fc <HAL_CAN_Init+0x98>
 80035f2:	f240 1121 	movw	r1, #289	; 0x121
 80035f6:	4876      	ldr	r0, [pc, #472]	; (80037d0 <HAL_CAN_Init+0x26c>)
 80035f8:	f7ff f875 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7f1b      	ldrb	r3, [r3, #28]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_CAN_Init+0xb2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7f1b      	ldrb	r3, [r3, #28]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d004      	beq.n	8003616 <HAL_CAN_Init+0xb2>
 800360c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003610:	486f      	ldr	r0, [pc, #444]	; (80037d0 <HAL_CAN_Init+0x26c>)
 8003612:	f7ff f868 	bl	80026e6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7f5b      	ldrb	r3, [r3, #29]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_CAN_Init+0xcc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7f5b      	ldrb	r3, [r3, #29]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d004      	beq.n	8003630 <HAL_CAN_Init+0xcc>
 8003626:	f240 1123 	movw	r1, #291	; 0x123
 800362a:	4869      	ldr	r0, [pc, #420]	; (80037d0 <HAL_CAN_Init+0x26c>)
 800362c:	f7ff f85b 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_CAN_Init+0xfc>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d00e      	beq.n	8003660 <HAL_CAN_Init+0xfc>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364a:	d009      	beq.n	8003660 <HAL_CAN_Init+0xfc>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003654:	d004      	beq.n	8003660 <HAL_CAN_Init+0xfc>
 8003656:	f44f 7192 	mov.w	r1, #292	; 0x124
 800365a:	485d      	ldr	r0, [pc, #372]	; (80037d0 <HAL_CAN_Init+0x26c>)
 800365c:	f7ff f843 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_CAN_Init+0x12c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d00e      	beq.n	8003690 <HAL_CAN_Init+0x12c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367a:	d009      	beq.n	8003690 <HAL_CAN_Init+0x12c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003684:	d004      	beq.n	8003690 <HAL_CAN_Init+0x12c>
 8003686:	f240 1125 	movw	r1, #293	; 0x125
 800368a:	4851      	ldr	r0, [pc, #324]	; (80037d0 <HAL_CAN_Init+0x26c>)
 800368c:	f7ff f82b 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d04f      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d04a      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036aa:	d045      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036b4:	d040      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036be:	d03b      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d036      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80036d2:	d031      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80036dc:	d02c      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036e6:	d027      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80036f0:	d022      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80036fa:	d01d      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003704:	d018      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800370e:	d013      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003718:	d00e      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003722:	d009      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800372c:	d004      	beq.n	8003738 <HAL_CAN_Init+0x1d4>
 800372e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003732:	4827      	ldr	r0, [pc, #156]	; (80037d0 <HAL_CAN_Init+0x26c>)
 8003734:	f7fe ffd7 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d027      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003748:	d022      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003752:	d01d      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800375c:	d018      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d013      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003770:	d00e      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800377a:	d009      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003784:	d004      	beq.n	8003790 <HAL_CAN_Init+0x22c>
 8003786:	f240 1127 	movw	r1, #295	; 0x127
 800378a:	4811      	ldr	r0, [pc, #68]	; (80037d0 <HAL_CAN_Init+0x26c>)
 800378c:	f7fe ffab 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_CAN_Init+0x23e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d904      	bls.n	80037ac <HAL_CAN_Init+0x248>
 80037a2:	f44f 7194 	mov.w	r1, #296	; 0x128
 80037a6:	480a      	ldr	r0, [pc, #40]	; (80037d0 <HAL_CAN_Init+0x26c>)
 80037a8:	f7fe ff9d 	bl	80026e6 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d13d      	bne.n	8003834 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_CAN_Init+0x270>)
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a05      	ldr	r2, [pc, #20]	; (80037d8 <HAL_CAN_Init+0x274>)
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
 80037c4:	e00a      	b.n	80037dc <HAL_CAN_Init+0x278>
 80037c6:	bf00      	nop
 80037c8:	40006400 	.word	0x40006400
 80037cc:	40006800 	.word	0x40006800
 80037d0:	0800bb7c 	.word	0x0800bb7c
 80037d4:	08001651 	.word	0x08001651
 80037d8:	080045e3 	.word	0x080045e3
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a8a      	ldr	r2, [pc, #552]	; (8003a08 <HAL_CAN_Init+0x4a4>)
 80037e0:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a89      	ldr	r2, [pc, #548]	; (8003a0c <HAL_CAN_Init+0x4a8>)
 80037e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a89      	ldr	r2, [pc, #548]	; (8003a10 <HAL_CAN_Init+0x4ac>)
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a88      	ldr	r2, [pc, #544]	; (8003a14 <HAL_CAN_Init+0x4b0>)
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a88      	ldr	r2, [pc, #544]	; (8003a18 <HAL_CAN_Init+0x4b4>)
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <HAL_CAN_Init+0x4b8>)
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a87      	ldr	r2, [pc, #540]	; (8003a20 <HAL_CAN_Init+0x4bc>)
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a86      	ldr	r2, [pc, #536]	; (8003a24 <HAL_CAN_Init+0x4c0>)
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a86      	ldr	r2, [pc, #536]	; (8003a28 <HAL_CAN_Init+0x4c4>)
 8003810:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a85      	ldr	r2, [pc, #532]	; (8003a2c <HAL_CAN_Init+0x4c8>)
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a85      	ldr	r2, [pc, #532]	; (8003a30 <HAL_CAN_Init+0x4cc>)
 800381c:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a82      	ldr	r2, [pc, #520]	; (8003a34 <HAL_CAN_Init+0x4d0>)
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003844:	f7ff fa72 	bl	8002d2c <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800384a:	e012      	b.n	8003872 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800384c:	f7ff fa6e 	bl	8002d2c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b0a      	cmp	r3, #10
 8003858:	d90b      	bls.n	8003872 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2205      	movs	r2, #5
 800386a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0c5      	b.n	80039fe <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0e5      	beq.n	800384c <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0202 	bic.w	r2, r2, #2
 800388e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003890:	f7ff fa4c 	bl	8002d2c <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003896:	e012      	b.n	80038be <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003898:	f7ff fa48 	bl	8002d2c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b0a      	cmp	r3, #10
 80038a4:	d90b      	bls.n	80038be <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2205      	movs	r2, #5
 80038b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e09f      	b.n	80039fe <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7e1b      	ldrb	r3, [r3, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e007      	b.n	80038f6 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7e5b      	ldrb	r3, [r3, #25]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d108      	bne.n	8003910 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7e9b      	ldrb	r3, [r3, #26]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d108      	bne.n	800393a <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e007      	b.n	800394a <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0220 	bic.w	r2, r2, #32
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7edb      	ldrb	r3, [r3, #27]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d108      	bne.n	8003964 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0210 	bic.w	r2, r2, #16
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e007      	b.n	8003974 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0210 	orr.w	r2, r2, #16
 8003972:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7f1b      	ldrb	r3, [r3, #28]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0208 	orr.w	r2, r2, #8
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e007      	b.n	800399e <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0208 	bic.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7f5b      	ldrb	r3, [r3, #29]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d108      	bne.n	80039b8 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0204 	orr.w	r2, r2, #4
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e007      	b.n	80039c8 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	ea42 0103 	orr.w	r1, r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	080045f7 	.word	0x080045f7
 8003a0c:	0800460b 	.word	0x0800460b
 8003a10:	0800456b 	.word	0x0800456b
 8003a14:	0800457f 	.word	0x0800457f
 8003a18:	08004593 	.word	0x08004593
 8003a1c:	080045a7 	.word	0x080045a7
 8003a20:	080045bb 	.word	0x080045bb
 8003a24:	080045cf 	.word	0x080045cf
 8003a28:	0800461f 	.word	0x0800461f
 8003a2c:	08004633 	.word	0x08004633
 8003a30:	08004647 	.word	0x08004647
 8003a34:	08001e7d 	.word	0x08001e7d

08003a38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d003      	beq.n	8003a5e <HAL_CAN_ConfigFilter+0x26>
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f040 812c 	bne.w	8003cb6 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d304      	bcc.n	8003a72 <HAL_CAN_ConfigFilter+0x3a>
 8003a68:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003a6c:	4897      	ldr	r0, [pc, #604]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003a6e:	f7fe fe3a 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d304      	bcc.n	8003a86 <HAL_CAN_ConfigFilter+0x4e>
 8003a7c:	f240 3151 	movw	r1, #849	; 0x351
 8003a80:	4892      	ldr	r0, [pc, #584]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003a82:	f7fe fe30 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d304      	bcc.n	8003a9a <HAL_CAN_ConfigFilter+0x62>
 8003a90:	f240 3152 	movw	r1, #850	; 0x352
 8003a94:	488d      	ldr	r0, [pc, #564]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003a96:	f7fe fe26 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d304      	bcc.n	8003aae <HAL_CAN_ConfigFilter+0x76>
 8003aa4:	f240 3153 	movw	r1, #851	; 0x353
 8003aa8:	4888      	ldr	r0, [pc, #544]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003aaa:	f7fe fe1c 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_CAN_ConfigFilter+0x90>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d004      	beq.n	8003ac8 <HAL_CAN_ConfigFilter+0x90>
 8003abe:	f44f 7155 	mov.w	r1, #852	; 0x354
 8003ac2:	4882      	ldr	r0, [pc, #520]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003ac4:	f7fe fe0f 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_CAN_ConfigFilter+0xaa>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d004      	beq.n	8003ae2 <HAL_CAN_ConfigFilter+0xaa>
 8003ad8:	f240 3155 	movw	r1, #853	; 0x355
 8003adc:	487b      	ldr	r0, [pc, #492]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003ade:	f7fe fe02 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_CAN_ConfigFilter+0xc4>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d004      	beq.n	8003afc <HAL_CAN_ConfigFilter+0xc4>
 8003af2:	f240 3156 	movw	r1, #854	; 0x356
 8003af6:	4875      	ldr	r0, [pc, #468]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003af8:	f7fe fdf5 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_CAN_ConfigFilter+0xde>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d004      	beq.n	8003b16 <HAL_CAN_ConfigFilter+0xde>
 8003b0c:	f240 3157 	movw	r1, #855	; 0x357
 8003b10:	486e      	ldr	r0, [pc, #440]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003b12:	f7fe fde8 	bl	80026e6 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003b16:	4b6e      	ldr	r3, [pc, #440]	; (8003cd0 <HAL_CAN_ConfigFilter+0x298>)
 8003b18:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b1b      	cmp	r3, #27
 8003b20:	d904      	bls.n	8003b2c <HAL_CAN_ConfigFilter+0xf4>
 8003b22:	f240 3172 	movw	r1, #882	; 0x372
 8003b26:	4869      	ldr	r0, [pc, #420]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003b28:	f7fe fddd 	bl	80026e6 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b1b      	cmp	r3, #27
 8003b32:	d904      	bls.n	8003b3e <HAL_CAN_ConfigFilter+0x106>
 8003b34:	f240 3173 	movw	r1, #883	; 0x373
 8003b38:	4864      	ldr	r0, [pc, #400]	; (8003ccc <HAL_CAN_ConfigFilter+0x294>)
 8003b3a:	f7fe fdd4 	bl	80026e6 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d123      	bne.n	8003be4 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3248      	adds	r2, #72	; 0x48
 8003bc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	440b      	add	r3, r1
 8003be2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d122      	bne.n	8003c32 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3248      	adds	r2, #72	; 0x48
 8003c12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	3348      	adds	r3, #72	; 0x48
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	401a      	ands	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c4c:	e007      	b.n	8003c5e <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	401a      	ands	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c78:	e007      	b.n	8003c8a <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ca8:	f023 0201 	bic.w	r2, r3, #1
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e006      	b.n	8003cc4 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0800bb7c 	.word	0x0800bb7c
 8003cd0:	40006400 	.word	0x40006400

08003cd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d12e      	bne.n	8003d46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d00:	f7ff f814 	bl	8002d2c <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d06:	e012      	b.n	8003d2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d08:	f7ff f810 	bl	8002d2c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d90b      	bls.n	8003d2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2205      	movs	r2, #5
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e012      	b.n	8003d54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e006      	b.n	8003d54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_CAN_AddTxMessage+0x38>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d004      	beq.n	8003d94 <HAL_CAN_AddTxMessage+0x38>
 8003d8a:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003d8e:	4884      	ldr	r0, [pc, #528]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003d90:	f7fe fca9 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_CAN_AddTxMessage+0x52>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d004      	beq.n	8003dae <HAL_CAN_AddTxMessage+0x52>
 8003da4:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003da8:	487d      	ldr	r0, [pc, #500]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003daa:	f7fe fc9c 	bl	80026e6 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d904      	bls.n	8003dc0 <HAL_CAN_AddTxMessage+0x64>
 8003db6:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003dba:	4879      	ldr	r0, [pc, #484]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003dbc:	f7fe fc93 	bl	80026e6 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d30f      	bcc.n	8003df2 <HAL_CAN_AddTxMessage+0x96>
 8003dd2:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003dd6:	4872      	ldr	r0, [pc, #456]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003dd8:	f7fe fc85 	bl	80026e6 <assert_failed>
 8003ddc:	e009      	b.n	8003df2 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de6:	d304      	bcc.n	8003df2 <HAL_CAN_AddTxMessage+0x96>
 8003de8:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003dec:	486c      	ldr	r0, [pc, #432]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003dee:	f7fe fc7a 	bl	80026e6 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	7d1b      	ldrb	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_CAN_AddTxMessage+0xb0>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	7d1b      	ldrb	r3, [r3, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d004      	beq.n	8003e0c <HAL_CAN_AddTxMessage+0xb0>
 8003e02:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003e06:	4866      	ldr	r0, [pc, #408]	; (8003fa0 <HAL_CAN_AddTxMessage+0x244>)
 8003e08:	f7fe fc6d 	bl	80026e6 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d003      	beq.n	8003e1a <HAL_CAN_AddTxMessage+0xbe>
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f040 80b8 	bne.w	8003f8a <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a0 	beq.w	8003f7a <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	0e1b      	lsrs	r3, r3, #24
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d907      	bls.n	8003e5a <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e09e      	b.n	8003f98 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10d      	bne.n	8003e88 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	6809      	ldr	r1, [r1, #0]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	440b      	add	r3, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00f      	b.n	8003ea8 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e92:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e9c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	440b      	add	r3, r1
 8003ea6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3304      	adds	r3, #4
 8003eba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	7d1b      	ldrb	r3, [r3, #20]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d111      	bne.n	8003ee8 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3318      	adds	r3, #24
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4413      	add	r3, r2
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6811      	ldr	r1, [r2, #0]
 8003ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3318      	adds	r3, #24
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	440b      	add	r3, r1
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3307      	adds	r3, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	061a      	lsls	r2, r3, #24
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3306      	adds	r3, #6
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3305      	adds	r3, #5
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4313      	orrs	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	3204      	adds	r2, #4
 8003f08:	7812      	ldrb	r2, [r2, #0]
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	6811      	ldr	r1, [r2, #0]
 8003f10:	ea43 0200 	orr.w	r2, r3, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003f1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3303      	adds	r3, #3
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	061a      	lsls	r2, r3, #24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3301      	adds	r3, #1
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	4610      	mov	r0, r2
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	ea43 0200 	orr.w	r2, r3, r0
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	440b      	add	r3, r1
 8003f50:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	6811      	ldr	r1, [r2, #0]
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3318      	adds	r3, #24
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	440b      	add	r3, r1
 8003f74:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e00e      	b.n	8003f98 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e006      	b.n	8003f98 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	0800bb7c 	.word	0x0800bb7c

08003fa4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <HAL_CAN_GetRxMessage+0x2c>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d004      	beq.n	8003fd0 <HAL_CAN_GetRxMessage+0x2c>
 8003fc6:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003fca:	4884      	ldr	r0, [pc, #528]	; (80041dc <HAL_CAN_GetRxMessage+0x238>)
 8003fcc:	f7fe fb8b 	bl	80026e6 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d003      	beq.n	8003fde <HAL_CAN_GetRxMessage+0x3a>
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	f040 80f3 	bne.w	80041c4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0e7      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0d8      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	331b      	adds	r3, #27
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0204 	and.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	331b      	adds	r3, #27
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0d5b      	lsrs	r3, r3, #21
 800404e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00b      	b.n	8004070 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	331b      	adds	r3, #27
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	4413      	add	r3, r2
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	331b      	adds	r3, #27
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4413      	add	r3, r2
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0202 	and.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	331b      	adds	r3, #27
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	331b      	adds	r3, #27
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	331b      	adds	r3, #27
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0a1a      	lsrs	r2, r3, #8
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0c1a      	lsrs	r2, r3, #16
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	3302      	adds	r3, #2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	0e1a      	lsrs	r2, r3, #24
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	3303      	adds	r3, #3
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	4413      	add	r3, r2
 800413c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4413      	add	r3, r2
 8004154:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0a1a      	lsrs	r2, r3, #8
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3305      	adds	r3, #5
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4413      	add	r3, r2
 800416e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0c1a      	lsrs	r2, r3, #16
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3306      	adds	r3, #6
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e1a      	lsrs	r2, r3, #24
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3307      	adds	r3, #7
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d108      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e007      	b.n	80041c0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e006      	b.n	80041d2 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	0800bb7c 	.word	0x0800bb7c

080041e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8083 	beq.w	800432e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d025      	beq.n	800427e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
 800424c:	e017      	b.n	800427e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	e00d      	b.n	800427e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	e003      	b.n	800427e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d026      	beq.n	80042d6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004290:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
 80042a4:	e017      	b.n	80042d6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	e00d      	b.n	80042d6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
 80042cc:	e003      	b.n	80042d6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d026      	beq.n	800432e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e017      	b.n	800432e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	e00d      	b.n	800432e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	e003      	b.n	800432e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004348:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2208      	movs	r2, #8
 800436c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00c      	beq.n	80043ba <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00c      	beq.n	80043de <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2210      	movs	r2, #16
 8004418:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2208      	movs	r2, #8
 800443c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07b      	beq.n	8004548 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d072      	beq.n	8004540 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d043      	beq.n	8004540 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03e      	beq.n	8004540 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d02b      	beq.n	8004524 <HAL_CAN_IRQHandler+0x344>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d82e      	bhi.n	800452e <HAL_CAN_IRQHandler+0x34e>
 80044d0:	2b50      	cmp	r3, #80	; 0x50
 80044d2:	d022      	beq.n	800451a <HAL_CAN_IRQHandler+0x33a>
 80044d4:	2b50      	cmp	r3, #80	; 0x50
 80044d6:	d82a      	bhi.n	800452e <HAL_CAN_IRQHandler+0x34e>
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d019      	beq.n	8004510 <HAL_CAN_IRQHandler+0x330>
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d826      	bhi.n	800452e <HAL_CAN_IRQHandler+0x34e>
 80044e0:	2b30      	cmp	r3, #48	; 0x30
 80044e2:	d010      	beq.n	8004506 <HAL_CAN_IRQHandler+0x326>
 80044e4:	2b30      	cmp	r3, #48	; 0x30
 80044e6:	d822      	bhi.n	800452e <HAL_CAN_IRQHandler+0x34e>
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d002      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x312>
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d005      	beq.n	80044fc <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80044f0:	e01d      	b.n	800452e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f043 0308 	orr.w	r3, r3, #8
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044fa:	e019      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f043 0310 	orr.w	r3, r3, #16
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004504:	e014      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f043 0320 	orr.w	r3, r3, #32
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800450e:	e00f      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004518:	e00a      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004522:	e005      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800452c:	e000      	b.n	8004530 <HAL_CAN_IRQHandler+0x350>
            break;
 800452e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800453e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2204      	movs	r2, #4
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004562:	bf00      	nop
 8004564:	3728      	adds	r7, #40	; 0x28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <__NVIC_SetPriorityGrouping+0x44>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004678:	4013      	ands	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800468e:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	60d3      	str	r3, [r2, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <__NVIC_GetPriorityGrouping+0x18>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 0307 	and.w	r3, r3, #7
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	db0b      	blt.n	80046ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <__NVIC_EnableIRQ+0x38>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2001      	movs	r0, #1
 80046e2:	fa00 f202 	lsl.w	r2, r0, r2
 80046e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000e100 	.word	0xe000e100

080046fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	db0a      	blt.n	8004726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <__NVIC_SetPriority+0x4c>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	440b      	add	r3, r1
 8004720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004724:	e00a      	b.n	800473c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <__NVIC_SetPriority+0x50>)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	3b04      	subs	r3, #4
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	440b      	add	r3, r1
 800473a:	761a      	strb	r2, [r3, #24]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000e100 	.word	0xe000e100
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f1c3 0307 	rsb	r3, r3, #7
 800476a:	2b04      	cmp	r3, #4
 800476c:	bf28      	it	cs
 800476e:	2304      	movcs	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3304      	adds	r3, #4
 8004776:	2b06      	cmp	r3, #6
 8004778:	d902      	bls.n	8004780 <NVIC_EncodePriority+0x30>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3b03      	subs	r3, #3
 800477e:	e000      	b.n	8004782 <NVIC_EncodePriority+0x32>
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	401a      	ands	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004798:	f04f 31ff 	mov.w	r1, #4294967295
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43d9      	mvns	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	4313      	orrs	r3, r2
         );
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d00f      	beq.n	80047e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b06      	cmp	r3, #6
 80047ca:	d00c      	beq.n	80047e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d009      	beq.n	80047e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d006      	beq.n	80047e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d003      	beq.n	80047e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047de:	2190      	movs	r1, #144	; 0x90
 80047e0:	4804      	ldr	r0, [pc, #16]	; (80047f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80047e2:	f7fd ff80 	bl	80026e6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ff38 	bl	800465c <__NVIC_SetPriorityGrouping>
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	0800bbb4 	.word	0x0800bbb4

080047f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d903      	bls.n	8004818 <HAL_NVIC_SetPriority+0x20>
 8004810:	21a8      	movs	r1, #168	; 0xa8
 8004812:	480e      	ldr	r0, [pc, #56]	; (800484c <HAL_NVIC_SetPriority+0x54>)
 8004814:	f7fd ff67 	bl	80026e6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d903      	bls.n	8004826 <HAL_NVIC_SetPriority+0x2e>
 800481e:	21a9      	movs	r1, #169	; 0xa9
 8004820:	480a      	ldr	r0, [pc, #40]	; (800484c <HAL_NVIC_SetPriority+0x54>)
 8004822:	f7fd ff60 	bl	80026e6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004826:	f7ff ff3d 	bl	80046a4 <__NVIC_GetPriorityGrouping>
 800482a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	6978      	ldr	r0, [r7, #20]
 8004832:	f7ff ff8d 	bl	8004750 <NVIC_EncodePriority>
 8004836:	4602      	mov	r2, r0
 8004838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ff5c 	bl	80046fc <__NVIC_SetPriority>
}
 8004844:	bf00      	nop
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0800bbb4 	.word	0x0800bbb4

08004850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da03      	bge.n	800486a <HAL_NVIC_EnableIRQ+0x1a>
 8004862:	21bc      	movs	r1, #188	; 0xbc
 8004864:	4805      	ldr	r0, [pc, #20]	; (800487c <HAL_NVIC_EnableIRQ+0x2c>)
 8004866:	f7fd ff3e 	bl	80026e6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff26 	bl	80046c0 <__NVIC_EnableIRQ>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	0800bbb4 	.word	0x0800bbb4

08004880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800488c:	f7fe fa4e 	bl	8002d2c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e203      	b.n	8004ca4 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a8b      	ldr	r2, [pc, #556]	; (8004ad0 <HAL_DMA_Init+0x250>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d04e      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a8a      	ldr	r2, [pc, #552]	; (8004ad4 <HAL_DMA_Init+0x254>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d049      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a88      	ldr	r2, [pc, #544]	; (8004ad8 <HAL_DMA_Init+0x258>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d044      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_DMA_Init+0x25c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d03f      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a85      	ldr	r2, [pc, #532]	; (8004ae0 <HAL_DMA_Init+0x260>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d03a      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a84      	ldr	r2, [pc, #528]	; (8004ae4 <HAL_DMA_Init+0x264>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d035      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a82      	ldr	r2, [pc, #520]	; (8004ae8 <HAL_DMA_Init+0x268>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d030      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a81      	ldr	r2, [pc, #516]	; (8004aec <HAL_DMA_Init+0x26c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d02b      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7f      	ldr	r2, [pc, #508]	; (8004af0 <HAL_DMA_Init+0x270>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d026      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7e      	ldr	r2, [pc, #504]	; (8004af4 <HAL_DMA_Init+0x274>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d021      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7c      	ldr	r2, [pc, #496]	; (8004af8 <HAL_DMA_Init+0x278>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01c      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7b      	ldr	r2, [pc, #492]	; (8004afc <HAL_DMA_Init+0x27c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d017      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a79      	ldr	r2, [pc, #484]	; (8004b00 <HAL_DMA_Init+0x280>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d012      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a78      	ldr	r2, [pc, #480]	; (8004b04 <HAL_DMA_Init+0x284>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00d      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a76      	ldr	r2, [pc, #472]	; (8004b08 <HAL_DMA_Init+0x288>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d008      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_DMA_Init+0x28c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <HAL_DMA_Init+0xc4>
 800493c:	21b7      	movs	r1, #183	; 0xb7
 800493e:	4874      	ldr	r0, [pc, #464]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004940:	f7fd fed1 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d026      	beq.n	800499a <HAL_DMA_Init+0x11a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004954:	d021      	beq.n	800499a <HAL_DMA_Init+0x11a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495e:	d01c      	beq.n	800499a <HAL_DMA_Init+0x11a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004968:	d017      	beq.n	800499a <HAL_DMA_Init+0x11a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d012      	beq.n	800499a <HAL_DMA_Init+0x11a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800497c:	d00d      	beq.n	800499a <HAL_DMA_Init+0x11a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004986:	d008      	beq.n	800499a <HAL_DMA_Init+0x11a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004990:	d003      	beq.n	800499a <HAL_DMA_Init+0x11a>
 8004992:	21b8      	movs	r1, #184	; 0xb8
 8004994:	485e      	ldr	r0, [pc, #376]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004996:	f7fd fea6 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_DMA_Init+0x13a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d007      	beq.n	80049ba <HAL_DMA_Init+0x13a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b80      	cmp	r3, #128	; 0x80
 80049b0:	d003      	beq.n	80049ba <HAL_DMA_Init+0x13a>
 80049b2:	21b9      	movs	r1, #185	; 0xb9
 80049b4:	4856      	ldr	r0, [pc, #344]	; (8004b10 <HAL_DMA_Init+0x290>)
 80049b6:	f7fd fe96 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c2:	d007      	beq.n	80049d4 <HAL_DMA_Init+0x154>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_DMA_Init+0x154>
 80049cc:	21ba      	movs	r1, #186	; 0xba
 80049ce:	4850      	ldr	r0, [pc, #320]	; (8004b10 <HAL_DMA_Init+0x290>)
 80049d0:	f7fd fe89 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_Init+0x16e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_DMA_Init+0x16e>
 80049e6:	21bb      	movs	r1, #187	; 0xbb
 80049e8:	4849      	ldr	r0, [pc, #292]	; (8004b10 <HAL_DMA_Init+0x290>)
 80049ea:	f7fd fe7c 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <HAL_DMA_Init+0x192>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Init+0x192>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d003      	beq.n	8004a12 <HAL_DMA_Init+0x192>
 8004a0a:	21bc      	movs	r1, #188	; 0xbc
 8004a0c:	4840      	ldr	r0, [pc, #256]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004a0e:	f7fd fe6a 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_DMA_Init+0x1b6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	d008      	beq.n	8004a36 <HAL_DMA_Init+0x1b6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2c:	d003      	beq.n	8004a36 <HAL_DMA_Init+0x1b6>
 8004a2e:	21bd      	movs	r1, #189	; 0xbd
 8004a30:	4837      	ldr	r0, [pc, #220]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004a32:	f7fd fe58 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <HAL_DMA_Init+0x1d8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d007      	beq.n	8004a58 <HAL_DMA_Init+0x1d8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d003      	beq.n	8004a58 <HAL_DMA_Init+0x1d8>
 8004a50:	21be      	movs	r1, #190	; 0xbe
 8004a52:	482f      	ldr	r0, [pc, #188]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004a54:	f7fd fe47 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_DMA_Init+0x206>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d00d      	beq.n	8004a86 <HAL_DMA_Init+0x206>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a72:	d008      	beq.n	8004a86 <HAL_DMA_Init+0x206>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a7c:	d003      	beq.n	8004a86 <HAL_DMA_Init+0x206>
 8004a7e:	21bf      	movs	r1, #191	; 0xbf
 8004a80:	4823      	ldr	r0, [pc, #140]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004a82:	f7fd fe30 	bl	80026e6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_DMA_Init+0x21e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_DMA_Init+0x21e>
 8004a96:	21c0      	movs	r1, #192	; 0xc0
 8004a98:	481d      	ldr	r0, [pc, #116]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004a9a:	f7fd fe24 	bl	80026e6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d064      	beq.n	8004b70 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d032      	beq.n	8004b14 <HAL_DMA_Init+0x294>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d02e      	beq.n	8004b14 <HAL_DMA_Init+0x294>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d02a      	beq.n	8004b14 <HAL_DMA_Init+0x294>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d026      	beq.n	8004b14 <HAL_DMA_Init+0x294>
 8004ac6:	21c5      	movs	r1, #197	; 0xc5
 8004ac8:	4811      	ldr	r0, [pc, #68]	; (8004b10 <HAL_DMA_Init+0x290>)
 8004aca:	f7fd fe0c 	bl	80026e6 <assert_failed>
 8004ace:	e021      	b.n	8004b14 <HAL_DMA_Init+0x294>
 8004ad0:	40026010 	.word	0x40026010
 8004ad4:	40026028 	.word	0x40026028
 8004ad8:	40026040 	.word	0x40026040
 8004adc:	40026058 	.word	0x40026058
 8004ae0:	40026070 	.word	0x40026070
 8004ae4:	40026088 	.word	0x40026088
 8004ae8:	400260a0 	.word	0x400260a0
 8004aec:	400260b8 	.word	0x400260b8
 8004af0:	40026410 	.word	0x40026410
 8004af4:	40026428 	.word	0x40026428
 8004af8:	40026440 	.word	0x40026440
 8004afc:	40026458 	.word	0x40026458
 8004b00:	40026470 	.word	0x40026470
 8004b04:	40026488 	.word	0x40026488
 8004b08:	400264a0 	.word	0x400264a0
 8004b0c:	400264b8 	.word	0x400264b8
 8004b10:	0800bbf0 	.word	0x0800bbf0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_DMA_Init+0x2c2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b24:	d00d      	beq.n	8004b42 <HAL_DMA_Init+0x2c2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b2e:	d008      	beq.n	8004b42 <HAL_DMA_Init+0x2c2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b38:	d003      	beq.n	8004b42 <HAL_DMA_Init+0x2c2>
 8004b3a:	21c6      	movs	r1, #198	; 0xc6
 8004b3c:	485b      	ldr	r0, [pc, #364]	; (8004cac <HAL_DMA_Init+0x42c>)
 8004b3e:	f7fd fdd2 	bl	80026e6 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_DMA_Init+0x2f0>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b52:	d00d      	beq.n	8004b70 <HAL_DMA_Init+0x2f0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5c:	d008      	beq.n	8004b70 <HAL_DMA_Init+0x2f0>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b66:	d003      	beq.n	8004b70 <HAL_DMA_Init+0x2f0>
 8004b68:	21c7      	movs	r1, #199	; 0xc7
 8004b6a:	4850      	ldr	r0, [pc, #320]	; (8004cac <HAL_DMA_Init+0x42c>)
 8004b6c:	f7fd fdbb 	bl	80026e6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b90:	e00f      	b.n	8004bb2 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b92:	f7fe f8cb 	bl	8002d2c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d908      	bls.n	8004bb2 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e078      	b.n	8004ca4 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e8      	bne.n	8004b92 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <HAL_DMA_Init+0x430>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d107      	bne.n	8004c1c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4313      	orrs	r3, r2
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d117      	bne.n	8004c76 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa1b 	bl	8005094 <DMA_CheckFifoParam>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2240      	movs	r2, #64	; 0x40
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c72:	2301      	movs	r3, #1
 8004c74:	e016      	b.n	8004ca4 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9d2 	bl	8005028 <DMA_CalcBaseAndBitshift>
 8004c84:	4603      	mov	r3, r0
 8004c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	223f      	movs	r2, #63	; 0x3f
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	0800bbf0 	.word	0x0800bbf0
 8004cb0:	f010803f 	.word	0xf010803f

08004cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e00c      	b.n	8004cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d04:	4b8e      	ldr	r3, [pc, #568]	; (8004f40 <HAL_DMA_IRQHandler+0x248>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a8e      	ldr	r2, [pc, #568]	; (8004f44 <HAL_DMA_IRQHandler+0x24c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	2208      	movs	r2, #8
 8004d24:	409a      	lsls	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0204 	bic.w	r2, r2, #4
 8004d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	2208      	movs	r2, #8
 8004d52:	409a      	lsls	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2201      	movs	r2, #1
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0202 	orr.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	2204      	movs	r2, #4
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d043      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03c      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	2210      	movs	r2, #16
 8004df4:	409a      	lsls	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d108      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d024      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
 8004e26:	e01f      	b.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	e016      	b.n	8004e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0208 	bic.w	r2, r2, #8
 8004e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 808f 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8087 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8e:	2220      	movs	r2, #32
 8004e90:	409a      	lsls	r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d136      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0216 	bic.w	r2, r2, #22
 8004eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0x1da>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0208 	bic.w	r2, r2, #8
 8004ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	223f      	movs	r2, #63	; 0x3f
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d07e      	beq.n	8005004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
        }
        return;
 8004f0e:	e079      	b.n	8005004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01d      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d031      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
 8004f3c:	e02c      	b.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
 8004f3e:	bf00      	nop
 8004f40:	20000040 	.word	0x20000040
 8004f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e01e      	b.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d032      	beq.n	8005006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2205      	movs	r2, #5
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d307      	bcc.n	8004fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f2      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x2cc>
 8004fde:	e000      	b.n	8004fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	e000      	b.n	8005006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005004:	bf00      	nop
    }
  }
}
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800501a:	b2db      	uxtb	r3, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b10      	subs	r3, #16
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <DMA_CalcBaseAndBitshift+0x64>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005042:	4a13      	ldr	r2, [pc, #76]	; (8005090 <DMA_CalcBaseAndBitshift+0x68>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d909      	bls.n	800506a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	659a      	str	r2, [r3, #88]	; 0x58
 8005068:	e007      	b.n	800507a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	aaaaaaab 	.word	0xaaaaaaab
 8005090:	0800bda0 	.word	0x0800bda0

08005094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11f      	bne.n	80050ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d856      	bhi.n	8005162 <DMA_CheckFifoParam+0xce>
 80050b4:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <DMA_CheckFifoParam+0x28>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050df 	.word	0x080050df
 80050c4:	080050cd 	.word	0x080050cd
 80050c8:	08005163 	.word	0x08005163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d046      	beq.n	8005166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050dc:	e043      	b.n	8005166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050e6:	d140      	bne.n	800516a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ec:	e03d      	b.n	800516a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	d121      	bne.n	800513c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d837      	bhi.n	800516e <DMA_CheckFifoParam+0xda>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <DMA_CheckFifoParam+0x70>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005115 	.word	0x08005115
 8005108:	0800511b 	.word	0x0800511b
 800510c:	08005115 	.word	0x08005115
 8005110:	0800512d 	.word	0x0800512d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e030      	b.n	800517c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d025      	beq.n	8005172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512a:	e022      	b.n	8005172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005134:	d11f      	bne.n	8005176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800513a:	e01c      	b.n	8005176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d903      	bls.n	800514a <DMA_CheckFifoParam+0xb6>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d003      	beq.n	8005150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005148:	e018      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      break;
 800514e:	e015      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00e      	beq.n	800517a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e00b      	b.n	800517a <DMA_CheckFifoParam+0xe6>
      break;
 8005162:	bf00      	nop
 8005164:	e00a      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 8005166:	bf00      	nop
 8005168:	e008      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800516a:	bf00      	nop
 800516c:	e006      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800516e:	bf00      	nop
 8005170:	e004      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 8005172:	bf00      	nop
 8005174:	e002      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;   
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <DMA_CheckFifoParam+0xe8>
      break;
 800517a:	bf00      	nop
    }
  } 
  
  return status; 
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop

0800518c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a37      	ldr	r2, [pc, #220]	; (8005284 <HAL_GPIO_Init+0xf8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a36      	ldr	r2, [pc, #216]	; (8005288 <HAL_GPIO_Init+0xfc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <HAL_GPIO_Init+0x100>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d017      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a34      	ldr	r2, [pc, #208]	; (8005290 <HAL_GPIO_Init+0x104>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a33      	ldr	r2, [pc, #204]	; (8005294 <HAL_GPIO_Init+0x108>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a32      	ldr	r2, [pc, #200]	; (8005298 <HAL_GPIO_Init+0x10c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a31      	ldr	r2, [pc, #196]	; (800529c <HAL_GPIO_Init+0x110>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <HAL_GPIO_Init+0x114>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x5e>
 80051e2:	21ac      	movs	r1, #172	; 0xac
 80051e4:	482f      	ldr	r0, [pc, #188]	; (80052a4 <HAL_GPIO_Init+0x118>)
 80051e6:	f7fd fa7e 	bl	80026e6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <HAL_GPIO_Init+0x74>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x7c>
 8005200:	21ad      	movs	r1, #173	; 0xad
 8005202:	4828      	ldr	r0, [pc, #160]	; (80052a4 <HAL_GPIO_Init+0x118>)
 8005204:	f7fd fa6f 	bl	80026e6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d035      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d031      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b11      	cmp	r3, #17
 800521e:	d02d      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d029      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b12      	cmp	r3, #18
 800522e:	d025      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005238:	d020      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005242:	d01b      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800524c:	d016      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005256:	d011      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005260:	d00c      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800526a:	d007      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0xf0>
 8005274:	21ae      	movs	r1, #174	; 0xae
 8005276:	480b      	ldr	r0, [pc, #44]	; (80052a4 <HAL_GPIO_Init+0x118>)
 8005278:	f7fd fa35 	bl	80026e6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	e289      	b.n	8005796 <HAL_GPIO_Init+0x60a>
 8005282:	bf00      	nop
 8005284:	40020000 	.word	0x40020000
 8005288:	40020400 	.word	0x40020400
 800528c:	40020800 	.word	0x40020800
 8005290:	40020c00 	.word	0x40020c00
 8005294:	40021000 	.word	0x40021000
 8005298:	40021400 	.word	0x40021400
 800529c:	40021800 	.word	0x40021800
 80052a0:	40021c00 	.word	0x40021c00
 80052a4:	0800bc28 	.word	0x0800bc28
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a8:	2201      	movs	r2, #1
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	f040 8265 	bne.w	8005790 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d005      	beq.n	80052de <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d144      	bne.n	8005368 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00f      	beq.n	8005306 <HAL_GPIO_Init+0x17a>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d00b      	beq.n	8005306 <HAL_GPIO_Init+0x17a>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d007      	beq.n	8005306 <HAL_GPIO_Init+0x17a>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x17a>
 80052fe:	21c0      	movs	r1, #192	; 0xc0
 8005300:	4831      	ldr	r0, [pc, #196]	; (80053c8 <HAL_GPIO_Init+0x23c>)
 8005302:	f7fd f9f0 	bl	80026e6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	2203      	movs	r2, #3
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4013      	ands	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800533c:	2201      	movs	r2, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 0201 	and.w	r2, r3, #1
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	2b03      	cmp	r3, #3
 8005372:	d02b      	beq.n	80053cc <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_GPIO_Init+0x208>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d007      	beq.n	8005394 <HAL_GPIO_Init+0x208>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_Init+0x208>
 800538c:	21d1      	movs	r1, #209	; 0xd1
 800538e:	480e      	ldr	r0, [pc, #56]	; (80053c8 <HAL_GPIO_Init+0x23c>)
 8005390:	f7fd f9a9 	bl	80026e6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	2203      	movs	r2, #3
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	60da      	str	r2, [r3, #12]
 80053c4:	e002      	b.n	80053cc <HAL_GPIO_Init+0x240>
 80053c6:	bf00      	nop
 80053c8:	0800bc28 	.word	0x0800bc28
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f040 810c 	bne.w	80055f2 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80e3 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b09      	cmp	r3, #9
 80053ea:	f000 80de 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80d9 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80d4 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80cf 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80ca 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b01      	cmp	r3, #1
 800541c:	f000 80c5 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f000 80c0 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b02      	cmp	r3, #2
 8005430:	f000 80bb 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b02      	cmp	r3, #2
 800543a:	f000 80b6 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b02      	cmp	r3, #2
 8005444:	f000 80b1 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b03      	cmp	r3, #3
 800544e:	f000 80ac 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b04      	cmp	r3, #4
 8005458:	f000 80a7 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b04      	cmp	r3, #4
 8005462:	f000 80a2 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b04      	cmp	r3, #4
 800546c:	f000 809d 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b05      	cmp	r3, #5
 8005476:	f000 8098 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b05      	cmp	r3, #5
 8005480:	f000 8093 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b09      	cmp	r3, #9
 800548a:	f000 808e 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b06      	cmp	r3, #6
 8005494:	f000 8089 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b09      	cmp	r3, #9
 800549e:	f000 8084 	beq.w	80055aa <HAL_GPIO_Init+0x41e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b07      	cmp	r3, #7
 80054a8:	d07f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b07      	cmp	r3, #7
 80054b0:	d07b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b07      	cmp	r3, #7
 80054b8:	d077      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d073      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d06f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d06b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b09      	cmp	r3, #9
 80054d8:	d067      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b09      	cmp	r3, #9
 80054e0:	d063      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b0a      	cmp	r3, #10
 80054e8:	d05f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b0a      	cmp	r3, #10
 80054f0:	d05b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b0b      	cmp	r3, #11
 80054f8:	d057      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d053      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d04f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b0d      	cmp	r3, #13
 8005510:	d04b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d047      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b05      	cmp	r3, #5
 8005520:	d043      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d03f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d03b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d037      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d033      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b05      	cmp	r3, #5
 8005548:	d02f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d02b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b06      	cmp	r3, #6
 8005558:	d027      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b07      	cmp	r3, #7
 8005560:	d023      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b07      	cmp	r3, #7
 8005568:	d01f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b07      	cmp	r3, #7
 8005570:	d01b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b07      	cmp	r3, #7
 8005578:	d017      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d013      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d00f      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d00b      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d007      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b0a      	cmp	r3, #10
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_Init+0x41e>
 80055a2:	21de      	movs	r1, #222	; 0xde
 80055a4:	4880      	ldr	r0, [pc, #512]	; (80057a8 <HAL_GPIO_Init+0x61c>)
 80055a6:	f7fd f89e 	bl	80026e6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	08da      	lsrs	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3208      	adds	r2, #8
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	2203      	movs	r2, #3
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4013      	ands	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0203 	and.w	r2, r3, #3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80ae 	beq.w	8005790 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <HAL_GPIO_Init+0x620>)
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	4a5b      	ldr	r2, [pc, #364]	; (80057ac <HAL_GPIO_Init+0x620>)
 800563e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005642:	6453      	str	r3, [r2, #68]	; 0x44
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_GPIO_Init+0x620>)
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005650:	4a57      	ldr	r2, [pc, #348]	; (80057b0 <HAL_GPIO_Init+0x624>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	3302      	adds	r3, #2
 8005658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	220f      	movs	r2, #15
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a4f      	ldr	r2, [pc, #316]	; (80057b4 <HAL_GPIO_Init+0x628>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d025      	beq.n	80056c8 <HAL_GPIO_Init+0x53c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a4e      	ldr	r2, [pc, #312]	; (80057b8 <HAL_GPIO_Init+0x62c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d01f      	beq.n	80056c4 <HAL_GPIO_Init+0x538>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a4d      	ldr	r2, [pc, #308]	; (80057bc <HAL_GPIO_Init+0x630>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d019      	beq.n	80056c0 <HAL_GPIO_Init+0x534>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a4c      	ldr	r2, [pc, #304]	; (80057c0 <HAL_GPIO_Init+0x634>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_GPIO_Init+0x530>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a4b      	ldr	r2, [pc, #300]	; (80057c4 <HAL_GPIO_Init+0x638>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00d      	beq.n	80056b8 <HAL_GPIO_Init+0x52c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a4a      	ldr	r2, [pc, #296]	; (80057c8 <HAL_GPIO_Init+0x63c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <HAL_GPIO_Init+0x528>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a49      	ldr	r2, [pc, #292]	; (80057cc <HAL_GPIO_Init+0x640>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_GPIO_Init+0x524>
 80056ac:	2306      	movs	r3, #6
 80056ae:	e00c      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056b0:	2307      	movs	r3, #7
 80056b2:	e00a      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056b4:	2305      	movs	r3, #5
 80056b6:	e008      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056b8:	2304      	movs	r3, #4
 80056ba:	e006      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056bc:	2303      	movs	r3, #3
 80056be:	e004      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e002      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_GPIO_Init+0x53e>
 80056c8:	2300      	movs	r3, #0
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	f002 0203 	and.w	r2, r2, #3
 80056d0:	0092      	lsls	r2, r2, #2
 80056d2:	4093      	lsls	r3, r2
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056da:	4935      	ldr	r1, [pc, #212]	; (80057b0 <HAL_GPIO_Init+0x624>)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	3302      	adds	r3, #2
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e8:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <HAL_GPIO_Init+0x644>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800570c:	4a30      	ldr	r2, [pc, #192]	; (80057d0 <HAL_GPIO_Init+0x644>)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005712:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <HAL_GPIO_Init+0x644>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005736:	4a26      	ldr	r2, [pc, #152]	; (80057d0 <HAL_GPIO_Init+0x644>)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <HAL_GPIO_Init+0x644>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005760:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <HAL_GPIO_Init+0x644>)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HAL_GPIO_Init+0x644>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <HAL_GPIO_Init+0x644>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b0f      	cmp	r3, #15
 800579a:	f67f ad85 	bls.w	80052a8 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	0800bc28 	.word	0x0800bc28
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40013800 	.word	0x40013800
 80057b4:	40020000 	.word	0x40020000
 80057b8:	40020400 	.word	0x40020400
 80057bc:	40020800 	.word	0x40020800
 80057c0:	40020c00 	.word	0x40020c00
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40021400 	.word	0x40021400
 80057cc:	40021800 	.word	0x40021800
 80057d0:	40013c00 	.word	0x40013c00

080057d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	807b      	strh	r3, [r7, #2]
 80057e0:	4613      	mov	r3, r2
 80057e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80057e4:	887b      	ldrh	r3, [r7, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <HAL_GPIO_WritePin+0x20>
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HAL_GPIO_WritePin+0x2a>
 80057f4:	f240 119d 	movw	r1, #413	; 0x19d
 80057f8:	480e      	ldr	r0, [pc, #56]	; (8005834 <HAL_GPIO_WritePin+0x60>)
 80057fa:	f7fc ff74 	bl	80026e6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80057fe:	787b      	ldrb	r3, [r7, #1]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <HAL_GPIO_WritePin+0x40>
 8005804:	787b      	ldrb	r3, [r7, #1]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d004      	beq.n	8005814 <HAL_GPIO_WritePin+0x40>
 800580a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800580e:	4809      	ldr	r0, [pc, #36]	; (8005834 <HAL_GPIO_WritePin+0x60>)
 8005810:	f7fc ff69 	bl	80026e6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005814:	787b      	ldrb	r3, [r7, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800581a:	887a      	ldrh	r2, [r7, #2]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005820:	e003      	b.n	800582a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	041a      	lsls	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	619a      	str	r2, [r3, #24]
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	0800bc28 	.word	0x0800bc28

08005838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e1bd      	b.n	8005bc6 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a93      	ldr	r2, [pc, #588]	; (8005a9c <HAL_I2C_Init+0x264>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_I2C_Init+0x3a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a91      	ldr	r2, [pc, #580]	; (8005aa0 <HAL_I2C_Init+0x268>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_I2C_Init+0x3a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a90      	ldr	r2, [pc, #576]	; (8005aa4 <HAL_I2C_Init+0x26c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_I2C_Init+0x3a>
 8005868:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800586c:	488e      	ldr	r0, [pc, #568]	; (8005aa8 <HAL_I2C_Init+0x270>)
 800586e:	f7fc ff3a 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <HAL_I2C_Init+0x4c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4a8b      	ldr	r2, [pc, #556]	; (8005aac <HAL_I2C_Init+0x274>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d904      	bls.n	800588e <HAL_I2C_Init+0x56>
 8005884:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005888:	4887      	ldr	r0, [pc, #540]	; (8005aa8 <HAL_I2C_Init+0x270>)
 800588a:	f7fc ff2c 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <HAL_I2C_Init+0x72>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800589e:	d004      	beq.n	80058aa <HAL_I2C_Init+0x72>
 80058a0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80058a4:	4880      	ldr	r0, [pc, #512]	; (8005aa8 <HAL_I2C_Init+0x270>)
 80058a6:	f7fc ff1e 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_I2C_Init+0x8c>
 80058ba:	f240 11c1 	movw	r1, #449	; 0x1c1
 80058be:	487a      	ldr	r0, [pc, #488]	; (8005aa8 <HAL_I2C_Init+0x270>)
 80058c0:	f7fc ff11 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058cc:	d009      	beq.n	80058e2 <HAL_I2C_Init+0xaa>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058d6:	d004      	beq.n	80058e2 <HAL_I2C_Init+0xaa>
 80058d8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80058dc:	4872      	ldr	r0, [pc, #456]	; (8005aa8 <HAL_I2C_Init+0x270>)
 80058de:	f7fc ff02 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_I2C_Init+0xc4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d004      	beq.n	80058fc <HAL_I2C_Init+0xc4>
 80058f2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80058f6:	486c      	ldr	r0, [pc, #432]	; (8005aa8 <HAL_I2C_Init+0x270>)
 80058f8:	f7fc fef5 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <HAL_I2C_Init+0xda>
 8005908:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800590c:	4866      	ldr	r0, [pc, #408]	; (8005aa8 <HAL_I2C_Init+0x270>)
 800590e:	f7fc feea 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <HAL_I2C_Init+0xf4>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d004      	beq.n	800592c <HAL_I2C_Init+0xf4>
 8005922:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005926:	4860      	ldr	r0, [pc, #384]	; (8005aa8 <HAL_I2C_Init+0x270>)
 8005928:	f7fc fedd 	bl	80026e6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_I2C_Init+0x10e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	2b80      	cmp	r3, #128	; 0x80
 800593a:	d004      	beq.n	8005946 <HAL_I2C_Init+0x10e>
 800593c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005940:	4859      	ldr	r0, [pc, #356]	; (8005aa8 <HAL_I2C_Init+0x270>)
 8005942:	f7fc fed0 	bl	80026e6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc fd6c 	bl	8002438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005998:	f001 fff8 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 800599c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4a43      	ldr	r2, [pc, #268]	; (8005ab0 <HAL_I2C_Init+0x278>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d807      	bhi.n	80059b8 <HAL_I2C_Init+0x180>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a42      	ldr	r2, [pc, #264]	; (8005ab4 <HAL_I2C_Init+0x27c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bf94      	ite	ls
 80059b0:	2301      	movls	r3, #1
 80059b2:	2300      	movhi	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e006      	b.n	80059c6 <HAL_I2C_Init+0x18e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <HAL_I2C_Init+0x280>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	bf94      	ite	ls
 80059c0:	2301      	movls	r3, #1
 80059c2:	2300      	movhi	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0fb      	b.n	8005bc6 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a3a      	ldr	r2, [pc, #232]	; (8005abc <HAL_I2C_Init+0x284>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	0c9b      	lsrs	r3, r3, #18
 80059d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <HAL_I2C_Init+0x278>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d802      	bhi.n	8005a08 <HAL_I2C_Init+0x1d0>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3301      	adds	r3, #1
 8005a06:	e009      	b.n	8005a1c <HAL_I2C_Init+0x1e4>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	4a2b      	ldr	r2, [pc, #172]	; (8005ac0 <HAL_I2C_Init+0x288>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	491e      	ldr	r1, [pc, #120]	; (8005ab0 <HAL_I2C_Init+0x278>)
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	d819      	bhi.n	8005a70 <HAL_I2C_Init+0x238>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e59      	subs	r1, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a50:	400b      	ands	r3, r1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_I2C_Init+0x234>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1e59      	subs	r1, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6a:	e065      	b.n	8005b38 <HAL_I2C_Init+0x300>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	e063      	b.n	8005b38 <HAL_I2C_Init+0x300>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d125      	bne.n	8005ac4 <HAL_I2C_Init+0x28c>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1e58      	subs	r0, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	440b      	add	r3, r1
 8005a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e026      	b.n	8005aea <HAL_I2C_Init+0x2b2>
 8005a9c:	40005400 	.word	0x40005400
 8005aa0:	40005800 	.word	0x40005800
 8005aa4:	40005c00 	.word	0x40005c00
 8005aa8:	0800bc64 	.word	0x0800bc64
 8005aac:	00061a80 	.word	0x00061a80
 8005ab0:	000186a0 	.word	0x000186a0
 8005ab4:	001e847f 	.word	0x001e847f
 8005ab8:	003d08ff 	.word	0x003d08ff
 8005abc:	431bde83 	.word	0x431bde83
 8005ac0:	10624dd3 	.word	0x10624dd3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e58      	subs	r0, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	0099      	lsls	r1, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ada:	3301      	adds	r3, #1
 8005adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_I2C_Init+0x2ba>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_I2C_Init+0x300>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10e      	bne.n	8005b18 <HAL_I2C_Init+0x2e0>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1e58      	subs	r0, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	440b      	add	r3, r1
 8005b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b16:	e00f      	b.n	8005b38 <HAL_I2C_Init+0x300>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1e58      	subs	r0, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	0099      	lsls	r1, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	6809      	ldr	r1, [r1, #0]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6911      	ldr	r1, [r2, #16]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68d2      	ldr	r2, [r2, #12]
 8005b72:	4311      	orrs	r1, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d003      	beq.n	8005c08 <HAL_I2C_EV_IRQHandler+0x38>
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	f040 80c1 	bne.w	8005d8a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10d      	bne.n	8005c3e <HAL_I2C_EV_IRQHandler+0x6e>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c28:	d003      	beq.n	8005c32 <HAL_I2C_EV_IRQHandler+0x62>
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c30:	d101      	bne.n	8005c36 <HAL_I2C_EV_IRQHandler+0x66>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_I2C_EV_IRQHandler+0x68>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f000 8132 	beq.w	8005ea2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x92>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	0a5b      	lsrs	r3, r3, #9
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fc7b 	bl	8007550 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fd83 	bl	8006766 <I2C_Master_SB>
 8005c60:	e092      	b.n	8005d88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	08db      	lsrs	r3, r3, #3
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0xb2>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fdf9 	bl	8006872 <I2C_Master_ADD10>
 8005c80:	e082      	b.n	8005d88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0xd2>
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	0a5b      	lsrs	r3, r3, #9
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fe13 	bl	80068c6 <I2C_Master_ADDR>
 8005ca0:	e072      	b.n	8005d88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d03b      	beq.n	8005d26 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	f000 80f3 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00f      	beq.n	8005cec <HAL_I2C_EV_IRQHandler+0x11c>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	0a9b      	lsrs	r3, r3, #10
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d009      	beq.n	8005cec <HAL_I2C_EV_IRQHandler+0x11c>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f9f3 	bl	80060d0 <I2C_MasterTransmit_TXE>
 8005cea:	e04d      	b.n	8005d88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80d6 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80cf 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b21      	cmp	r3, #33	; 0x21
 8005d0c:	d103      	bne.n	8005d16 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa7a 	bl	8006208 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d14:	e0c7      	b.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	f040 80c4 	bne.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fae8 	bl	80062f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d24:	e0bf      	b.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	f000 80b7 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	099b      	lsrs	r3, r3, #6
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00f      	beq.n	8005d64 <HAL_I2C_EV_IRQHandler+0x194>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <HAL_I2C_EV_IRQHandler+0x194>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fb5d 	bl	800641c <I2C_MasterReceive_RXNE>
 8005d62:	e011      	b.n	8005d88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 809a 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	0a5b      	lsrs	r3, r3, #9
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8093 	beq.w	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fc06 	bl	8006592 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d86:	e08e      	b.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d88:	e08d      	b.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e007      	b.n	8005dac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d012      	beq.n	8005dde <HAL_I2C_EV_IRQHandler+0x20e>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	0a5b      	lsrs	r3, r3, #9
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ffc4 	bl	8006d64 <I2C_Slave_ADDR>
 8005ddc:	e066      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_I2C_EV_IRQHandler+0x22e>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	0a5b      	lsrs	r3, r3, #9
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fffe 	bl	8006df8 <I2C_Slave_STOPF>
 8005dfc:	e056      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	2b21      	cmp	r3, #33	; 0x21
 8005e02:	d002      	beq.n	8005e0a <HAL_I2C_EV_IRQHandler+0x23a>
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b29      	cmp	r3, #41	; 0x29
 8005e08:	d125      	bne.n	8005e56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00f      	beq.n	8005e36 <HAL_I2C_EV_IRQHandler+0x266>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	0a9b      	lsrs	r3, r3, #10
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_I2C_EV_IRQHandler+0x266>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	089b      	lsrs	r3, r3, #2
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 feda 	bl	8006be8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e34:	e039      	b.n	8005eaa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d033      	beq.n	8005eaa <HAL_I2C_EV_IRQHandler+0x2da>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	0a5b      	lsrs	r3, r3, #9
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02d      	beq.n	8005eaa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 ff07 	bl	8006c62 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e54:	e029      	b.n	8005eaa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	099b      	lsrs	r3, r3, #6
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00f      	beq.n	8005e82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	0a9b      	lsrs	r3, r3, #10
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	089b      	lsrs	r3, r3, #2
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 ff12 	bl	8006ca4 <I2C_SlaveReceive_RXNE>
 8005e80:	e014      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	0a5b      	lsrs	r3, r3, #9
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ff40 	bl	8006d20 <I2C_SlaveReceive_BTF>
 8005ea0:	e004      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eaa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b08a      	sub	sp, #40	; 0x28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <HAL_I2C_ER_IRQHandler+0x4e>
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005efe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	0a5b      	lsrs	r3, r3, #9
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <HAL_I2C_ER_IRQHandler+0x78>
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f043 0302 	orr.w	r3, r3, #2
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	0a9b      	lsrs	r3, r3, #10
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03f      	beq.n	8005fb6 <HAL_I2C_ER_IRQHandler+0x104>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d039      	beq.n	8005fb6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005f42:	7efb      	ldrb	r3, [r7, #27]
 8005f44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005f5c:	7ebb      	ldrb	r3, [r7, #26]
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d112      	bne.n	8005f88 <HAL_I2C_ER_IRQHandler+0xd6>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <HAL_I2C_ER_IRQHandler+0xd6>
 8005f68:	7cfb      	ldrb	r3, [r7, #19]
 8005f6a:	2b21      	cmp	r3, #33	; 0x21
 8005f6c:	d008      	beq.n	8005f80 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b29      	cmp	r3, #41	; 0x29
 8005f72:	d005      	beq.n	8005f80 <HAL_I2C_ER_IRQHandler+0xce>
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	2b28      	cmp	r3, #40	; 0x28
 8005f78:	d106      	bne.n	8005f88 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b21      	cmp	r3, #33	; 0x21
 8005f7e:	d103      	bne.n	8005f88 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 f869 	bl	8007058 <I2C_Slave_AF>
 8005f86:	e016      	b.n	8005fb6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	f043 0304 	orr.w	r3, r3, #4
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f9a:	7efb      	ldrb	r3, [r7, #27]
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d002      	beq.n	8005fa6 <HAL_I2C_ER_IRQHandler+0xf4>
 8005fa0:	7efb      	ldrb	r3, [r7, #27]
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d107      	bne.n	8005fb6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	0adb      	lsrs	r3, r3, #11
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005fde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 f8a0 	bl	8007138 <I2C_ITError>
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3728      	adds	r7, #40	; 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
 800605c:	4613      	mov	r3, r2
 800605e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d150      	bne.n	8006198 <I2C_MasterTransmit_TXE+0xc8>
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b21      	cmp	r3, #33	; 0x21
 80060fa:	d14d      	bne.n	8006198 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d01d      	beq.n	800613e <I2C_MasterTransmit_TXE+0x6e>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b20      	cmp	r3, #32
 8006106:	d01a      	beq.n	800613e <I2C_MasterTransmit_TXE+0x6e>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800610e:	d016      	beq.n	800613e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800611e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2211      	movs	r2, #17
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ff62 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800613c:	e060      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800614c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d107      	bne.n	8006188 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff7d 	bl	8006080 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006186:	e03b      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff35 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006196:	e033      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b21      	cmp	r3, #33	; 0x21
 800619c:	d005      	beq.n	80061aa <I2C_MasterTransmit_TXE+0xda>
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d12d      	bne.n	8006200 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b22      	cmp	r3, #34	; 0x22
 80061a8:	d12a      	bne.n	8006200 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80061c4:	e01c      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d103      	bne.n	80061da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f88e 	bl	80062f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80061d8:	e012      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061fe:	e7ff      	b.n	8006200 <I2C_MasterTransmit_TXE+0x130>
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b21      	cmp	r3, #33	; 0x21
 8006220:	d164      	bne.n	80062ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d012      	beq.n	8006252 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006250:	e04c      	b.n	80062ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d01d      	beq.n	8006294 <I2C_MasterTransmit_BTF+0x8c>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b20      	cmp	r3, #32
 800625c:	d01a      	beq.n	8006294 <I2C_MasterTransmit_BTF+0x8c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006264:	d016      	beq.n	8006294 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006274:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2211      	movs	r2, #17
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff feb7 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
}
 8006292:	e02b      	b.n	80062ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d107      	bne.n	80062de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fed2 	bl	8006080 <HAL_I2C_MemTxCpltCallback>
}
 80062dc:	e006      	b.n	80062ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fe8a 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006302:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11d      	bne.n	8006348 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d10b      	bne.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	b2da      	uxtb	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	1c9a      	adds	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800632a:	e073      	b.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006330:	b29b      	uxth	r3, r3
 8006332:	121b      	asrs	r3, r3, #8
 8006334:	b2da      	uxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006346:	e065      	b.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10b      	bne.n	8006368 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006354:	b2da      	uxtb	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006366:	e055      	b.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	2b02      	cmp	r3, #2
 800636e:	d151      	bne.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b22      	cmp	r3, #34	; 0x22
 8006374:	d10d      	bne.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006384:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006390:	e040      	b.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b21      	cmp	r3, #33	; 0x21
 80063a0:	d112      	bne.n	80063c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063c6:	e025      	b.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d120      	bne.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	2b21      	cmp	r3, #33	; 0x21
 80063d6:	d11d      	bne.n	8006414 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fe36 	bl	8006080 <HAL_I2C_MemTxCpltCallback>
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b22      	cmp	r3, #34	; 0x22
 800642e:	f040 80ac 	bne.w	800658a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d921      	bls.n	8006484 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b03      	cmp	r3, #3
 800646e:	f040 808c 	bne.w	800658a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006480:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006482:	e082      	b.n	800658a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	2b02      	cmp	r3, #2
 800648a:	d075      	beq.n	8006578 <I2C_MasterReceive_RXNE+0x15c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d002      	beq.n	8006498 <I2C_MasterReceive_RXNE+0x7c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d16f      	bne.n	8006578 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 f827 	bl	80074ec <I2C_WaitOnSTOPRequestThroughIT>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d142      	bne.n	800652a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d10a      	bne.n	8006514 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fdc1 	bl	8006094 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006512:	e03a      	b.n	800658a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2212      	movs	r2, #18
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fd76 	bl	8006014 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006528:	e02f      	b.n	800658a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006538:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fd99 	bl	80060a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006576:	e008      	b.n	800658a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006586:	605a      	str	r2, [r3, #4]
}
 8006588:	e7ff      	b.n	800658a <I2C_MasterReceive_RXNE+0x16e>
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d11b      	bne.n	80065e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80065e0:	e0bd      	b.n	800675e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d129      	bne.n	8006640 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d00a      	beq.n	8006618 <I2C_MasterReceive_BTF+0x86>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d007      	beq.n	8006618 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006616:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800663e:	e08e      	b.n	800675e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d176      	bne.n	8006738 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d002      	beq.n	8006656 <I2C_MasterReceive_BTF+0xc4>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b10      	cmp	r3, #16
 8006654:	d108      	bne.n	8006668 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e019      	b.n	800669c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d002      	beq.n	8006674 <I2C_MasterReceive_BTF+0xe2>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d108      	bne.n	8006686 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e00a      	b.n	800669c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b10      	cmp	r3, #16
 800668a:	d007      	beq.n	800669c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d10a      	bne.n	8006722 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fcba 	bl	8006094 <HAL_I2C_MemRxCpltCallback>
}
 8006720:	e01d      	b.n	800675e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2212      	movs	r2, #18
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fc6f 	bl	8006014 <HAL_I2C_MasterRxCpltCallback>
}
 8006736:	e012      	b.n	800675e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d117      	bne.n	80067aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	b2db      	uxtb	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006792:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006794:	e067      	b.n	8006866 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	b2db      	uxtb	r3, r3
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]
}
 80067a8:	e05d      	b.n	8006866 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067b2:	d133      	bne.n	800681c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b21      	cmp	r3, #33	; 0x21
 80067be:	d109      	bne.n	80067d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d0:	611a      	str	r2, [r3, #16]
 80067d2:	e008      	b.n	80067e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <I2C_Master_SB+0x92>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d032      	beq.n	8006866 <I2C_Master_SB+0x100>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d02d      	beq.n	8006866 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006818:	605a      	str	r2, [r3, #4]
}
 800681a:	e024      	b.n	8006866 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10e      	bne.n	8006842 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	b29b      	uxth	r3, r3
 800682a:	11db      	asrs	r3, r3, #7
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0306 	and.w	r3, r3, #6
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f063 030f 	orn	r3, r3, #15
 8006838:	b2da      	uxtb	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	611a      	str	r2, [r3, #16]
}
 8006840:	e011      	b.n	8006866 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10d      	bne.n	8006866 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	b29b      	uxth	r3, r3
 8006850:	11db      	asrs	r3, r3, #7
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 0306 	and.w	r3, r3, #6
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f063 030e 	orn	r3, r3, #14
 800685e:	b2da      	uxtb	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	611a      	str	r2, [r3, #16]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <I2C_Master_ADD10+0x26>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d108      	bne.n	80068aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <I2C_Master_ADD10+0x48>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b8:	605a      	str	r2, [r3, #4]
  }
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b091      	sub	sp, #68	; 0x44
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b22      	cmp	r3, #34	; 0x22
 80068ee:	f040 8169 	bne.w	8006bc4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <I2C_Master_ADDR+0x54>
 80068fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d10b      	bne.n	800691a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006902:	2300      	movs	r3, #0
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	633b      	str	r3, [r7, #48]	; 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	e160      	b.n	8006bdc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	2b00      	cmp	r3, #0
 8006920:	d11d      	bne.n	800695e <I2C_Master_ADDR+0x98>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800692a:	d118      	bne.n	800695e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692c:	2300      	movs	r3, #0
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	651a      	str	r2, [r3, #80]	; 0x50
 800695c:	e13e      	b.n	8006bdc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d113      	bne.n	8006990 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006968:	2300      	movs	r3, #0
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e115      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	f040 808a 	bne.w	8006ab0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069a2:	d137      	bne.n	8006a14 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d113      	bne.n	80069ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d4:	2300      	movs	r3, #0
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	e0e7      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ec:	2300      	movs	r3, #0
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	e0d3      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d02e      	beq.n	8006a78 <I2C_Master_ADDR+0x1b2>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d02b      	beq.n	8006a78 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	2b12      	cmp	r3, #18
 8006a24:	d102      	bne.n	8006a2c <I2C_Master_ADDR+0x166>
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d125      	bne.n	8006a78 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00e      	beq.n	8006a50 <I2C_Master_ADDR+0x18a>
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d00b      	beq.n	8006a50 <I2C_Master_ADDR+0x18a>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d008      	beq.n	8006a50 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e007      	b.n	8006a60 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a5e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	e0a1      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a86:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61bb      	str	r3, [r7, #24]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e085      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d14d      	bne.n	8006b56 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d016      	beq.n	8006aee <I2C_Master_ADDR+0x228>
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d013      	beq.n	8006aee <I2C_Master_ADDR+0x228>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d010      	beq.n	8006aee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e007      	b.n	8006afe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006afc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0c:	d117      	bne.n	8006b3e <I2C_Master_ADDR+0x278>
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b14:	d00b      	beq.n	8006b2e <I2C_Master_ADDR+0x268>
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d008      	beq.n	8006b2e <I2C_Master_ADDR+0x268>
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d005      	beq.n	8006b2e <I2C_Master_ADDR+0x268>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d002      	beq.n	8006b2e <I2C_Master_ADDR+0x268>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d107      	bne.n	8006b3e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e032      	b.n	8006bbc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b64:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b74:	d117      	bne.n	8006ba6 <I2C_Master_ADDR+0x2e0>
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b7c:	d00b      	beq.n	8006b96 <I2C_Master_ADDR+0x2d0>
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d008      	beq.n	8006b96 <I2C_Master_ADDR+0x2d0>
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d005      	beq.n	8006b96 <I2C_Master_ADDR+0x2d0>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d002      	beq.n	8006b96 <I2C_Master_ADDR+0x2d0>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d107      	bne.n	8006ba6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006bc2:	e00b      	b.n	8006bdc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	e7ff      	b.n	8006bdc <I2C_Master_ADDR+0x316>
 8006bdc:	bf00      	nop
 8006bde:	3744      	adds	r7, #68	; 0x44
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02b      	beq.n	8006c5a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d114      	bne.n	8006c5a <I2C_SlaveTransmit_TXE+0x72>
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b29      	cmp	r3, #41	; 0x29
 8006c34:	d111      	bne.n	8006c5a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c44:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2221      	movs	r2, #33	; 0x21
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2228      	movs	r2, #40	; 0x28
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff f9e7 	bl	8006028 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d011      	beq.n	8006c98 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	781a      	ldrb	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02c      	beq.n	8006d18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d114      	bne.n	8006d18 <I2C_SlaveReceive_RXNE+0x74>
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf2:	d111      	bne.n	8006d18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2222      	movs	r2, #34	; 0x22
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2228      	movs	r2, #40	; 0x28
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff f992 	bl	800603c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d012      	beq.n	8006d58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d7e:	2b28      	cmp	r3, #40	; 0x28
 8006d80:	d127      	bne.n	8006dd2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	81bb      	strh	r3, [r7, #12]
 8006db4:	e002      	b.n	8006dbc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006dc4:	89ba      	ldrh	r2, [r7, #12]
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff f940 	bl	8006050 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006dd0:	e00e      	b.n	8006df0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e54:	d172      	bne.n	8006f3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b22      	cmp	r3, #34	; 0x22
 8006e5a:	d002      	beq.n	8006e62 <I2C_Slave_STOPF+0x6a>
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e60:	d135      	bne.n	8006ece <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe f8b6 	bl	800500c <HAL_DMA_GetState>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d049      	beq.n	8006f3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	4a69      	ldr	r2, [pc, #420]	; (8007050 <I2C_Slave_STOPF+0x258>)
 8006eac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd fefe 	bl	8004cb4 <HAL_DMA_Abort_IT>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d03d      	beq.n	8006f3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ecc:	e035      	b.n	8006f3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f043 0204 	orr.w	r2, r3, #4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe f880 	bl	800500c <HAL_DMA_GetState>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d014      	beq.n	8006f3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	4a4e      	ldr	r2, [pc, #312]	; (8007050 <I2C_Slave_STOPF+0x258>)
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fd fec8 	bl	8004cb4 <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d008      	beq.n	8006f3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	e000      	b.n	8006f3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03e      	beq.n	8006fc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d112      	bne.n	8006f7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d112      	bne.n	8006fae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f043 0204 	orr.w	r2, r3, #4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8b3 	bl	8007138 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006fd2:	e039      	b.n	8007048 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd8:	d109      	bne.n	8006fee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2228      	movs	r2, #40	; 0x28
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff f827 	bl	800603c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b28      	cmp	r3, #40	; 0x28
 8006ff8:	d111      	bne.n	800701e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a15      	ldr	r2, [pc, #84]	; (8007054 <I2C_Slave_STOPF+0x25c>)
 8006ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff f828 	bl	800606c <HAL_I2C_ListenCpltCallback>
}
 800701c:	e014      	b.n	8007048 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	2b22      	cmp	r3, #34	; 0x22
 8007024:	d002      	beq.n	800702c <I2C_Slave_STOPF+0x234>
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b22      	cmp	r3, #34	; 0x22
 800702a:	d10d      	bne.n	8007048 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fe fffa 	bl	800603c <HAL_I2C_SlaveRxCpltCallback>
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	0800739d 	.word	0x0800739d
 8007054:	ffff0000 	.word	0xffff0000

08007058 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007066:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d002      	beq.n	800707a <I2C_Slave_AF+0x22>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b20      	cmp	r3, #32
 8007078:	d129      	bne.n	80070ce <I2C_Slave_AF+0x76>
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b28      	cmp	r3, #40	; 0x28
 800707e:	d126      	bne.n	80070ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a2c      	ldr	r2, [pc, #176]	; (8007134 <I2C_Slave_AF+0xdc>)
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007094:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800709e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fe ffd0 	bl	800606c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80070cc:	e02e      	b.n	800712c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b21      	cmp	r3, #33	; 0x21
 80070d2:	d126      	bne.n	8007122 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <I2C_Slave_AF+0xdc>)
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2221      	movs	r2, #33	; 0x21
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007108:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007118:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fe ff84 	bl	8006028 <HAL_I2C_SlaveTxCpltCallback>
}
 8007120:	e004      	b.n	800712c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800712a:	615a      	str	r2, [r3, #20]
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	ffff0000 	.word	0xffff0000

08007138 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007146:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d002      	beq.n	800715c <I2C_ITError+0x24>
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d10a      	bne.n	8007172 <I2C_ITError+0x3a>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b22      	cmp	r3, #34	; 0x22
 8007160:	d107      	bne.n	8007172 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007170:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007178:	2b28      	cmp	r3, #40	; 0x28
 800717a:	d107      	bne.n	800718c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2228      	movs	r2, #40	; 0x28
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800718a:	e015      	b.n	80071b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719a:	d00a      	beq.n	80071b2 <I2C_ITError+0x7a>
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	2b60      	cmp	r3, #96	; 0x60
 80071a0:	d007      	beq.n	80071b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c6:	d162      	bne.n	800728e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d020      	beq.n	8007228 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	4a6a      	ldr	r2, [pc, #424]	; (8007394 <I2C_ITError+0x25c>)
 80071ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fd fd5e 	bl	8004cb4 <HAL_DMA_Abort_IT>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8089 	beq.w	8007312 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007222:	4610      	mov	r0, r2
 8007224:	4798      	blx	r3
 8007226:	e074      	b.n	8007312 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	4a59      	ldr	r2, [pc, #356]	; (8007394 <I2C_ITError+0x25c>)
 800722e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	4618      	mov	r0, r3
 8007236:	f7fd fd3d 	bl	8004cb4 <HAL_DMA_Abort_IT>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d068      	beq.n	8007312 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d10b      	bne.n	8007266 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007288:	4610      	mov	r0, r2
 800728a:	4798      	blx	r3
 800728c:	e041      	b.n	8007312 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b60      	cmp	r3, #96	; 0x60
 8007298:	d125      	bne.n	80072e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d10b      	bne.n	80072ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0201 	bic.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe feec 	bl	80060bc <HAL_I2C_AbortCpltCallback>
 80072e4:	e015      	b.n	8007312 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d10b      	bne.n	800730c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691a      	ldr	r2, [r3, #16]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	b2d2      	uxtb	r2, r2
 8007300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fe fecb 	bl	80060a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10e      	bne.n	8007340 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007356:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b04      	cmp	r3, #4
 8007362:	d113      	bne.n	800738c <I2C_ITError+0x254>
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b28      	cmp	r3, #40	; 0x28
 8007368:	d110      	bne.n	800738c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <I2C_ITError+0x260>)
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fe fe70 	bl	800606c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	0800739d 	.word	0x0800739d
 8007398:	ffff0000 	.word	0xffff0000

0800739c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80073b6:	4b4b      	ldr	r3, [pc, #300]	; (80074e4 <I2C_DMAAbort+0x148>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	08db      	lsrs	r3, r3, #3
 80073bc:	4a4a      	ldr	r2, [pc, #296]	; (80074e8 <I2C_DMAAbort+0x14c>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	0a1a      	lsrs	r2, r3, #8
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	00da      	lsls	r2, r3, #3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f043 0220 	orr.w	r2, r3, #32
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80073e2:	e00a      	b.n	80073fa <I2C_DMAAbort+0x5e>
    }
    count--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f8:	d0ea      	beq.n	80073d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	2200      	movs	r2, #0
 8007408:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	2200      	movs	r2, #0
 8007418:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007428:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	2200      	movs	r2, #0
 800743e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	2200      	movs	r2, #0
 800744e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b60      	cmp	r3, #96	; 0x60
 800746a:	d10e      	bne.n	800748a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2200      	movs	r2, #0
 8007480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f7fe fe1a 	bl	80060bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007488:	e027      	b.n	80074da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800748a:	7cfb      	ldrb	r3, [r7, #19]
 800748c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007490:	2b28      	cmp	r3, #40	; 0x28
 8007492:	d117      	bne.n	80074c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2228      	movs	r2, #40	; 0x28
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074c2:	e007      	b.n	80074d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	f7fe fde7 	bl	80060a8 <HAL_I2C_ErrorCallback>
}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000040 	.word	0x20000040
 80074e8:	14f8b589 	.word	0x14f8b589

080074ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	4a13      	ldr	r2, [pc, #76]	; (800754c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	0a1a      	lsrs	r2, r3, #8
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b01      	subs	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0220 	orr.w	r2, r3, #32
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e008      	b.n	800753c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007538:	d0e9      	beq.n	800750e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20000040 	.word	0x20000040
 800754c:	14f8b589 	.word	0x14f8b589

08007550 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007560:	d103      	bne.n	800756a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007568:	e007      	b.n	800757a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007572:	d102      	bne.n	800757a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2208      	movs	r2, #8
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007592:	2300      	movs	r3, #0
 8007594:	603b      	str	r3, [r7, #0]
 8007596:	4b20      	ldr	r3, [pc, #128]	; (8007618 <HAL_PWREx_EnableOverDrive+0x90>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <HAL_PWREx_EnableOverDrive+0x90>)
 800759c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a0:	6413      	str	r3, [r2, #64]	; 0x40
 80075a2:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <HAL_PWREx_EnableOverDrive+0x90>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075ae:	4b1b      	ldr	r3, [pc, #108]	; (800761c <HAL_PWREx_EnableOverDrive+0x94>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075b4:	f7fb fbba 	bl	8002d2c <HAL_GetTick>
 80075b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075ba:	e009      	b.n	80075d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075bc:	f7fb fbb6 	bl	8002d2c <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ca:	d901      	bls.n	80075d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e01f      	b.n	8007610 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075d0:	4b13      	ldr	r3, [pc, #76]	; (8007620 <HAL_PWREx_EnableOverDrive+0x98>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d1ee      	bne.n	80075bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075e4:	f7fb fba2 	bl	8002d2c <HAL_GetTick>
 80075e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075ea:	e009      	b.n	8007600 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075ec:	f7fb fb9e 	bl	8002d2c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075fa:	d901      	bls.n	8007600 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e007      	b.n	8007610 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <HAL_PWREx_EnableOverDrive+0x98>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800760c:	d1ee      	bne.n	80075ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40023800 	.word	0x40023800
 800761c:	420e0040 	.word	0x420e0040
 8007620:	40007000 	.word	0x40007000
 8007624:	420e0044 	.word	0x420e0044

08007628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e18c      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_RCC_ClockConfig+0x24>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b0f      	cmp	r3, #15
 800764a:	d904      	bls.n	8007656 <HAL_RCC_ClockConfig+0x2e>
 800764c:	f240 215a 	movw	r1, #602	; 0x25a
 8007650:	4887      	ldr	r0, [pc, #540]	; (8007870 <HAL_RCC_ClockConfig+0x248>)
 8007652:	f7fb f848 	bl	80026e6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d031      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d02e      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d02b      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b03      	cmp	r3, #3
 800766c:	d028      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d025      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b05      	cmp	r3, #5
 8007678:	d022      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b06      	cmp	r3, #6
 800767e:	d01f      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b07      	cmp	r3, #7
 8007684:	d01c      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d019      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d016      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b0a      	cmp	r3, #10
 8007696:	d013      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b0b      	cmp	r3, #11
 800769c:	d010      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b0c      	cmp	r3, #12
 80076a2:	d00d      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b0d      	cmp	r3, #13
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b0e      	cmp	r3, #14
 80076ae:	d007      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d004      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x98>
 80076b6:	f240 215b 	movw	r1, #603	; 0x25b
 80076ba:	486d      	ldr	r0, [pc, #436]	; (8007870 <HAL_RCC_ClockConfig+0x248>)
 80076bc:	f7fb f813 	bl	80026e6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076c0:	4b6c      	ldr	r3, [pc, #432]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90c      	bls.n	80076e8 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ce:	4b69      	ldr	r3, [pc, #420]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b67      	ldr	r3, [pc, #412]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e136      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d049      	beq.n	8007788 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007700:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4a5c      	ldr	r2, [pc, #368]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800770a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007718:	4b57      	ldr	r3, [pc, #348]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4a56      	ldr	r2, [pc, #344]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 800771e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d024      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b80      	cmp	r3, #128	; 0x80
 8007732:	d020      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b90      	cmp	r3, #144	; 0x90
 800773a:	d01c      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2ba0      	cmp	r3, #160	; 0xa0
 8007742:	d018      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2bb0      	cmp	r3, #176	; 0xb0
 800774a:	d014      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2bc0      	cmp	r3, #192	; 0xc0
 8007752:	d010      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2bd0      	cmp	r3, #208	; 0xd0
 800775a:	d00c      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2be0      	cmp	r3, #224	; 0xe0
 8007762:	d008      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2bf0      	cmp	r3, #240	; 0xf0
 800776a:	d004      	beq.n	8007776 <HAL_RCC_ClockConfig+0x14e>
 800776c:	f240 217e 	movw	r1, #638	; 0x27e
 8007770:	483f      	ldr	r0, [pc, #252]	; (8007870 <HAL_RCC_ClockConfig+0x248>)
 8007772:	f7fa ffb8 	bl	80026e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007776:	4b40      	ldr	r3, [pc, #256]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	493d      	ldr	r1, [pc, #244]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007784:	4313      	orrs	r3, r2
 8007786:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d059      	beq.n	8007848 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_RCC_ClockConfig+0x196>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d00c      	beq.n	80077be <HAL_RCC_ClockConfig+0x196>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d008      	beq.n	80077be <HAL_RCC_ClockConfig+0x196>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d004      	beq.n	80077be <HAL_RCC_ClockConfig+0x196>
 80077b4:	f240 2185 	movw	r1, #645	; 0x285
 80077b8:	482d      	ldr	r0, [pc, #180]	; (8007870 <HAL_RCC_ClockConfig+0x248>)
 80077ba:	f7fa ff94 	bl	80026e6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d107      	bne.n	80077d6 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c6:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d119      	bne.n	8007806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e0bf      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d003      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d107      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e6:	4b24      	ldr	r3, [pc, #144]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e0af      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e0a7      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007806:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f023 0203 	bic.w	r2, r3, #3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	4919      	ldr	r1, [pc, #100]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007814:	4313      	orrs	r3, r2
 8007816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007818:	f7fb fa88 	bl	8002d2c <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781e:	e00a      	b.n	8007836 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007820:	f7fb fa84 	bl	8002d2c <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	f241 3288 	movw	r2, #5000	; 0x1388
 800782e:	4293      	cmp	r3, r2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e08f      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007836:	4b10      	ldr	r3, [pc, #64]	; (8007878 <HAL_RCC_ClockConfig+0x250>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 020c 	and.w	r2, r3, #12
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	429a      	cmp	r2, r3
 8007846:	d1eb      	bne.n	8007820 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d212      	bcs.n	800787c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <HAL_RCC_ClockConfig+0x24c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d007      	beq.n	800787c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e072      	b.n	8007956 <HAL_RCC_ClockConfig+0x32e>
 8007870:	0800bc9c 	.word	0x0800bc9c
 8007874:	40023c00 	.word	0x40023c00
 8007878:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d025      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d018      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x29a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007898:	d013      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x29a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078a2:	d00e      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x29a>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80078ac:	d009      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x29a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80078b6:	d004      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x29a>
 80078b8:	f240 21c3 	movw	r1, #707	; 0x2c3
 80078bc:	4828      	ldr	r0, [pc, #160]	; (8007960 <HAL_RCC_ClockConfig+0x338>)
 80078be:	f7fa ff12 	bl	80026e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_RCC_ClockConfig+0x33c>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4925      	ldr	r1, [pc, #148]	; (8007964 <HAL_RCC_ClockConfig+0x33c>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d026      	beq.n	800792e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d018      	beq.n	800791a <HAL_RCC_ClockConfig+0x2f2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f0:	d013      	beq.n	800791a <HAL_RCC_ClockConfig+0x2f2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80078fa:	d00e      	beq.n	800791a <HAL_RCC_ClockConfig+0x2f2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007904:	d009      	beq.n	800791a <HAL_RCC_ClockConfig+0x2f2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800790e:	d004      	beq.n	800791a <HAL_RCC_ClockConfig+0x2f2>
 8007910:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007914:	4812      	ldr	r0, [pc, #72]	; (8007960 <HAL_RCC_ClockConfig+0x338>)
 8007916:	f7fa fee6 	bl	80026e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <HAL_RCC_ClockConfig+0x33c>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	490e      	ldr	r1, [pc, #56]	; (8007964 <HAL_RCC_ClockConfig+0x33c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800792e:	f000 f887 	bl	8007a40 <HAL_RCC_GetSysClockFreq>
 8007932:	4602      	mov	r2, r0
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCC_ClockConfig+0x33c>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	091b      	lsrs	r3, r3, #4
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	490a      	ldr	r1, [pc, #40]	; (8007968 <HAL_RCC_ClockConfig+0x340>)
 8007940:	5ccb      	ldrb	r3, [r1, r3]
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <HAL_RCC_ClockConfig+0x344>)
 8007948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <HAL_RCC_ClockConfig+0x348>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fa ffec 	bl	800292c <HAL_InitTick>

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	0800bc9c 	.word	0x0800bc9c
 8007964:	40023800 	.word	0x40023800
 8007968:	0800bd88 	.word	0x0800bd88
 800796c:	20000040 	.word	0x20000040
 8007970:	20000044 	.word	0x20000044

08007974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <HAL_RCC_GetHCLKFreq+0x14>)
 800797a:	681b      	ldr	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000040 	.word	0x20000040

0800798c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007990:	f7ff fff0 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8007994:	4602      	mov	r2, r0
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0a9b      	lsrs	r3, r3, #10
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	4903      	ldr	r1, [pc, #12]	; (80079b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a2:	5ccb      	ldrb	r3, [r1, r3]
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40023800 	.word	0x40023800
 80079b0:	0800bd98 	.word	0x0800bd98

080079b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079b8:	f7ff ffdc 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	0b5b      	lsrs	r3, r3, #13
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	4903      	ldr	r1, [pc, #12]	; (80079d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ca:	5ccb      	ldrb	r3, [r1, r3]
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40023800 	.word	0x40023800
 80079d8:	0800bd98 	.word	0x0800bd98

080079dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	220f      	movs	r2, #15
 80079ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0203 	and.w	r2, r3, #3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a10:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a1e:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <HAL_RCC_GetClockConfig+0x60>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	601a      	str	r2, [r3, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	40023c00 	.word	0x40023c00

08007a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a44:	b0ae      	sub	sp, #184	; 0xb8
 8007a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a66:	4bcb      	ldr	r3, [pc, #812]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 030c 	and.w	r3, r3, #12
 8007a6e:	2b0c      	cmp	r3, #12
 8007a70:	f200 8206 	bhi.w	8007e80 <HAL_RCC_GetSysClockFreq+0x440>
 8007a74:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007e81 	.word	0x08007e81
 8007a84:	08007e81 	.word	0x08007e81
 8007a88:	08007e81 	.word	0x08007e81
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	08007e81 	.word	0x08007e81
 8007a94:	08007e81 	.word	0x08007e81
 8007a98:	08007e81 	.word	0x08007e81
 8007a9c:	08007ac1 	.word	0x08007ac1
 8007aa0:	08007e81 	.word	0x08007e81
 8007aa4:	08007e81 	.word	0x08007e81
 8007aa8:	08007e81 	.word	0x08007e81
 8007aac:	08007cb1 	.word	0x08007cb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ab0:	4bb9      	ldr	r3, [pc, #740]	; (8007d98 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007ab6:	e1e7      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ab8:	4bb8      	ldr	r3, [pc, #736]	; (8007d9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007abe:	e1e3      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ac0:	4bb4      	ldr	r3, [pc, #720]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007acc:	4bb1      	ldr	r3, [pc, #708]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d071      	beq.n	8007bbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad8:	4bae      	ldr	r3, [pc, #696]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	099b      	lsrs	r3, r3, #6
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ae4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f04f 0100 	mov.w	r1, #0
 8007b0a:	0159      	lsls	r1, r3, #5
 8007b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b10:	0150      	lsls	r0, r2, #5
 8007b12:	4602      	mov	r2, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	4621      	mov	r1, r4
 8007b18:	1a51      	subs	r1, r2, r1
 8007b1a:	6439      	str	r1, [r7, #64]	; 0x40
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8007b22:	647b      	str	r3, [r7, #68]	; 0x44
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007b30:	4649      	mov	r1, r9
 8007b32:	018b      	lsls	r3, r1, #6
 8007b34:	4641      	mov	r1, r8
 8007b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	018a      	lsls	r2, r1, #6
 8007b3e:	4641      	mov	r1, r8
 8007b40:	1a51      	subs	r1, r2, r1
 8007b42:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b44:	4649      	mov	r1, r9
 8007b46:	eb63 0301 	sbc.w	r3, r3, r1
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007b58:	4649      	mov	r1, r9
 8007b5a:	00cb      	lsls	r3, r1, #3
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b62:	4641      	mov	r1, r8
 8007b64:	00ca      	lsls	r2, r1, #3
 8007b66:	4610      	mov	r0, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30
 8007b72:	462b      	mov	r3, r5
 8007b74:	460a      	mov	r2, r1
 8007b76:	eb42 0303 	adc.w	r3, r2, r3
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007b88:	4629      	mov	r1, r5
 8007b8a:	024b      	lsls	r3, r1, #9
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b92:	4621      	mov	r1, r4
 8007b94:	024a      	lsls	r2, r1, #9
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ba4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ba8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007bac:	f7f8 fb30 	bl	8000210 <__aeabi_uldivmod>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bba:	e067      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bbc:	4b75      	ldr	r3, [pc, #468]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	099b      	lsrs	r3, r3, #6
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f04f 0100 	mov.w	r1, #0
 8007bea:	0159      	lsls	r1, r3, #5
 8007bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bf0:	0150      	lsls	r0, r2, #5
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	1a51      	subs	r1, r2, r1
 8007bfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007c10:	4649      	mov	r1, r9
 8007c12:	018b      	lsls	r3, r1, #6
 8007c14:	4641      	mov	r1, r8
 8007c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	018a      	lsls	r2, r1, #6
 8007c1e:	4641      	mov	r1, r8
 8007c20:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c24:	4649      	mov	r1, r9
 8007c26:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c3e:	4692      	mov	sl, r2
 8007c40:	469b      	mov	fp, r3
 8007c42:	4623      	mov	r3, r4
 8007c44:	eb1a 0303 	adds.w	r3, sl, r3
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007c5e:	4629      	mov	r1, r5
 8007c60:	028b      	lsls	r3, r1, #10
 8007c62:	4621      	mov	r1, r4
 8007c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c68:	4621      	mov	r1, r4
 8007c6a:	028a      	lsls	r2, r1, #10
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c74:	2200      	movs	r2, #0
 8007c76:	673b      	str	r3, [r7, #112]	; 0x70
 8007c78:	677a      	str	r2, [r7, #116]	; 0x74
 8007c7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007c7e:	f7f8 fac7 	bl	8000210 <__aeabi_uldivmod>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4613      	mov	r3, r2
 8007c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c8c:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	3301      	adds	r3, #1
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007cae:	e0eb      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cb0:	4b38      	ldr	r3, [pc, #224]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cbc:	4b35      	ldr	r3, [pc, #212]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d06b      	beq.n	8007da0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cc8:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	099b      	lsrs	r3, r3, #6
 8007cce:	2200      	movs	r2, #0
 8007cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	663b      	str	r3, [r7, #96]	; 0x60
 8007cdc:	2300      	movs	r3, #0
 8007cde:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f04f 0000 	mov.w	r0, #0
 8007cec:	f04f 0100 	mov.w	r1, #0
 8007cf0:	0159      	lsls	r1, r3, #5
 8007cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cf6:	0150      	lsls	r0, r2, #5
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	1a51      	subs	r1, r2, r1
 8007d00:	61b9      	str	r1, [r7, #24]
 8007d02:	4629      	mov	r1, r5
 8007d04:	eb63 0301 	sbc.w	r3, r3, r1
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007d16:	4659      	mov	r1, fp
 8007d18:	018b      	lsls	r3, r1, #6
 8007d1a:	4651      	mov	r1, sl
 8007d1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d20:	4651      	mov	r1, sl
 8007d22:	018a      	lsls	r2, r1, #6
 8007d24:	4651      	mov	r1, sl
 8007d26:	ebb2 0801 	subs.w	r8, r2, r1
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	eb63 0901 	sbc.w	r9, r3, r1
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d44:	4690      	mov	r8, r2
 8007d46:	4699      	mov	r9, r3
 8007d48:	4623      	mov	r3, r4
 8007d4a:	eb18 0303 	adds.w	r3, r8, r3
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	462b      	mov	r3, r5
 8007d52:	eb49 0303 	adc.w	r3, r9, r3
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007d64:	4629      	mov	r1, r5
 8007d66:	024b      	lsls	r3, r1, #9
 8007d68:	4621      	mov	r1, r4
 8007d6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d6e:	4621      	mov	r1, r4
 8007d70:	024a      	lsls	r2, r1, #9
 8007d72:	4610      	mov	r0, r2
 8007d74:	4619      	mov	r1, r3
 8007d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007d80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d84:	f7f8 fa44 	bl	8000210 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d92:	e065      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x420>
 8007d94:	40023800 	.word	0x40023800
 8007d98:	00f42400 	.word	0x00f42400
 8007d9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007da0:	4b3d      	ldr	r3, [pc, #244]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x458>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	099b      	lsrs	r3, r3, #6
 8007da6:	2200      	movs	r2, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	4611      	mov	r1, r2
 8007dac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007db0:	653b      	str	r3, [r7, #80]	; 0x50
 8007db2:	2300      	movs	r3, #0
 8007db4:	657b      	str	r3, [r7, #84]	; 0x54
 8007db6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007dba:	4642      	mov	r2, r8
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	f04f 0000 	mov.w	r0, #0
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	0159      	lsls	r1, r3, #5
 8007dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dcc:	0150      	lsls	r0, r2, #5
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	1a51      	subs	r1, r2, r1
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	4649      	mov	r1, r9
 8007dda:	eb63 0301 	sbc.w	r3, r3, r1
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007dec:	4659      	mov	r1, fp
 8007dee:	018b      	lsls	r3, r1, #6
 8007df0:	4651      	mov	r1, sl
 8007df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007df6:	4651      	mov	r1, sl
 8007df8:	018a      	lsls	r2, r1, #6
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	1a54      	subs	r4, r2, r1
 8007dfe:	4659      	mov	r1, fp
 8007e00:	eb63 0501 	sbc.w	r5, r3, r1
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	00eb      	lsls	r3, r5, #3
 8007e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e12:	00e2      	lsls	r2, r4, #3
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	4643      	mov	r3, r8
 8007e1a:	18e3      	adds	r3, r4, r3
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	464b      	mov	r3, r9
 8007e20:	eb45 0303 	adc.w	r3, r5, r3
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e32:	4629      	mov	r1, r5
 8007e34:	028b      	lsls	r3, r1, #10
 8007e36:	4621      	mov	r1, r4
 8007e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	028a      	lsls	r2, r1, #10
 8007e40:	4610      	mov	r0, r2
 8007e42:	4619      	mov	r1, r3
 8007e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e48:	2200      	movs	r2, #0
 8007e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e52:	f7f8 f9dd 	bl	8000210 <__aeabi_uldivmod>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x458>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	0f1b      	lsrs	r3, r3, #28
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e7e:	e003      	b.n	8007e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	37b8      	adds	r7, #184	; 0xb8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e96:	bf00      	nop
 8007e98:	40023800 	.word	0x40023800
 8007e9c:	00f42400 	.word	0x00f42400

08007ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e347      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d904      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x24>
 8007eba:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8007ebe:	4893      	ldr	r0, [pc, #588]	; (800810c <HAL_RCC_OscConfig+0x26c>)
 8007ec0:	f7fa fc11 	bl	80026e6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8096 	beq.w	8007ffe <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x58>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee2:	d009      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x58>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eec:	d004      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x58>
 8007eee:	f640 5115 	movw	r1, #3349	; 0xd15
 8007ef2:	4886      	ldr	r0, [pc, #536]	; (800810c <HAL_RCC_OscConfig+0x26c>)
 8007ef4:	f7fa fbf7 	bl	80026e6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ef8:	4b85      	ldr	r3, [pc, #532]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 030c 	and.w	r3, r3, #12
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d019      	beq.n	8007f38 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f04:	4b82      	ldr	r3, [pc, #520]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d106      	bne.n	8007f1e <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f10:	4b7f      	ldr	r3, [pc, #508]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f1c:	d00c      	beq.n	8007f38 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f1e:	4b7c      	ldr	r3, [pc, #496]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f26:	2b0c      	cmp	r3, #12
 8007f28:	d112      	bne.n	8007f50 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f2a:	4b79      	ldr	r3, [pc, #484]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f36:	d10b      	bne.n	8007f50 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f38:	4b75      	ldr	r3, [pc, #468]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d05b      	beq.n	8007ffc <HAL_RCC_OscConfig+0x15c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d157      	bne.n	8007ffc <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e2f8      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f58:	d106      	bne.n	8007f68 <HAL_RCC_OscConfig+0xc8>
 8007f5a:	4b6d      	ldr	r3, [pc, #436]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a6c      	ldr	r2, [pc, #432]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e01d      	b.n	8007fa4 <HAL_RCC_OscConfig+0x104>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f70:	d10c      	bne.n	8007f8c <HAL_RCC_OscConfig+0xec>
 8007f72:	4b67      	ldr	r3, [pc, #412]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a66      	ldr	r2, [pc, #408]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	4b64      	ldr	r3, [pc, #400]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a63      	ldr	r2, [pc, #396]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	e00b      	b.n	8007fa4 <HAL_RCC_OscConfig+0x104>
 8007f8c:	4b60      	ldr	r3, [pc, #384]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a5f      	ldr	r2, [pc, #380]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	4b5d      	ldr	r3, [pc, #372]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5c      	ldr	r2, [pc, #368]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d013      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fa febe 	bl	8002d2c <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fb4:	f7fa feba 	bl	8002d2c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e2bd      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fc6:	4b52      	ldr	r3, [pc, #328]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x114>
 8007fd2:	e014      	b.n	8007ffe <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fa feaa 	bl	8002d2c <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fdc:	f7fa fea6 	bl	8002d2c <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b64      	cmp	r3, #100	; 0x64
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e2a9      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fee:	4b48      	ldr	r3, [pc, #288]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f0      	bne.n	8007fdc <HAL_RCC_OscConfig+0x13c>
 8007ffa:	e000      	b.n	8007ffe <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 808c 	beq.w	8008124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_RCC_OscConfig+0x186>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d004      	beq.n	8008026 <HAL_RCC_OscConfig+0x186>
 800801c:	f640 514d 	movw	r1, #3405	; 0xd4d
 8008020:	483a      	ldr	r0, [pc, #232]	; (800810c <HAL_RCC_OscConfig+0x26c>)
 8008022:	f7fa fb60 	bl	80026e6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b1f      	cmp	r3, #31
 800802c:	d904      	bls.n	8008038 <HAL_RCC_OscConfig+0x198>
 800802e:	f640 514e 	movw	r1, #3406	; 0xd4e
 8008032:	4836      	ldr	r0, [pc, #216]	; (800810c <HAL_RCC_OscConfig+0x26c>)
 8008034:	f7fa fb57 	bl	80026e6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008038:	4b35      	ldr	r3, [pc, #212]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030c 	and.w	r3, r3, #12
 8008040:	2b00      	cmp	r3, #0
 8008042:	d017      	beq.n	8008074 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008044:	4b32      	ldr	r3, [pc, #200]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800804c:	2b08      	cmp	r3, #8
 800804e:	d105      	bne.n	800805c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008050:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800805c:	4b2c      	ldr	r3, [pc, #176]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008064:	2b0c      	cmp	r3, #12
 8008066:	d11c      	bne.n	80080a2 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008068:	4b29      	ldr	r3, [pc, #164]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d116      	bne.n	80080a2 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008074:	4b26      	ldr	r3, [pc, #152]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <HAL_RCC_OscConfig+0x1ec>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d001      	beq.n	800808c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e25a      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808c:	4b20      	ldr	r3, [pc, #128]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	491d      	ldr	r1, [pc, #116]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a0:	e040      	b.n	8008124 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d020      	beq.n	80080ec <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <HAL_RCC_OscConfig+0x274>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fa fe3c 	bl	8002d2c <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080b8:	f7fa fe38 	bl	8002d2c <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e23b      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0f0      	beq.n	80080b8 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	490a      	ldr	r1, [pc, #40]	; (8008110 <HAL_RCC_OscConfig+0x270>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	600b      	str	r3, [r1, #0]
 80080ea:	e01b      	b.n	8008124 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <HAL_RCC_OscConfig+0x274>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f2:	f7fa fe1b 	bl	8002d2c <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080f8:	e00e      	b.n	8008118 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080fa:	f7fa fe17 	bl	8002d2c <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d907      	bls.n	8008118 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e21a      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
 800810c:	0800bcd4 	.word	0x0800bcd4
 8008110:	40023800 	.word	0x40023800
 8008114:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008118:	4b74      	ldr	r3, [pc, #464]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1ea      	bne.n	80080fa <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0308 	and.w	r3, r3, #8
 800812c:	2b00      	cmp	r3, #0
 800812e:	d03d      	beq.n	80081ac <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_RCC_OscConfig+0x2aa>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d004      	beq.n	800814a <HAL_RCC_OscConfig+0x2aa>
 8008140:	f640 5194 	movw	r1, #3476	; 0xd94
 8008144:	486a      	ldr	r0, [pc, #424]	; (80082f0 <HAL_RCC_OscConfig+0x450>)
 8008146:	f7fa face 	bl	80026e6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d016      	beq.n	8008180 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008152:	4b68      	ldr	r3, [pc, #416]	; (80082f4 <HAL_RCC_OscConfig+0x454>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008158:	f7fa fde8 	bl	8002d2c <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008160:	f7fa fde4 	bl	8002d2c <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e1e7      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008172:	4b5e      	ldr	r3, [pc, #376]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCC_OscConfig+0x2c0>
 800817e:	e015      	b.n	80081ac <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008180:	4b5c      	ldr	r3, [pc, #368]	; (80082f4 <HAL_RCC_OscConfig+0x454>)
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008186:	f7fa fdd1 	bl	8002d2c <HAL_GetTick>
 800818a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800818e:	f7fa fdcd 	bl	8002d2c <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e1d0      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a0:	4b52      	ldr	r3, [pc, #328]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80081a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f0      	bne.n	800818e <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80b0 	beq.w	800831a <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00c      	beq.n	80081e0 <HAL_RCC_OscConfig+0x340>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d008      	beq.n	80081e0 <HAL_RCC_OscConfig+0x340>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d004      	beq.n	80081e0 <HAL_RCC_OscConfig+0x340>
 80081d6:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80081da:	4845      	ldr	r0, [pc, #276]	; (80082f0 <HAL_RCC_OscConfig+0x450>)
 80081dc:	f7fa fa83 	bl	80026e6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081e0:	4b42      	ldr	r3, [pc, #264]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10f      	bne.n	800820c <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ec:	2300      	movs	r3, #0
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	4b3e      	ldr	r3, [pc, #248]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	4a3d      	ldr	r2, [pc, #244]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80081f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081fa:	6413      	str	r3, [r2, #64]	; 0x40
 80081fc:	4b3b      	ldr	r3, [pc, #236]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820c:	4b3a      	ldr	r3, [pc, #232]	; (80082f8 <HAL_RCC_OscConfig+0x458>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d118      	bne.n	800824a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008218:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <HAL_RCC_OscConfig+0x458>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a36      	ldr	r2, [pc, #216]	; (80082f8 <HAL_RCC_OscConfig+0x458>)
 800821e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008224:	f7fa fd82 	bl	8002d2c <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800822c:	f7fa fd7e 	bl	8002d2c <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e181      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823e:	4b2e      	ldr	r3, [pc, #184]	; (80082f8 <HAL_RCC_OscConfig+0x458>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f0      	beq.n	800822c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d106      	bne.n	8008260 <HAL_RCC_OscConfig+0x3c0>
 8008252:	4b26      	ldr	r3, [pc, #152]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	4a25      	ldr	r2, [pc, #148]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6713      	str	r3, [r2, #112]	; 0x70
 800825e:	e01c      	b.n	800829a <HAL_RCC_OscConfig+0x3fa>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b05      	cmp	r3, #5
 8008266:	d10c      	bne.n	8008282 <HAL_RCC_OscConfig+0x3e2>
 8008268:	4b20      	ldr	r3, [pc, #128]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 800826e:	f043 0304 	orr.w	r3, r3, #4
 8008272:	6713      	str	r3, [r2, #112]	; 0x70
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 800827a:	f043 0301 	orr.w	r3, r3, #1
 800827e:	6713      	str	r3, [r2, #112]	; 0x70
 8008280:	e00b      	b.n	800829a <HAL_RCC_OscConfig+0x3fa>
 8008282:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	6713      	str	r3, [r2, #112]	; 0x70
 800828e:	4b17      	ldr	r3, [pc, #92]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	4a16      	ldr	r2, [pc, #88]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 8008294:	f023 0304 	bic.w	r3, r3, #4
 8008298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d015      	beq.n	80082ce <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a2:	f7fa fd43 	bl	8002d2c <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a8:	e00a      	b.n	80082c0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082aa:	f7fa fd3f 	bl	8002d2c <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e140      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <HAL_RCC_OscConfig+0x44c>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0ee      	beq.n	80082aa <HAL_RCC_OscConfig+0x40a>
 80082cc:	e01c      	b.n	8008308 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ce:	f7fa fd2d 	bl	8002d2c <HAL_GetTick>
 80082d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082d4:	e012      	b.n	80082fc <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d6:	f7fa fd29 	bl	8002d2c <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d909      	bls.n	80082fc <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e12a      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
 80082ec:	40023800 	.word	0x40023800
 80082f0:	0800bcd4 	.word	0x0800bcd4
 80082f4:	42470e80 	.word	0x42470e80
 80082f8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082fc:	4b93      	ldr	r3, [pc, #588]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d105      	bne.n	800831a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800830e:	4b8f      	ldr	r3, [pc, #572]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	4a8e      	ldr	r2, [pc, #568]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <HAL_RCC_OscConfig+0x49c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d008      	beq.n	800833c <HAL_RCC_OscConfig+0x49c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d004      	beq.n	800833c <HAL_RCC_OscConfig+0x49c>
 8008332:	f640 6103 	movw	r1, #3587	; 0xe03
 8008336:	4886      	ldr	r0, [pc, #536]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 8008338:	f7fa f9d5 	bl	80026e6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80fd 	beq.w	8008540 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008346:	4b81      	ldr	r3, [pc, #516]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
 800834e:	2b08      	cmp	r3, #8
 8008350:	f000 80b6 	beq.w	80084c0 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b02      	cmp	r3, #2
 800835a:	f040 809a 	bne.w	8008492 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_RCC_OscConfig+0x4da>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800836e:	d004      	beq.n	800837a <HAL_RCC_OscConfig+0x4da>
 8008370:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008374:	4876      	ldr	r0, [pc, #472]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 8008376:	f7fa f9b6 	bl	80026e6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	2b3f      	cmp	r3, #63	; 0x3f
 8008380:	d904      	bls.n	800838c <HAL_RCC_OscConfig+0x4ec>
 8008382:	f640 610d 	movw	r1, #3597	; 0xe0d
 8008386:	4872      	ldr	r0, [pc, #456]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 8008388:	f7fa f9ad 	bl	80026e6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b31      	cmp	r3, #49	; 0x31
 8008392:	d904      	bls.n	800839e <HAL_RCC_OscConfig+0x4fe>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800839c:	d904      	bls.n	80083a8 <HAL_RCC_OscConfig+0x508>
 800839e:	f640 610e 	movw	r1, #3598	; 0xe0e
 80083a2:	486b      	ldr	r0, [pc, #428]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 80083a4:	f7fa f99f 	bl	80026e6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d010      	beq.n	80083d2 <HAL_RCC_OscConfig+0x532>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d00c      	beq.n	80083d2 <HAL_RCC_OscConfig+0x532>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083bc:	2b06      	cmp	r3, #6
 80083be:	d008      	beq.n	80083d2 <HAL_RCC_OscConfig+0x532>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d004      	beq.n	80083d2 <HAL_RCC_OscConfig+0x532>
 80083c8:	f640 610f 	movw	r1, #3599	; 0xe0f
 80083cc:	4860      	ldr	r0, [pc, #384]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 80083ce:	f7fa f98a 	bl	80026e6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d903      	bls.n	80083e2 <HAL_RCC_OscConfig+0x542>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	2b0f      	cmp	r3, #15
 80083e0:	d904      	bls.n	80083ec <HAL_RCC_OscConfig+0x54c>
 80083e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80083e6:	485a      	ldr	r0, [pc, #360]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 80083e8:	f7fa f97d 	bl	80026e6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d903      	bls.n	80083fc <HAL_RCC_OscConfig+0x55c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	2b07      	cmp	r3, #7
 80083fa:	d904      	bls.n	8008406 <HAL_RCC_OscConfig+0x566>
 80083fc:	f640 6111 	movw	r1, #3601	; 0xe11
 8008400:	4853      	ldr	r0, [pc, #332]	; (8008550 <HAL_RCC_OscConfig+0x6b0>)
 8008402:	f7fa f970 	bl	80026e6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008406:	4b53      	ldr	r3, [pc, #332]	; (8008554 <HAL_RCC_OscConfig+0x6b4>)
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7fa fc8e 	bl	8002d2c <HAL_GetTick>
 8008410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008414:	f7fa fc8a 	bl	8002d2c <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e08d      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008426:	4b49      	ldr	r3, [pc, #292]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f0      	bne.n	8008414 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69da      	ldr	r2, [r3, #28]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	019b      	lsls	r3, r3, #6
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	3b01      	subs	r3, #1
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	061b      	lsls	r3, r3, #24
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	071b      	lsls	r3, r3, #28
 800845e:	493b      	ldr	r1, [pc, #236]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008460:	4313      	orrs	r3, r2
 8008462:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008464:	4b3b      	ldr	r3, [pc, #236]	; (8008554 <HAL_RCC_OscConfig+0x6b4>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800846a:	f7fa fc5f 	bl	8002d2c <HAL_GetTick>
 800846e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008470:	e008      	b.n	8008484 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008472:	f7fa fc5b 	bl	8002d2c <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e05e      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008484:	4b31      	ldr	r3, [pc, #196]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0f0      	beq.n	8008472 <HAL_RCC_OscConfig+0x5d2>
 8008490:	e056      	b.n	8008540 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008492:	4b30      	ldr	r3, [pc, #192]	; (8008554 <HAL_RCC_OscConfig+0x6b4>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008498:	f7fa fc48 	bl	8002d2c <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084a0:	f7fa fc44 	bl	8002d2c <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e047      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084b2:	4b26      	ldr	r3, [pc, #152]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x600>
 80084be:	e03f      	b.n	8008540 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e03a      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084cc:	4b1f      	ldr	r3, [pc, #124]	; (800854c <HAL_RCC_OscConfig+0x6ac>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d030      	beq.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d129      	bne.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d122      	bne.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084fc:	4013      	ands	r3, r2
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008504:	4293      	cmp	r3, r2
 8008506:	d119      	bne.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	3b01      	subs	r3, #1
 8008516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008518:	429a      	cmp	r2, r3
 800851a:	d10f      	bne.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008528:	429a      	cmp	r2, r3
 800852a:	d107      	bne.n	800853c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008538:	429a      	cmp	r2, r3
 800853a:	d001      	beq.n	8008540 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40023800 	.word	0x40023800
 8008550:	0800bcd4 	.word	0x0800bcd4
 8008554:	42470060 	.word	0x42470060

08008558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e1a4      	b.n	80088b4 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a72      	ldr	r2, [pc, #456]	; (8008738 <HAL_SPI_Init+0x1e0>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d013      	beq.n	800859c <HAL_SPI_Init+0x44>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a70      	ldr	r2, [pc, #448]	; (800873c <HAL_SPI_Init+0x1e4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00e      	beq.n	800859c <HAL_SPI_Init+0x44>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a6f      	ldr	r2, [pc, #444]	; (8008740 <HAL_SPI_Init+0x1e8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d009      	beq.n	800859c <HAL_SPI_Init+0x44>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a6d      	ldr	r2, [pc, #436]	; (8008744 <HAL_SPI_Init+0x1ec>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_SPI_Init+0x44>
 8008592:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008596:	486c      	ldr	r0, [pc, #432]	; (8008748 <HAL_SPI_Init+0x1f0>)
 8008598:	f7fa f8a5 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <HAL_SPI_Init+0x60>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ac:	d004      	beq.n	80085b8 <HAL_SPI_Init+0x60>
 80085ae:	f240 1141 	movw	r1, #321	; 0x141
 80085b2:	4865      	ldr	r0, [pc, #404]	; (8008748 <HAL_SPI_Init+0x1f0>)
 80085b4:	f7fa f897 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <HAL_SPI_Init+0x86>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c8:	d009      	beq.n	80085de <HAL_SPI_Init+0x86>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d2:	d004      	beq.n	80085de <HAL_SPI_Init+0x86>
 80085d4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80085d8:	485b      	ldr	r0, [pc, #364]	; (8008748 <HAL_SPI_Init+0x1f0>)
 80085da:	f7fa f884 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085e6:	d008      	beq.n	80085fa <HAL_SPI_Init+0xa2>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <HAL_SPI_Init+0xa2>
 80085f0:	f240 1143 	movw	r1, #323	; 0x143
 80085f4:	4854      	ldr	r0, [pc, #336]	; (8008748 <HAL_SPI_Init+0x1f0>)
 80085f6:	f7fa f876 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008602:	d00d      	beq.n	8008620 <HAL_SPI_Init+0xc8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <HAL_SPI_Init+0xc8>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008614:	d004      	beq.n	8008620 <HAL_SPI_Init+0xc8>
 8008616:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800861a:	484b      	ldr	r0, [pc, #300]	; (8008748 <HAL_SPI_Init+0x1f0>)
 800861c:	f7fa f863 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d020      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d01c      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	2b10      	cmp	r3, #16
 8008636:	d018      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	2b18      	cmp	r3, #24
 800863e:	d014      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	2b20      	cmp	r3, #32
 8008646:	d010      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	2b28      	cmp	r3, #40	; 0x28
 800864e:	d00c      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b30      	cmp	r3, #48	; 0x30
 8008656:	d008      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	2b38      	cmp	r3, #56	; 0x38
 800865e:	d004      	beq.n	800866a <HAL_SPI_Init+0x112>
 8008660:	f240 1145 	movw	r1, #325	; 0x145
 8008664:	4838      	ldr	r0, [pc, #224]	; (8008748 <HAL_SPI_Init+0x1f0>)
 8008666:	f7fa f83e 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d008      	beq.n	8008684 <HAL_SPI_Init+0x12c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	d004      	beq.n	8008684 <HAL_SPI_Init+0x12c>
 800867a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800867e:	4832      	ldr	r0, [pc, #200]	; (8008748 <HAL_SPI_Init+0x1f0>)
 8008680:	f7fa f831 	bl	80026e6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d008      	beq.n	800869e <HAL_SPI_Init+0x146>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	2b10      	cmp	r3, #16
 8008692:	d004      	beq.n	800869e <HAL_SPI_Init+0x146>
 8008694:	f240 1147 	movw	r1, #327	; 0x147
 8008698:	482b      	ldr	r0, [pc, #172]	; (8008748 <HAL_SPI_Init+0x1f0>)
 800869a:	f7fa f824 	bl	80026e6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d152      	bne.n	800874c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <HAL_SPI_Init+0x168>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d004      	beq.n	80086c0 <HAL_SPI_Init+0x168>
 80086b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80086ba:	4823      	ldr	r0, [pc, #140]	; (8008748 <HAL_SPI_Init+0x1f0>)
 80086bc:	f7fa f813 	bl	80026e6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_SPI_Init+0x182>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d004      	beq.n	80086da <HAL_SPI_Init+0x182>
 80086d0:	f240 114b 	movw	r1, #331	; 0x14b
 80086d4:	481c      	ldr	r0, [pc, #112]	; (8008748 <HAL_SPI_Init+0x1f0>)
 80086d6:	f7fa f806 	bl	80026e6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e2:	d125      	bne.n	8008730 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d05a      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d056      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d052      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b18      	cmp	r3, #24
 8008702:	d04e      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b20      	cmp	r3, #32
 800870a:	d04a      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	2b28      	cmp	r3, #40	; 0x28
 8008712:	d046      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b30      	cmp	r3, #48	; 0x30
 800871a:	d042      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	2b38      	cmp	r3, #56	; 0x38
 8008722:	d03e      	beq.n	80087a2 <HAL_SPI_Init+0x24a>
 8008724:	f240 114f 	movw	r1, #335	; 0x14f
 8008728:	4807      	ldr	r0, [pc, #28]	; (8008748 <HAL_SPI_Init+0x1f0>)
 800872a:	f7f9 ffdc 	bl	80026e6 <assert_failed>
 800872e:	e038      	b.n	80087a2 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	61da      	str	r2, [r3, #28]
 8008736:	e034      	b.n	80087a2 <HAL_SPI_Init+0x24a>
 8008738:	40013000 	.word	0x40013000
 800873c:	40003800 	.word	0x40003800
 8008740:	40003c00 	.word	0x40003c00
 8008744:	40013400 	.word	0x40013400
 8008748:	0800bd10 	.word	0x0800bd10
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	2b08      	cmp	r3, #8
 800875a:	d01c      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b10      	cmp	r3, #16
 8008762:	d018      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b18      	cmp	r3, #24
 800876a:	d014      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	2b20      	cmp	r3, #32
 8008772:	d010      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	2b28      	cmp	r3, #40	; 0x28
 800877a:	d00c      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b30      	cmp	r3, #48	; 0x30
 8008782:	d008      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b38      	cmp	r3, #56	; 0x38
 800878a:	d004      	beq.n	8008796 <HAL_SPI_Init+0x23e>
 800878c:	f240 1159 	movw	r1, #345	; 0x159
 8008790:	484a      	ldr	r0, [pc, #296]	; (80088bc <HAL_SPI_Init+0x364>)
 8008792:	f7f9 ffa8 	bl	80026e6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d126      	bne.n	8008802 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a40      	ldr	r2, [pc, #256]	; (80088c0 <HAL_SPI_Init+0x368>)
 80087c0:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a3f      	ldr	r2, [pc, #252]	; (80088c4 <HAL_SPI_Init+0x36c>)
 80087c6:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3f      	ldr	r2, [pc, #252]	; (80088c8 <HAL_SPI_Init+0x370>)
 80087cc:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a3e      	ldr	r2, [pc, #248]	; (80088cc <HAL_SPI_Init+0x374>)
 80087d2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a3e      	ldr	r2, [pc, #248]	; (80088d0 <HAL_SPI_Init+0x378>)
 80087d8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a3d      	ldr	r2, [pc, #244]	; (80088d4 <HAL_SPI_Init+0x37c>)
 80087de:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a3d      	ldr	r2, [pc, #244]	; (80088d8 <HAL_SPI_Init+0x380>)
 80087e4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a3c      	ldr	r2, [pc, #240]	; (80088dc <HAL_SPI_Init+0x384>)
 80087ea:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a3a      	ldr	r2, [pc, #232]	; (80088e0 <HAL_SPI_Init+0x388>)
 80087f8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008818:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800882a:	431a      	orrs	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008834:	431a      	orrs	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008866:	ea42 0103 	orr.w	r1, r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 0104 	and.w	r1, r3, #4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	f003 0210 	and.w	r2, r3, #16
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69da      	ldr	r2, [r3, #28]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	0800bd10 	.word	0x0800bd10
 80088c0:	08008e41 	.word	0x08008e41
 80088c4:	08008e55 	.word	0x08008e55
 80088c8:	08008e69 	.word	0x08008e69
 80088cc:	08008e7d 	.word	0x08008e7d
 80088d0:	08008e91 	.word	0x08008e91
 80088d4:	08008ea5 	.word	0x08008ea5
 80088d8:	08008eb9 	.word	0x08008eb9
 80088dc:	08008ecd 	.word	0x08008ecd
 80088e0:	08002769 	.word	0x08002769

080088e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08c      	sub	sp, #48	; 0x30
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088f2:	2301      	movs	r3, #1
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_SPI_TransmitReceive+0x2a>
 8008904:	f240 417c 	movw	r1, #1148	; 0x47c
 8008908:	4884      	ldr	r0, [pc, #528]	; (8008b1c <HAL_SPI_TransmitReceive+0x238>)
 800890a:	f7f9 feec 	bl	80026e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_SPI_TransmitReceive+0x38>
 8008918:	2302      	movs	r3, #2
 800891a:	e18d      	b.n	8008c38 <HAL_SPI_TransmitReceive+0x354>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008924:	f7fa fa02 	bl	8002d2c <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800893a:	887b      	ldrh	r3, [r7, #2]
 800893c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800893e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008942:	2b01      	cmp	r3, #1
 8008944:	d00f      	beq.n	8008966 <HAL_SPI_TransmitReceive+0x82>
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894c:	d107      	bne.n	800895e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <HAL_SPI_TransmitReceive+0x7a>
 8008956:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800895a:	2b04      	cmp	r3, #4
 800895c:	d003      	beq.n	8008966 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800895e:	2302      	movs	r3, #2
 8008960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008964:	e15e      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_SPI_TransmitReceive+0x94>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_SPI_TransmitReceive+0x94>
 8008972:	887b      	ldrh	r3, [r7, #2]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800897e:	e151      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b04      	cmp	r3, #4
 800898a:	d003      	beq.n	8008994 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2205      	movs	r2, #5
 8008990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	887a      	ldrh	r2, [r7, #2]
 80089a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	887a      	ldrh	r2, [r7, #2]
 80089aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	887a      	ldrh	r2, [r7, #2]
 80089b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	887a      	ldrh	r2, [r7, #2]
 80089bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d4:	2b40      	cmp	r3, #64	; 0x40
 80089d6:	d007      	beq.n	80089e8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f0:	d178      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_SPI_TransmitReceive+0x11c>
 80089fa:	8b7b      	ldrh	r3, [r7, #26]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d166      	bne.n	8008ace <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	881a      	ldrh	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	1c9a      	adds	r2, r3, #2
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a24:	e053      	b.n	8008ace <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 0302 	and.w	r3, r3, #2
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d11b      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x188>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d016      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x188>
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d113      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	881a      	ldrh	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	1c9a      	adds	r2, r3, #2
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d119      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x1ca>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d014      	beq.n	8008aae <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	b292      	uxth	r2, r2
 8008a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008aae:	f7fa f93d 	bl	8002d2c <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d807      	bhi.n	8008ace <HAL_SPI_TransmitReceive+0x1ea>
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d003      	beq.n	8008ace <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008acc:	e0aa      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1a6      	bne.n	8008a26 <HAL_SPI_TransmitReceive+0x142>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1a1      	bne.n	8008a26 <HAL_SPI_TransmitReceive+0x142>
 8008ae2:	e07f      	b.n	8008be4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_SPI_TransmitReceive+0x20e>
 8008aec:	8b7b      	ldrh	r3, [r7, #26]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d16e      	bne.n	8008bd0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b18:	e05a      	b.n	8008bd0 <HAL_SPI_TransmitReceive+0x2ec>
 8008b1a:	bf00      	nop
 8008b1c:	0800bd10 	.word	0x0800bd10
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d11c      	bne.n	8008b68 <HAL_SPI_TransmitReceive+0x284>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d017      	beq.n	8008b68 <HAL_SPI_TransmitReceive+0x284>
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d114      	bne.n	8008b68 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	7812      	ldrb	r2, [r2, #0]
 8008b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d119      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x2c6>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d014      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008baa:	f7fa f8bf 	bl	8002d2c <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d803      	bhi.n	8008bc2 <HAL_SPI_TransmitReceive+0x2de>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc0:	d102      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x2e4>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bce:	e029      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1a2      	bne.n	8008b20 <HAL_SPI_TransmitReceive+0x23c>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d19d      	bne.n	8008b20 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fa17 	bl	800901c <SPI_EndRxTxTransaction>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c00:	e010      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	e000      	b.n	8008c24 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008c22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3730      	adds	r7, #48	; 0x30
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	099b      	lsrs	r3, r3, #6
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10f      	bne.n	8008c84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	099b      	lsrs	r3, r3, #6
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
    return;
 8008c82:	e0d8      	b.n	8008e36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <HAL_SPI_IRQHandler+0x66>
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	09db      	lsrs	r3, r3, #7
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
    return;
 8008ca4:	e0c7      	b.n	8008e36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10c      	bne.n	8008ccc <HAL_SPI_IRQHandler+0x8c>
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	099b      	lsrs	r3, r3, #6
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 80b5 	beq.w	8008e36 <HAL_SPI_IRQHandler+0x1f6>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	095b      	lsrs	r3, r3, #5
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80ae 	beq.w	8008e36 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	099b      	lsrs	r3, r3, #6
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d023      	beq.n	8008d2e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d011      	beq.n	8008d16 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f043 0204 	orr.w	r2, r3, #4
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	e00b      	b.n	8008d2e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d16:	2300      	movs	r3, #0
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	693b      	ldr	r3, [r7, #16]
        return;
 8008d2c:	e083      	b.n	8008e36 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d014      	beq.n	8008d64 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	f043 0201 	orr.w	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d74:	f043 0208 	orr.w	r2, r3, #8
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	60bb      	str	r3, [r7, #8]
 8008d88:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d050      	beq.n	8008e34 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008da0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <HAL_SPI_IRQHandler+0x17e>
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d034      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0203 	bic.w	r2, r2, #3
 8008dcc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d011      	beq.n	8008dfa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dda:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_SPI_IRQHandler+0x1fc>)
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fb ff66 	bl	8004cb4 <HAL_DMA_Abort_IT>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d017      	beq.n	8008e32 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e06:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <HAL_SPI_IRQHandler+0x1fc>)
 8008e08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fb ff50 	bl	8004cb4 <HAL_DMA_Abort_IT>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008e26:	e004      	b.n	8008e32 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e30:	e000      	b.n	8008e34 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008e32:	bf00      	nop
    return;
 8008e34:	bf00      	nop
  }
}
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	08008ee1 	.word	0x08008ee1

08008e40 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f1c:	f7f9 ff06 	bl	8002d2c <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	4413      	add	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f2c:	f7f9 fefe 	bl	8002d2c <HAL_GetTick>
 8008f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f32:	4b39      	ldr	r3, [pc, #228]	; (8009018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	015b      	lsls	r3, r3, #5
 8008f38:	0d1b      	lsrs	r3, r3, #20
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	fb02 f303 	mul.w	r3, r2, r3
 8008f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f42:	e054      	b.n	8008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d050      	beq.n	8008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f4c:	f7f9 feee 	bl	8002d2c <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d902      	bls.n	8008f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d13d      	bne.n	8008fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f7a:	d111      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f84:	d004      	beq.n	8008f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8e:	d107      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa8:	d10f      	bne.n	8008fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e017      	b.n	800900e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	bf0c      	ite	eq
 8008ffe:	2301      	moveq	r3, #1
 8009000:	2300      	movne	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d19b      	bne.n	8008f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000040 	.word	0x20000040

0800901c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <SPI_EndRxTxTransaction+0x7c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1b      	ldr	r2, [pc, #108]	; (800909c <SPI_EndRxTxTransaction+0x80>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	0d5b      	lsrs	r3, r3, #21
 8009034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009046:	d112      	bne.n	800906e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2200      	movs	r2, #0
 8009050:	2180      	movs	r1, #128	; 0x80
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7ff ff5a 	bl	8008f0c <SPI_WaitFlagStateUntilTimeout>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d016      	beq.n	800908c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f043 0220 	orr.w	r2, r3, #32
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e00f      	b.n	800908e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3b01      	subs	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009084:	2b80      	cmp	r3, #128	; 0x80
 8009086:	d0f2      	beq.n	800906e <SPI_EndRxTxTransaction+0x52>
 8009088:	e000      	b.n	800908c <SPI_EndRxTxTransaction+0x70>
        break;
 800908a:	bf00      	nop
  }

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000040 	.word	0x20000040
 800909c:	165e9f81 	.word	0x165e9f81

080090a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e0c5      	b.n	800923e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a64      	ldr	r2, [pc, #400]	; (8009248 <HAL_TIM_Base_Init+0x1a8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d045      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d040      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a60      	ldr	r2, [pc, #384]	; (800924c <HAL_TIM_Base_Init+0x1ac>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d03b      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a5e      	ldr	r2, [pc, #376]	; (8009250 <HAL_TIM_Base_Init+0x1b0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d036      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a5d      	ldr	r2, [pc, #372]	; (8009254 <HAL_TIM_Base_Init+0x1b4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d031      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a5b      	ldr	r2, [pc, #364]	; (8009258 <HAL_TIM_Base_Init+0x1b8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d02c      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a5a      	ldr	r2, [pc, #360]	; (800925c <HAL_TIM_Base_Init+0x1bc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d027      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a58      	ldr	r2, [pc, #352]	; (8009260 <HAL_TIM_Base_Init+0x1c0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d022      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a57      	ldr	r2, [pc, #348]	; (8009264 <HAL_TIM_Base_Init+0x1c4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d01d      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a55      	ldr	r2, [pc, #340]	; (8009268 <HAL_TIM_Base_Init+0x1c8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d018      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a54      	ldr	r2, [pc, #336]	; (800926c <HAL_TIM_Base_Init+0x1cc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d013      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a52      	ldr	r2, [pc, #328]	; (8009270 <HAL_TIM_Base_Init+0x1d0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00e      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a51      	ldr	r2, [pc, #324]	; (8009274 <HAL_TIM_Base_Init+0x1d4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d009      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a4f      	ldr	r2, [pc, #316]	; (8009278 <HAL_TIM_Base_Init+0x1d8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d004      	beq.n	8009148 <HAL_TIM_Base_Init+0xa8>
 800913e:	f240 1113 	movw	r1, #275	; 0x113
 8009142:	484e      	ldr	r0, [pc, #312]	; (800927c <HAL_TIM_Base_Init+0x1dc>)
 8009144:	f7f9 facf 	bl	80026e6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d014      	beq.n	800917a <HAL_TIM_Base_Init+0xda>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b10      	cmp	r3, #16
 8009156:	d010      	beq.n	800917a <HAL_TIM_Base_Init+0xda>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2b20      	cmp	r3, #32
 800915e:	d00c      	beq.n	800917a <HAL_TIM_Base_Init+0xda>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	d008      	beq.n	800917a <HAL_TIM_Base_Init+0xda>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b60      	cmp	r3, #96	; 0x60
 800916e:	d004      	beq.n	800917a <HAL_TIM_Base_Init+0xda>
 8009170:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009174:	4841      	ldr	r0, [pc, #260]	; (800927c <HAL_TIM_Base_Init+0x1dc>)
 8009176:	f7f9 fab6 	bl	80026e6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <HAL_TIM_Base_Init+0x100>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918a:	d009      	beq.n	80091a0 <HAL_TIM_Base_Init+0x100>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009194:	d004      	beq.n	80091a0 <HAL_TIM_Base_Init+0x100>
 8009196:	f240 1115 	movw	r1, #277	; 0x115
 800919a:	4838      	ldr	r0, [pc, #224]	; (800927c <HAL_TIM_Base_Init+0x1dc>)
 800919c:	f7f9 faa3 	bl	80026e6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d008      	beq.n	80091ba <HAL_TIM_Base_Init+0x11a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	2b80      	cmp	r3, #128	; 0x80
 80091ae:	d004      	beq.n	80091ba <HAL_TIM_Base_Init+0x11a>
 80091b0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80091b4:	4831      	ldr	r0, [pc, #196]	; (800927c <HAL_TIM_Base_Init+0x1dc>)
 80091b6:	f7f9 fa96 	bl	80026e6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f856 	bl	8009280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3304      	adds	r3, #4
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f000 fa4a 	bl	8009680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40001000 	.word	0x40001000
 800925c:	40001400 	.word	0x40001400
 8009260:	40010400 	.word	0x40010400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800
 8009270:	40001800 	.word	0x40001800
 8009274:	40001c00 	.word	0x40001c00
 8009278:	40002000 	.word	0x40002000
 800927c:	0800bd48 	.word	0x0800bd48

08009280 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a51      	ldr	r2, [pc, #324]	; (80093e8 <HAL_TIM_Base_Start_IT+0x154>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d045      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ae:	d040      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a4d      	ldr	r2, [pc, #308]	; (80093ec <HAL_TIM_Base_Start_IT+0x158>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d03b      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a4c      	ldr	r2, [pc, #304]	; (80093f0 <HAL_TIM_Base_Start_IT+0x15c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d036      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a4a      	ldr	r2, [pc, #296]	; (80093f4 <HAL_TIM_Base_Start_IT+0x160>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d031      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a49      	ldr	r2, [pc, #292]	; (80093f8 <HAL_TIM_Base_Start_IT+0x164>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d02c      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a47      	ldr	r2, [pc, #284]	; (80093fc <HAL_TIM_Base_Start_IT+0x168>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d027      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a46      	ldr	r2, [pc, #280]	; (8009400 <HAL_TIM_Base_Start_IT+0x16c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d022      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a44      	ldr	r2, [pc, #272]	; (8009404 <HAL_TIM_Base_Start_IT+0x170>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01d      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a43      	ldr	r2, [pc, #268]	; (8009408 <HAL_TIM_Base_Start_IT+0x174>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d018      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a41      	ldr	r2, [pc, #260]	; (800940c <HAL_TIM_Base_Start_IT+0x178>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a40      	ldr	r2, [pc, #256]	; (8009410 <HAL_TIM_Base_Start_IT+0x17c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00e      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a3e      	ldr	r2, [pc, #248]	; (8009414 <HAL_TIM_Base_Start_IT+0x180>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a3d      	ldr	r2, [pc, #244]	; (8009418 <HAL_TIM_Base_Start_IT+0x184>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_TIM_Base_Start_IT+0x9e>
 8009328:	f240 11cf 	movw	r1, #463	; 0x1cf
 800932c:	483b      	ldr	r0, [pc, #236]	; (800941c <HAL_TIM_Base_Start_IT+0x188>)
 800932e:	f7f9 f9da 	bl	80026e6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b01      	cmp	r3, #1
 800933c:	d001      	beq.n	8009342 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e04e      	b.n	80093e0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f042 0201 	orr.w	r2, r2, #1
 8009358:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a22      	ldr	r2, [pc, #136]	; (80093e8 <HAL_TIM_Base_Start_IT+0x154>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d022      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d01d      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <HAL_TIM_Base_Start_IT+0x158>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d018      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <HAL_TIM_Base_Start_IT+0x15c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1b      	ldr	r2, [pc, #108]	; (80093f4 <HAL_TIM_Base_Start_IT+0x160>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <HAL_TIM_Base_Start_IT+0x16c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <HAL_TIM_Base_Start_IT+0x170>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x116>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <HAL_TIM_Base_Start_IT+0x17c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d111      	bne.n	80093ce <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	d010      	beq.n	80093de <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093cc:	e007      	b.n	80093de <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0201 	orr.w	r2, r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40000400 	.word	0x40000400
 80093f0:	40000800 	.word	0x40000800
 80093f4:	40000c00 	.word	0x40000c00
 80093f8:	40001000 	.word	0x40001000
 80093fc:	40001400 	.word	0x40001400
 8009400:	40010400 	.word	0x40010400
 8009404:	40014000 	.word	0x40014000
 8009408:	40014400 	.word	0x40014400
 800940c:	40014800 	.word	0x40014800
 8009410:	40001800 	.word	0x40001800
 8009414:	40001c00 	.word	0x40001c00
 8009418:	40002000 	.word	0x40002000
 800941c:	0800bd48 	.word	0x0800bd48

08009420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0202 	mvn.w	r2, #2
 800944c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f8ee 	bl	8009644 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f8e0 	bl	8009630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8f1 	bl	8009658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b04      	cmp	r3, #4
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0204 	mvn.w	r2, #4
 80094a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f8c4 	bl	8009644 <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f8b6 	bl	8009630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f8c7 	bl	8009658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0308 	and.w	r3, r3, #8
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0208 	mvn.w	r2, #8
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2204      	movs	r2, #4
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f89a 	bl	8009644 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f88c 	bl	8009630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f89d 	bl	8009658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d122      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b10      	cmp	r3, #16
 800953e:	d11b      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0210 	mvn.w	r2, #16
 8009548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2208      	movs	r2, #8
 800954e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f870 	bl	8009644 <HAL_TIM_IC_CaptureCallback>
 8009564:	e005      	b.n	8009572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f862 	bl	8009630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f873 	bl	8009658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b01      	cmp	r3, #1
 8009584:	d10e      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	d107      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0201 	mvn.w	r2, #1
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7f9 f88a 	bl	80026b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d10e      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f902 	bl	80097d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d10e      	bne.n	80095fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d107      	bne.n	80095fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f838 	bl	800966c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b20      	cmp	r3, #32
 8009608:	d10e      	bne.n	8009628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b20      	cmp	r3, #32
 8009616:	d107      	bne.n	8009628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0220 	mvn.w	r2, #32
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8cc 	bl	80097c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a40      	ldr	r2, [pc, #256]	; (8009794 <TIM_Base_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d00f      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a3d      	ldr	r2, [pc, #244]	; (8009798 <TIM_Base_SetConfig+0x118>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00b      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a3c      	ldr	r2, [pc, #240]	; (800979c <TIM_Base_SetConfig+0x11c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d007      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a3b      	ldr	r2, [pc, #236]	; (80097a0 <TIM_Base_SetConfig+0x120>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a3a      	ldr	r2, [pc, #232]	; (80097a4 <TIM_Base_SetConfig+0x124>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d108      	bne.n	80096d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a2f      	ldr	r2, [pc, #188]	; (8009794 <TIM_Base_SetConfig+0x114>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d02b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e0:	d027      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a2c      	ldr	r2, [pc, #176]	; (8009798 <TIM_Base_SetConfig+0x118>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d023      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a2b      	ldr	r2, [pc, #172]	; (800979c <TIM_Base_SetConfig+0x11c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d01f      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2a      	ldr	r2, [pc, #168]	; (80097a0 <TIM_Base_SetConfig+0x120>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a29      	ldr	r2, [pc, #164]	; (80097a4 <TIM_Base_SetConfig+0x124>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d017      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a28      	ldr	r2, [pc, #160]	; (80097a8 <TIM_Base_SetConfig+0x128>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a27      	ldr	r2, [pc, #156]	; (80097ac <TIM_Base_SetConfig+0x12c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <TIM_Base_SetConfig+0x130>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a25      	ldr	r2, [pc, #148]	; (80097b4 <TIM_Base_SetConfig+0x134>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a24      	ldr	r2, [pc, #144]	; (80097b8 <TIM_Base_SetConfig+0x138>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_Base_SetConfig+0xb2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a23      	ldr	r2, [pc, #140]	; (80097bc <TIM_Base_SetConfig+0x13c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d108      	bne.n	8009744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a0a      	ldr	r2, [pc, #40]	; (8009794 <TIM_Base_SetConfig+0x114>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d003      	beq.n	8009778 <TIM_Base_SetConfig+0xf8>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <TIM_Base_SetConfig+0x124>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d103      	bne.n	8009780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	615a      	str	r2, [r3, #20]
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000
 8009798:	40000400 	.word	0x40000400
 800979c:	40000800 	.word	0x40000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	40010400 	.word	0x40010400
 80097a8:	40014000 	.word	0x40014000
 80097ac:	40014400 	.word	0x40014400
 80097b0:	40014800 	.word	0x40014800
 80097b4:	40001800 	.word	0x40001800
 80097b8:	40001c00 	.word	0x40001c00
 80097bc:	40002000 	.word	0x40002000

080097c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fe:	d10e      	bne.n	800981e <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b01      	cmp	r3, #1
 800980c:	d107      	bne.n	800981e <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f06f 0201 	mvn.w	r2, #1
 8009816:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f804 	bl	8009826 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	4603      	mov	r3, r0
 8009842:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800984c:	2b84      	cmp	r3, #132	; 0x84
 800984e:	d005      	beq.n	800985c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009850:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	3303      	adds	r3, #3
 800985a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800985c:	68fb      	ldr	r3, [r7, #12]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800986e:	f000 fef9 	bl	800a664 <vTaskStartScheduler>
  
  return osOK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	bd80      	pop	{r7, pc}

08009878 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987a:	b089      	sub	sp, #36	; 0x24
 800987c:	af04      	add	r7, sp, #16
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d020      	beq.n	80098cc <osThreadCreate+0x54>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d01c      	beq.n	80098cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685c      	ldr	r4, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681d      	ldr	r5, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691e      	ldr	r6, [r3, #16]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff ffc8 	bl	800983a <makeFreeRtosPriority>
 80098aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098b4:	9202      	str	r2, [sp, #8]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	9100      	str	r1, [sp, #0]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	4632      	mov	r2, r6
 80098be:	4629      	mov	r1, r5
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fca7 	bl	800a214 <xTaskCreateStatic>
 80098c6:	4603      	mov	r3, r0
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	e01c      	b.n	8009906 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685c      	ldr	r4, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80098d8:	b29e      	uxth	r6, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff ffaa 	bl	800983a <makeFreeRtosPriority>
 80098e6:	4602      	mov	r2, r0
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	9200      	str	r2, [sp, #0]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	4632      	mov	r2, r6
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fce9 	bl	800a2ce <xTaskCreate>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d001      	beq.n	8009906 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	e000      	b.n	8009908 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f103 0208 	add.w	r2, r3, #8
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f04f 32ff 	mov.w	r2, #4294967295
 8009928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f103 0208 	add.w	r2, r3, #8
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f103 0208 	add.w	r2, r3, #8
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800996a:	b480      	push	{r7}
 800996c:	b085      	sub	sp, #20
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c8:	d103      	bne.n	80099d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e00c      	b.n	80099ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3308      	adds	r3, #8
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e002      	b.n	80099e0 <vListInsert+0x2e>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d2f6      	bcs.n	80099da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	601a      	str	r2, [r3, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6892      	ldr	r2, [r2, #8]
 8009a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6852      	ldr	r2, [r2, #4]
 8009a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d103      	bne.n	8009a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	1e5a      	subs	r2, r3, #1
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60bb      	str	r3, [r7, #8]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009aa2:	f001 fc37 	bl	800b314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	441a      	add	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	68f9      	ldr	r1, [r7, #12]
 8009ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ad8:	fb01 f303 	mul.w	r3, r1, r3
 8009adc:	441a      	add	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	22ff      	movs	r2, #255	; 0xff
 8009ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	22ff      	movs	r2, #255	; 0xff
 8009aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d114      	bne.n	8009b22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01a      	beq.n	8009b36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3310      	adds	r3, #16
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f80f 	bl	800ab28 <xTaskRemoveFromEventList>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <xQueueGenericReset+0xcc>)
 8009b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	e009      	b.n	8009b36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3310      	adds	r3, #16
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fef2 	bl	8009910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3324      	adds	r3, #36	; 0x24
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff feed 	bl	8009910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b36:	f001 fc1d 	bl	800b374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b3a:	2301      	movs	r3, #1
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	4613      	mov	r3, r2
 8009b54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	613b      	str	r3, [r7, #16]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	fb02 f303 	mul.w	r3, r2, r3
 8009b7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3348      	adds	r3, #72	; 0x48
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 fca9 	bl	800b4d8 <pvPortMalloc>
 8009b86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	3348      	adds	r3, #72	; 0x48
 8009b96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ba0:	79fa      	ldrb	r2, [r7, #7]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	68b9      	ldr	r1, [r7, #8]
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f805 	bl	8009bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bea:	2101      	movs	r1, #1
 8009bec:	69b8      	ldr	r0, [r7, #24]
 8009bee:	f7ff ff43 	bl	8009a78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	; 0x38
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <xQueueGenericSend+0x32>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d103      	bne.n	8009c3c <xQueueGenericSend+0x40>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <xQueueGenericSend+0x44>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <xQueueGenericSend+0x46>
 8009c40:	2300      	movs	r3, #0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <xQueueGenericSend+0x60>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d103      	bne.n	8009c6a <xQueueGenericSend+0x6e>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d101      	bne.n	8009c6e <xQueueGenericSend+0x72>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <xQueueGenericSend+0x74>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10a      	bne.n	8009c8a <xQueueGenericSend+0x8e>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	623b      	str	r3, [r7, #32]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c8a:	f001 f90d 	bl	800aea8 <xTaskGetSchedulerState>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <xQueueGenericSend+0x9e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <xQueueGenericSend+0xa2>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e000      	b.n	8009ca0 <xQueueGenericSend+0xa4>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xQueueGenericSend+0xbe>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	61fb      	str	r3, [r7, #28]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cba:	f001 fb2b 	bl	800b314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d302      	bcc.n	8009cd0 <xQueueGenericSend+0xd4>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d129      	bne.n	8009d24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cd6:	f000 f98d 	bl	8009ff4 <prvCopyDataToQueue>
 8009cda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d010      	beq.n	8009d06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	3324      	adds	r3, #36	; 0x24
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 ff1d 	bl	800ab28 <xTaskRemoveFromEventList>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d013      	beq.n	8009d1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cf4:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <xQueueGenericSend+0x1f8>)
 8009cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	e00a      	b.n	8009d1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d007      	beq.n	8009d1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d0c:	4b39      	ldr	r3, [pc, #228]	; (8009df4 <xQueueGenericSend+0x1f8>)
 8009d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d1c:	f001 fb2a 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e063      	b.n	8009dec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d2a:	f001 fb23 	bl	800b374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e05c      	b.n	8009dec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d38:	f107 0314 	add.w	r3, r7, #20
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 ff55 	bl	800abec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d46:	f001 fb15 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d4a:	f000 fcf5 	bl	800a738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d4e:	f001 fae1 	bl	800b314 <vPortEnterCritical>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d58:	b25b      	sxtb	r3, r3
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5e:	d103      	bne.n	8009d68 <xQueueGenericSend+0x16c>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d74:	d103      	bne.n	8009d7e <xQueueGenericSend+0x182>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d7e:	f001 faf9 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d82:	1d3a      	adds	r2, r7, #4
 8009d84:	f107 0314 	add.w	r3, r7, #20
 8009d88:	4611      	mov	r1, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 ff44 	bl	800ac18 <xTaskCheckForTimeOut>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d124      	bne.n	8009de0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d98:	f000 fa24 	bl	800a1e4 <prvIsQueueFull>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d018      	beq.n	8009dd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	3310      	adds	r3, #16
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fe98 	bl	800aae0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db2:	f000 f9af 	bl	800a114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009db6:	f000 fccd 	bl	800a754 <xTaskResumeAll>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f47f af7c 	bne.w	8009cba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009dc2:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <xQueueGenericSend+0x1f8>)
 8009dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	e772      	b.n	8009cba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd6:	f000 f99d 	bl	800a114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dda:	f000 fcbb 	bl	800a754 <xTaskResumeAll>
 8009dde:	e76c      	b.n	8009cba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009de2:	f000 f997 	bl	800a114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009de6:	f000 fcb5 	bl	800a754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3738      	adds	r7, #56	; 0x38
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	e000ed04 	.word	0xe000ed04

08009df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08c      	sub	sp, #48	; 0x30
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e04:	2300      	movs	r3, #0
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <xQueueReceive+0x30>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	623b      	str	r3, [r7, #32]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d103      	bne.n	8009e36 <xQueueReceive+0x3e>
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <xQueueReceive+0x42>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <xQueueReceive+0x44>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xQueueReceive+0x5e>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	61fb      	str	r3, [r7, #28]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e56:	f001 f827 	bl	800aea8 <xTaskGetSchedulerState>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <xQueueReceive+0x6e>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <xQueueReceive+0x72>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueReceive+0x74>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueReceive+0x8e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	61bb      	str	r3, [r7, #24]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e86:	f001 fa45 	bl	800b314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01f      	beq.n	8009ed6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9a:	f000 f915 	bl	800a0c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1e5a      	subs	r2, r3, #1
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00f      	beq.n	8009ece <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	3310      	adds	r3, #16
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fe38 	bl	800ab28 <xTaskRemoveFromEventList>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ebe:	4b3d      	ldr	r3, [pc, #244]	; (8009fb4 <xQueueReceive+0x1bc>)
 8009ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ece:	f001 fa51 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e069      	b.n	8009faa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009edc:	f001 fa4a 	bl	800b374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e062      	b.n	8009faa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d106      	bne.n	8009ef8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009eea:	f107 0310 	add.w	r3, r7, #16
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fe7c 	bl	800abec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ef8:	f001 fa3c 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009efc:	f000 fc1c 	bl	800a738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f00:	f001 fa08 	bl	800b314 <vPortEnterCritical>
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f0a:	b25b      	sxtb	r3, r3
 8009f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f10:	d103      	bne.n	8009f1a <xQueueReceive+0x122>
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d103      	bne.n	8009f30 <xQueueReceive+0x138>
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f30:	f001 fa20 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f34:	1d3a      	adds	r2, r7, #4
 8009f36:	f107 0310 	add.w	r3, r7, #16
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fe6b 	bl	800ac18 <xTaskCheckForTimeOut>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d123      	bne.n	8009f90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f4a:	f000 f935 	bl	800a1b8 <prvIsQueueEmpty>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d017      	beq.n	8009f84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fdbf 	bl	800aae0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f64:	f000 f8d6 	bl	800a114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f68:	f000 fbf4 	bl	800a754 <xTaskResumeAll>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d189      	bne.n	8009e86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f72:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <xQueueReceive+0x1bc>)
 8009f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	e780      	b.n	8009e86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f86:	f000 f8c5 	bl	800a114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f8a:	f000 fbe3 	bl	800a754 <xTaskResumeAll>
 8009f8e:	e77a      	b.n	8009e86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f92:	f000 f8bf 	bl	800a114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f96:	f000 fbdd 	bl	800a754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9c:	f000 f90c 	bl	800a1b8 <prvIsQueueEmpty>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f43f af6f 	beq.w	8009e86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3730      	adds	r7, #48	; 0x30
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	e000ed04 	.word	0xe000ed04

08009fb8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	60bb      	str	r3, [r7, #8]
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009fdc:	f001 f99a 	bl	800b314 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009fe6:	f001 f9c5 	bl	800b374 <vPortExitCritical>

	return uxReturn;
 8009fea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10d      	bne.n	800a02e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d14d      	bne.n	800a0b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 ff60 	bl	800aee4 <xTaskPriorityDisinherit>
 800a024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	e043      	b.n	800a0b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d119      	bne.n	800a068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6858      	ldr	r0, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	461a      	mov	r2, r3
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	f001 fc58 	bl	800b8f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	441a      	add	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d32b      	bcc.n	800a0b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	e026      	b.n	800a0b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68d8      	ldr	r0, [r3, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	461a      	mov	r2, r3
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	f001 fc3e 	bl	800b8f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	425b      	negs	r3, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d207      	bcs.n	800a0a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	425b      	negs	r3, r3
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d105      	bne.n	800a0b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0be:	697b      	ldr	r3, [r7, #20]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d018      	beq.n	800a10c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68da      	ldr	r2, [r3, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	441a      	add	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d303      	bcc.n	800a0fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68d9      	ldr	r1, [r3, #12]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	461a      	mov	r2, r3
 800a106:	6838      	ldr	r0, [r7, #0]
 800a108:	f001 fbf4 	bl	800b8f4 <memcpy>
	}
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a11c:	f001 f8fa 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a128:	e011      	b.n	800a14e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d012      	beq.n	800a158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	3324      	adds	r3, #36	; 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fcf6 	bl	800ab28 <xTaskRemoveFromEventList>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a142:	f000 fdcb 	bl	800acdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	3b01      	subs	r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dce9      	bgt.n	800a12a <prvUnlockQueue+0x16>
 800a156:	e000      	b.n	800a15a <prvUnlockQueue+0x46>
					break;
 800a158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	22ff      	movs	r2, #255	; 0xff
 800a15e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a162:	f001 f907 	bl	800b374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a166:	f001 f8d5 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a172:	e011      	b.n	800a198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d012      	beq.n	800a1a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3310      	adds	r3, #16
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fcd1 	bl	800ab28 <xTaskRemoveFromEventList>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a18c:	f000 fda6 	bl	800acdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	3b01      	subs	r3, #1
 800a194:	b2db      	uxtb	r3, r3
 800a196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dce9      	bgt.n	800a174 <prvUnlockQueue+0x60>
 800a1a0:	e000      	b.n	800a1a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	22ff      	movs	r2, #255	; 0xff
 800a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1ac:	f001 f8e2 	bl	800b374 <vPortExitCritical>
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1c0:	f001 f8a8 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	e001      	b.n	800a1d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1d6:	f001 f8cd 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800a1da:	68fb      	ldr	r3, [r7, #12]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1ec:	f001 f892 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d102      	bne.n	800a202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e001      	b.n	800a206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a206:	f001 f8b5 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800a20a:	68fb      	ldr	r3, [r7, #12]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08e      	sub	sp, #56	; 0x38
 800a218:	af04      	add	r7, sp, #16
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	623b      	str	r3, [r7, #32]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10a      	bne.n	800a25a <xTaskCreateStatic+0x46>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	61fb      	str	r3, [r7, #28]
}
 800a256:	bf00      	nop
 800a258:	e7fe      	b.n	800a258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a25a:	23b4      	movs	r3, #180	; 0xb4
 800a25c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2bb4      	cmp	r3, #180	; 0xb4
 800a262:	d00a      	beq.n	800a27a <xTaskCreateStatic+0x66>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61bb      	str	r3, [r7, #24]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a27a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01e      	beq.n	800a2c0 <xTaskCreateStatic+0xac>
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01b      	beq.n	800a2c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	2202      	movs	r2, #2
 800a296:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a29a:	2300      	movs	r3, #0
 800a29c:	9303      	str	r3, [sp, #12]
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	9302      	str	r3, [sp, #8]
 800a2a2:	f107 0314 	add.w	r3, r7, #20
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 f850 	bl	800a358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2ba:	f000 f8eb 	bl	800a494 <prvAddNewTaskToReadyList>
 800a2be:	e001      	b.n	800a2c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2c4:	697b      	ldr	r3, [r7, #20]
	}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3728      	adds	r7, #40	; 0x28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b08c      	sub	sp, #48	; 0x30
 800a2d2:	af04      	add	r7, sp, #16
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	603b      	str	r3, [r7, #0]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 f8f8 	bl	800b4d8 <pvPortMalloc>
 800a2e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00e      	beq.n	800a30e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2f0:	20b4      	movs	r0, #180	; 0xb4
 800a2f2:	f001 f8f1 	bl	800b4d8 <pvPortMalloc>
 800a2f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	631a      	str	r2, [r3, #48]	; 0x30
 800a304:	e005      	b.n	800a312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a306:	6978      	ldr	r0, [r7, #20]
 800a308:	f001 f9b2 	bl	800b670 <vPortFree>
 800a30c:	e001      	b.n	800a312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d017      	beq.n	800a348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a320:	88fa      	ldrh	r2, [r7, #6]
 800a322:	2300      	movs	r3, #0
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68b9      	ldr	r1, [r7, #8]
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 f80e 	bl	800a358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a33c:	69f8      	ldr	r0, [r7, #28]
 800a33e:	f000 f8a9 	bl	800a494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a342:	2301      	movs	r3, #1
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	e002      	b.n	800a34e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a34e:	69bb      	ldr	r3, [r7, #24]
	}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a370:	3b01      	subs	r3, #1
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f023 0307 	bic.w	r3, r3, #7
 800a37e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	617b      	str	r3, [r7, #20]
}
 800a39c:	bf00      	nop
 800a39e:	e7fe      	b.n	800a39e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01f      	beq.n	800a3e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61fb      	str	r3, [r7, #28]
 800a3aa:	e012      	b.n	800a3d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	7819      	ldrb	r1, [r3, #0]
 800a3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	3334      	adds	r3, #52	; 0x34
 800a3bc:	460a      	mov	r2, r1
 800a3be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d9e9      	bls.n	800a3ac <prvInitialiseNewTask+0x54>
 800a3d8:	e000      	b.n	800a3dc <prvInitialiseNewTask+0x84>
			{
				break;
 800a3da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3e4:	e003      	b.n	800a3ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	2b06      	cmp	r3, #6
 800a3f2:	d901      	bls.n	800a3f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3f4:	2306      	movs	r3, #6
 800a3f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a402:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	2200      	movs	r2, #0
 800a408:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	3304      	adds	r3, #4
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fa9e 	bl	8009950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	3318      	adds	r3, #24
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff fa99 	bl	8009950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	f1c3 0207 	rsb	r2, r3, #7
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	334c      	adds	r3, #76	; 0x4c
 800a448:	2260      	movs	r2, #96	; 0x60
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fa5f 	bl	800b910 <memset>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <prvInitialiseNewTask+0x130>)
 800a456:	651a      	str	r2, [r3, #80]	; 0x50
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	4a0c      	ldr	r2, [pc, #48]	; (800a48c <prvInitialiseNewTask+0x134>)
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	4a0b      	ldr	r2, [pc, #44]	; (800a490 <prvInitialiseNewTask+0x138>)
 800a462:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	69b8      	ldr	r0, [r7, #24]
 800a46a:	f000 fe27 	bl	800b0bc <pxPortInitialiseStack>
 800a46e:	4602      	mov	r2, r0
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a47e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a480:	bf00      	nop
 800a482:	3720      	adds	r7, #32
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	0800bdc8 	.word	0x0800bdc8
 800a48c:	0800bde8 	.word	0x0800bde8
 800a490:	0800bda8 	.word	0x0800bda8

0800a494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a49c:	f000 ff3a 	bl	800b314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4a0:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	4a29      	ldr	r2, [pc, #164]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4aa:	4b29      	ldr	r3, [pc, #164]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4b2:	4a27      	ldr	r2, [pc, #156]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4b8:	4b24      	ldr	r3, [pc, #144]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d110      	bne.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4c0:	f000 fc30 	bl	800ad24 <prvInitialiseTaskLists>
 800a4c4:	e00d      	b.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4c6:	4b23      	ldr	r3, [pc, #140]	; (800a554 <prvAddNewTaskToReadyList+0xc0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4ce:	4b20      	ldr	r3, [pc, #128]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d802      	bhi.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <prvAddNewTaskToReadyList+0xc4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	4a1b      	ldr	r2, [pc, #108]	; (800a558 <prvAddNewTaskToReadyList+0xc4>)
 800a4ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	409a      	lsls	r2, r3
 800a4f4:	4b19      	ldr	r3, [pc, #100]	; (800a55c <prvAddNewTaskToReadyList+0xc8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	4a18      	ldr	r2, [pc, #96]	; (800a55c <prvAddNewTaskToReadyList+0xc8>)
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a15      	ldr	r2, [pc, #84]	; (800a560 <prvAddNewTaskToReadyList+0xcc>)
 800a50c:	441a      	add	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7ff fa28 	bl	800996a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a51a:	f000 ff2b 	bl	800b374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <prvAddNewTaskToReadyList+0xc0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	429a      	cmp	r2, r3
 800a532:	d207      	bcs.n	800a544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <prvAddNewTaskToReadyList+0xd0>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200009a4 	.word	0x200009a4
 800a550:	200008a4 	.word	0x200008a4
 800a554:	200009b0 	.word	0x200009b0
 800a558:	200009c0 	.word	0x200009c0
 800a55c:	200009ac 	.word	0x200009ac
 800a560:	200008a8 	.word	0x200008a8
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	; 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a572:	2300      	movs	r3, #0
 800a574:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	617b      	str	r3, [r7, #20]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <vTaskDelayUntil+0x46>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	613b      	str	r3, [r7, #16]
}
 800a5aa:	bf00      	nop
 800a5ac:	e7fe      	b.n	800a5ac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a5ae:	4b2a      	ldr	r3, [pc, #168]	; (800a658 <vTaskDelayUntil+0xf0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <vTaskDelayUntil+0x64>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60fb      	str	r3, [r7, #12]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a5cc:	f000 f8b4 	bl	800a738 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a5d0:	4b22      	ldr	r3, [pc, #136]	; (800a65c <vTaskDelayUntil+0xf4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	4413      	add	r3, r2
 800a5de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6a3a      	ldr	r2, [r7, #32]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d20b      	bcs.n	800a602 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d211      	bcs.n	800a618 <vTaskDelayUntil+0xb0>
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d90d      	bls.n	800a618 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a600:	e00a      	b.n	800a618 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d303      	bcc.n	800a614 <vTaskDelayUntil+0xac>
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	429a      	cmp	r2, r3
 800a612:	d901      	bls.n	800a618 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a614:	2301      	movs	r3, #1
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d006      	beq.n	800a632 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2100      	movs	r1, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fcdf 	bl	800aff0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a632:	f000 f88f 	bl	800a754 <xTaskResumeAll>
 800a636:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d107      	bne.n	800a64e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a63e:	4b08      	ldr	r3, [pc, #32]	; (800a660 <vTaskDelayUntil+0xf8>)
 800a640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a64e:	bf00      	nop
 800a650:	3728      	adds	r7, #40	; 0x28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	200009cc 	.word	0x200009cc
 800a65c:	200009a8 	.word	0x200009a8
 800a660:	e000ed04 	.word	0xe000ed04

0800a664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a672:	463a      	mov	r2, r7
 800a674:	1d39      	adds	r1, r7, #4
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f7 fcac 	bl	8001fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	9202      	str	r2, [sp, #8]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	2300      	movs	r3, #0
 800a690:	460a      	mov	r2, r1
 800a692:	4921      	ldr	r1, [pc, #132]	; (800a718 <vTaskStartScheduler+0xb4>)
 800a694:	4821      	ldr	r0, [pc, #132]	; (800a71c <vTaskStartScheduler+0xb8>)
 800a696:	f7ff fdbd 	bl	800a214 <xTaskCreateStatic>
 800a69a:	4603      	mov	r3, r0
 800a69c:	4a20      	ldr	r2, [pc, #128]	; (800a720 <vTaskStartScheduler+0xbc>)
 800a69e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6a0:	4b1f      	ldr	r3, [pc, #124]	; (800a720 <vTaskStartScheduler+0xbc>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	e001      	b.n	800a6b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d11b      	bne.n	800a6f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	613b      	str	r3, [r7, #16]
}
 800a6ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6cc:	4b15      	ldr	r3, [pc, #84]	; (800a724 <vTaskStartScheduler+0xc0>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	334c      	adds	r3, #76	; 0x4c
 800a6d2:	4a15      	ldr	r2, [pc, #84]	; (800a728 <vTaskStartScheduler+0xc4>)
 800a6d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6d6:	4b15      	ldr	r3, [pc, #84]	; (800a72c <vTaskStartScheduler+0xc8>)
 800a6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6de:	4b14      	ldr	r3, [pc, #80]	; (800a730 <vTaskStartScheduler+0xcc>)
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6e4:	4b13      	ldr	r3, [pc, #76]	; (800a734 <vTaskStartScheduler+0xd0>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6ea:	f000 fd71 	bl	800b1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6ee:	e00e      	b.n	800a70e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f6:	d10a      	bne.n	800a70e <vTaskStartScheduler+0xaa>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	60fb      	str	r3, [r7, #12]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <vTaskStartScheduler+0xa8>
}
 800a70e:	bf00      	nop
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	0800bd80 	.word	0x0800bd80
 800a71c:	0800acf5 	.word	0x0800acf5
 800a720:	200009c8 	.word	0x200009c8
 800a724:	200008a4 	.word	0x200008a4
 800a728:	20000050 	.word	0x20000050
 800a72c:	200009c4 	.word	0x200009c4
 800a730:	200009b0 	.word	0x200009b0
 800a734:	200009a8 	.word	0x200009a8

0800a738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <vTaskSuspendAll+0x18>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3301      	adds	r3, #1
 800a742:	4a03      	ldr	r2, [pc, #12]	; (800a750 <vTaskSuspendAll+0x18>)
 800a744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a746:	bf00      	nop
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	200009cc 	.word	0x200009cc

0800a754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a75e:	2300      	movs	r3, #0
 800a760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a762:	4b41      	ldr	r3, [pc, #260]	; (800a868 <xTaskResumeAll+0x114>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10a      	bne.n	800a780 <xTaskResumeAll+0x2c>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	603b      	str	r3, [r7, #0]
}
 800a77c:	bf00      	nop
 800a77e:	e7fe      	b.n	800a77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a780:	f000 fdc8 	bl	800b314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a784:	4b38      	ldr	r3, [pc, #224]	; (800a868 <xTaskResumeAll+0x114>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3b01      	subs	r3, #1
 800a78a:	4a37      	ldr	r2, [pc, #220]	; (800a868 <xTaskResumeAll+0x114>)
 800a78c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a78e:	4b36      	ldr	r3, [pc, #216]	; (800a868 <xTaskResumeAll+0x114>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d161      	bne.n	800a85a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a796:	4b35      	ldr	r3, [pc, #212]	; (800a86c <xTaskResumeAll+0x118>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d05d      	beq.n	800a85a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a79e:	e02e      	b.n	800a7fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a0:	4b33      	ldr	r3, [pc, #204]	; (800a870 <xTaskResumeAll+0x11c>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3318      	adds	r3, #24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff f939 	bl	8009a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff f934 	bl	8009a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	4b2b      	ldr	r3, [pc, #172]	; (800a874 <xTaskResumeAll+0x120>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	4a2a      	ldr	r2, [pc, #168]	; (800a874 <xTaskResumeAll+0x120>)
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4a27      	ldr	r2, [pc, #156]	; (800a878 <xTaskResumeAll+0x124>)
 800a7dc:	441a      	add	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f7ff f8c0 	bl	800996a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ee:	4b23      	ldr	r3, [pc, #140]	; (800a87c <xTaskResumeAll+0x128>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d302      	bcc.n	800a7fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a7f8:	4b21      	ldr	r3, [pc, #132]	; (800a880 <xTaskResumeAll+0x12c>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <xTaskResumeAll+0x11c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1cc      	bne.n	800a7a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a80c:	f000 fb2c 	bl	800ae68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a810:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <xTaskResumeAll+0x130>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d010      	beq.n	800a83e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a81c:	f000 f846 	bl	800a8ac <xTaskIncrementTick>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a826:	4b16      	ldr	r3, [pc, #88]	; (800a880 <xTaskResumeAll+0x12c>)
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3b01      	subs	r3, #1
 800a830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f1      	bne.n	800a81c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a838:	4b12      	ldr	r3, [pc, #72]	; (800a884 <xTaskResumeAll+0x130>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a83e:	4b10      	ldr	r3, [pc, #64]	; (800a880 <xTaskResumeAll+0x12c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <xTaskResumeAll+0x134>)
 800a84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a85a:	f000 fd8b 	bl	800b374 <vPortExitCritical>

	return xAlreadyYielded;
 800a85e:	68bb      	ldr	r3, [r7, #8]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200009cc 	.word	0x200009cc
 800a86c:	200009a4 	.word	0x200009a4
 800a870:	20000964 	.word	0x20000964
 800a874:	200009ac 	.word	0x200009ac
 800a878:	200008a8 	.word	0x200008a8
 800a87c:	200008a4 	.word	0x200008a4
 800a880:	200009b8 	.word	0x200009b8
 800a884:	200009b4 	.word	0x200009b4
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a892:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <xTaskGetTickCount+0x1c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a898:	687b      	ldr	r3, [r7, #4]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	200009a8 	.word	0x200009a8

0800a8ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8b6:	4b4e      	ldr	r3, [pc, #312]	; (800a9f0 <xTaskIncrementTick+0x144>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f040 808e 	bne.w	800a9dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8c0:	4b4c      	ldr	r3, [pc, #304]	; (800a9f4 <xTaskIncrementTick+0x148>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8c8:	4a4a      	ldr	r2, [pc, #296]	; (800a9f4 <xTaskIncrementTick+0x148>)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d120      	bne.n	800a916 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8d4:	4b48      	ldr	r3, [pc, #288]	; (800a9f8 <xTaskIncrementTick+0x14c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	603b      	str	r3, [r7, #0]
}
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <xTaskIncrementTick+0x46>
 800a8f4:	4b40      	ldr	r3, [pc, #256]	; (800a9f8 <xTaskIncrementTick+0x14c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	4b40      	ldr	r3, [pc, #256]	; (800a9fc <xTaskIncrementTick+0x150>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a3e      	ldr	r2, [pc, #248]	; (800a9f8 <xTaskIncrementTick+0x14c>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	4a3e      	ldr	r2, [pc, #248]	; (800a9fc <xTaskIncrementTick+0x150>)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	4b3d      	ldr	r3, [pc, #244]	; (800aa00 <xTaskIncrementTick+0x154>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	4a3c      	ldr	r2, [pc, #240]	; (800aa00 <xTaskIncrementTick+0x154>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	f000 faa9 	bl	800ae68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a916:	4b3b      	ldr	r3, [pc, #236]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d348      	bcc.n	800a9b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a920:	4b35      	ldr	r3, [pc, #212]	; (800a9f8 <xTaskIncrementTick+0x14c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92a:	4b36      	ldr	r3, [pc, #216]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295
 800a930:	601a      	str	r2, [r3, #0]
					break;
 800a932:	e03e      	b.n	800a9b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a934:	4b30      	ldr	r3, [pc, #192]	; (800a9f8 <xTaskIncrementTick+0x14c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d203      	bcs.n	800a954 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a94c:	4a2d      	ldr	r2, [pc, #180]	; (800aa04 <xTaskIncrementTick+0x158>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a952:	e02e      	b.n	800a9b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3304      	adds	r3, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff f863 	bl	8009a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	3318      	adds	r3, #24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff f85a 	bl	8009a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	2201      	movs	r2, #1
 800a976:	409a      	lsls	r2, r3
 800a978:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <xTaskIncrementTick+0x15c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	4a22      	ldr	r2, [pc, #136]	; (800aa08 <xTaskIncrementTick+0x15c>)
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <xTaskIncrementTick+0x160>)
 800a990:	441a      	add	r2, r3
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	3304      	adds	r3, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f7fe ffe6 	bl	800996a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <xTaskIncrementTick+0x164>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d3b9      	bcc.n	800a920 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9b0:	e7b6      	b.n	800a920 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9b2:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <xTaskIncrementTick+0x164>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b8:	4914      	ldr	r1, [pc, #80]	; (800aa0c <xTaskIncrementTick+0x160>)
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d901      	bls.n	800a9ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9ce:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <xTaskIncrementTick+0x168>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	e004      	b.n	800a9e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <xTaskIncrementTick+0x16c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <xTaskIncrementTick+0x16c>)
 800a9e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9e6:	697b      	ldr	r3, [r7, #20]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	200009cc 	.word	0x200009cc
 800a9f4:	200009a8 	.word	0x200009a8
 800a9f8:	2000095c 	.word	0x2000095c
 800a9fc:	20000960 	.word	0x20000960
 800aa00:	200009bc 	.word	0x200009bc
 800aa04:	200009c4 	.word	0x200009c4
 800aa08:	200009ac 	.word	0x200009ac
 800aa0c:	200008a8 	.word	0x200008a8
 800aa10:	200008a4 	.word	0x200008a4
 800aa14:	200009b8 	.word	0x200009b8
 800aa18:	200009b4 	.word	0x200009b4

0800aa1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa22:	4b29      	ldr	r3, [pc, #164]	; (800aac8 <vTaskSwitchContext+0xac>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa2a:	4b28      	ldr	r3, [pc, #160]	; (800aacc <vTaskSwitchContext+0xb0>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa30:	e044      	b.n	800aabc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800aa32:	4b26      	ldr	r3, [pc, #152]	; (800aacc <vTaskSwitchContext+0xb0>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa38:	4b25      	ldr	r3, [pc, #148]	; (800aad0 <vTaskSwitchContext+0xb4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	fab3 f383 	clz	r3, r3
 800aa44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	f1c3 031f 	rsb	r3, r3, #31
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	4921      	ldr	r1, [pc, #132]	; (800aad4 <vTaskSwitchContext+0xb8>)
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <vTaskSwitchContext+0x5c>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	607b      	str	r3, [r7, #4]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <vTaskSwitchContext+0x5a>
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4a14      	ldr	r2, [pc, #80]	; (800aad4 <vTaskSwitchContext+0xb8>)
 800aa84:	4413      	add	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	605a      	str	r2, [r3, #4]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d104      	bne.n	800aaa8 <vTaskSwitchContext+0x8c>
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	4a0a      	ldr	r2, [pc, #40]	; (800aad8 <vTaskSwitchContext+0xbc>)
 800aab0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <vTaskSwitchContext+0xbc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	334c      	adds	r3, #76	; 0x4c
 800aab8:	4a08      	ldr	r2, [pc, #32]	; (800aadc <vTaskSwitchContext+0xc0>)
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	bf00      	nop
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	200009cc 	.word	0x200009cc
 800aacc:	200009b8 	.word	0x200009b8
 800aad0:	200009ac 	.word	0x200009ac
 800aad4:	200008a8 	.word	0x200008a8
 800aad8:	200008a4 	.word	0x200008a4
 800aadc:	20000050 	.word	0x20000050

0800aae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60fb      	str	r3, [r7, #12]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab06:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <vTaskPlaceOnEventList+0x44>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3318      	adds	r3, #24
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fe ff4f 	bl	80099b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab14:	2101      	movs	r1, #1
 800ab16:	6838      	ldr	r0, [r7, #0]
 800ab18:	f000 fa6a 	bl	800aff0 <prvAddCurrentTaskToDelayedList>
}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200008a4 	.word	0x200008a4

0800ab28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60fb      	str	r3, [r7, #12]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3318      	adds	r3, #24
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fe ff63 	bl	8009a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab5e:	4b1d      	ldr	r3, [pc, #116]	; (800abd4 <xTaskRemoveFromEventList+0xac>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d11c      	bne.n	800aba0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe ff5a 	bl	8009a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	2201      	movs	r2, #1
 800ab76:	409a      	lsls	r2, r3
 800ab78:	4b17      	ldr	r3, [pc, #92]	; (800abd8 <xTaskRemoveFromEventList+0xb0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	4a16      	ldr	r2, [pc, #88]	; (800abd8 <xTaskRemoveFromEventList+0xb0>)
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4a13      	ldr	r2, [pc, #76]	; (800abdc <xTaskRemoveFromEventList+0xb4>)
 800ab90:	441a      	add	r2, r3
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7fe fee6 	bl	800996a <vListInsertEnd>
 800ab9e:	e005      	b.n	800abac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	3318      	adds	r3, #24
 800aba4:	4619      	mov	r1, r3
 800aba6:	480e      	ldr	r0, [pc, #56]	; (800abe0 <xTaskRemoveFromEventList+0xb8>)
 800aba8:	f7fe fedf 	bl	800996a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <xTaskRemoveFromEventList+0xbc>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d905      	bls.n	800abc6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abba:	2301      	movs	r3, #1
 800abbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abbe:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <xTaskRemoveFromEventList+0xc0>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	e001      	b.n	800abca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800abca:	697b      	ldr	r3, [r7, #20]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	200009cc 	.word	0x200009cc
 800abd8:	200009ac 	.word	0x200009ac
 800abdc:	200008a8 	.word	0x200008a8
 800abe0:	20000964 	.word	0x20000964
 800abe4:	200008a4 	.word	0x200008a4
 800abe8:	200009b8 	.word	0x200009b8

0800abec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abf4:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <vTaskInternalSetTimeOutState+0x24>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <vTaskInternalSetTimeOutState+0x28>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	605a      	str	r2, [r3, #4]
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	200009bc 	.word	0x200009bc
 800ac14:	200009a8 	.word	0x200009a8

0800ac18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	613b      	str	r3, [r7, #16]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	60fb      	str	r3, [r7, #12]
}
 800ac56:	bf00      	nop
 800ac58:	e7fe      	b.n	800ac58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac5a:	f000 fb5b 	bl	800b314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac5e:	4b1d      	ldr	r3, [pc, #116]	; (800acd4 <xTaskCheckForTimeOut+0xbc>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac76:	d102      	bne.n	800ac7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	61fb      	str	r3, [r7, #28]
 800ac7c:	e023      	b.n	800acc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <xTaskCheckForTimeOut+0xc0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d007      	beq.n	800ac9a <xTaskCheckForTimeOut+0x82>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac94:	2301      	movs	r3, #1
 800ac96:	61fb      	str	r3, [r7, #28]
 800ac98:	e015      	b.n	800acc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d20b      	bcs.n	800acbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	1ad2      	subs	r2, r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff ff9b 	bl	800abec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61fb      	str	r3, [r7, #28]
 800acba:	e004      	b.n	800acc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800acc2:	2301      	movs	r3, #1
 800acc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acc6:	f000 fb55 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800acca:	69fb      	ldr	r3, [r7, #28]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	200009a8 	.word	0x200009a8
 800acd8:	200009bc 	.word	0x200009bc

0800acdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <vTaskMissedYield+0x14>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	601a      	str	r2, [r3, #0]
}
 800ace6:	bf00      	nop
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	200009b8 	.word	0x200009b8

0800acf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acfc:	f000 f852 	bl	800ada4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad00:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <prvIdleTask+0x28>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d9f9      	bls.n	800acfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad08:	4b05      	ldr	r3, [pc, #20]	; (800ad20 <prvIdleTask+0x2c>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad18:	e7f0      	b.n	800acfc <prvIdleTask+0x8>
 800ad1a:	bf00      	nop
 800ad1c:	200008a8 	.word	0x200008a8
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	607b      	str	r3, [r7, #4]
 800ad2e:	e00c      	b.n	800ad4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4a12      	ldr	r2, [pc, #72]	; (800ad84 <prvInitialiseTaskLists+0x60>)
 800ad3c:	4413      	add	r3, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fde6 	bl	8009910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3301      	adds	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b06      	cmp	r3, #6
 800ad4e:	d9ef      	bls.n	800ad30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad50:	480d      	ldr	r0, [pc, #52]	; (800ad88 <prvInitialiseTaskLists+0x64>)
 800ad52:	f7fe fddd 	bl	8009910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad56:	480d      	ldr	r0, [pc, #52]	; (800ad8c <prvInitialiseTaskLists+0x68>)
 800ad58:	f7fe fdda 	bl	8009910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad5c:	480c      	ldr	r0, [pc, #48]	; (800ad90 <prvInitialiseTaskLists+0x6c>)
 800ad5e:	f7fe fdd7 	bl	8009910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad62:	480c      	ldr	r0, [pc, #48]	; (800ad94 <prvInitialiseTaskLists+0x70>)
 800ad64:	f7fe fdd4 	bl	8009910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad68:	480b      	ldr	r0, [pc, #44]	; (800ad98 <prvInitialiseTaskLists+0x74>)
 800ad6a:	f7fe fdd1 	bl	8009910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <prvInitialiseTaskLists+0x78>)
 800ad70:	4a05      	ldr	r2, [pc, #20]	; (800ad88 <prvInitialiseTaskLists+0x64>)
 800ad72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad74:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <prvInitialiseTaskLists+0x7c>)
 800ad76:	4a05      	ldr	r2, [pc, #20]	; (800ad8c <prvInitialiseTaskLists+0x68>)
 800ad78:	601a      	str	r2, [r3, #0]
}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200008a8 	.word	0x200008a8
 800ad88:	20000934 	.word	0x20000934
 800ad8c:	20000948 	.word	0x20000948
 800ad90:	20000964 	.word	0x20000964
 800ad94:	20000978 	.word	0x20000978
 800ad98:	20000990 	.word	0x20000990
 800ad9c:	2000095c 	.word	0x2000095c
 800ada0:	20000960 	.word	0x20000960

0800ada4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adaa:	e019      	b.n	800ade0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adac:	f000 fab2 	bl	800b314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb0:	4b10      	ldr	r3, [pc, #64]	; (800adf4 <prvCheckTasksWaitingTermination+0x50>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3304      	adds	r3, #4
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe fe31 	bl	8009a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800adc2:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <prvCheckTasksWaitingTermination+0x54>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4a0b      	ldr	r2, [pc, #44]	; (800adf8 <prvCheckTasksWaitingTermination+0x54>)
 800adca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800adcc:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <prvCheckTasksWaitingTermination+0x58>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3b01      	subs	r3, #1
 800add2:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <prvCheckTasksWaitingTermination+0x58>)
 800add4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800add6:	f000 facd 	bl	800b374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f810 	bl	800ae00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ade0:	4b06      	ldr	r3, [pc, #24]	; (800adfc <prvCheckTasksWaitingTermination+0x58>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e1      	bne.n	800adac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ade8:	bf00      	nop
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000978 	.word	0x20000978
 800adf8:	200009a4 	.word	0x200009a4
 800adfc:	2000098c 	.word	0x2000098c

0800ae00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	334c      	adds	r3, #76	; 0x4c
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fde1 	bl	800b9d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d108      	bne.n	800ae2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fc25 	bl	800b670 <vPortFree>
				vPortFree( pxTCB );
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fc22 	bl	800b670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae2c:	e018      	b.n	800ae60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d103      	bne.n	800ae40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fc19 	bl	800b670 <vPortFree>
	}
 800ae3e:	e00f      	b.n	800ae60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d00a      	beq.n	800ae60 <prvDeleteTCB+0x60>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	60fb      	str	r3, [r7, #12]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <prvDeleteTCB+0x5e>
	}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <prvResetNextTaskUnblockTime+0x38>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae78:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <prvResetNextTaskUnblockTime+0x3c>)
 800ae7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae80:	e008      	b.n	800ae94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae82:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <prvResetNextTaskUnblockTime+0x38>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <prvResetNextTaskUnblockTime+0x3c>)
 800ae92:	6013      	str	r3, [r2, #0]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	2000095c 	.word	0x2000095c
 800aea4:	200009c4 	.word	0x200009c4

0800aea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aeae:	4b0b      	ldr	r3, [pc, #44]	; (800aedc <xTaskGetSchedulerState+0x34>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d102      	bne.n	800aebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	607b      	str	r3, [r7, #4]
 800aeba:	e008      	b.n	800aece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aebc:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <xTaskGetSchedulerState+0x38>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aec4:	2302      	movs	r3, #2
 800aec6:	607b      	str	r3, [r7, #4]
 800aec8:	e001      	b.n	800aece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aeca:	2300      	movs	r3, #0
 800aecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aece:	687b      	ldr	r3, [r7, #4]
	}
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	200009b0 	.word	0x200009b0
 800aee0:	200009cc 	.word	0x200009cc

0800aee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d06e      	beq.n	800afd8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aefa:	4b3a      	ldr	r3, [pc, #232]	; (800afe4 <xTaskPriorityDisinherit+0x100>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	429a      	cmp	r2, r3
 800af02:	d00a      	beq.n	800af1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	60fb      	str	r3, [r7, #12]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	60bb      	str	r3, [r7, #8]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d044      	beq.n	800afd8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af52:	2b00      	cmp	r3, #0
 800af54:	d140      	bne.n	800afd8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe fd62 	bl	8009a24 <uxListRemove>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d115      	bne.n	800af92 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	491f      	ldr	r1, [pc, #124]	; (800afe8 <xTaskPriorityDisinherit+0x104>)
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTaskPriorityDisinherit+0xae>
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	2201      	movs	r2, #1
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43da      	mvns	r2, r3
 800af88:	4b18      	ldr	r3, [pc, #96]	; (800afec <xTaskPriorityDisinherit+0x108>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4013      	ands	r3, r2
 800af8e:	4a17      	ldr	r2, [pc, #92]	; (800afec <xTaskPriorityDisinherit+0x108>)
 800af90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	f1c3 0207 	rsb	r2, r3, #7
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	2201      	movs	r2, #1
 800afac:	409a      	lsls	r2, r3
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <xTaskPriorityDisinherit+0x108>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	4a0d      	ldr	r2, [pc, #52]	; (800afec <xTaskPriorityDisinherit+0x108>)
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <xTaskPriorityDisinherit+0x104>)
 800afc6:	441a      	add	r2, r3
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	3304      	adds	r3, #4
 800afcc:	4619      	mov	r1, r3
 800afce:	4610      	mov	r0, r2
 800afd0:	f7fe fccb 	bl	800996a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afd4:	2301      	movs	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afd8:	697b      	ldr	r3, [r7, #20]
	}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200008a4 	.word	0x200008a4
 800afe8:	200008a8 	.word	0x200008a8
 800afec:	200009ac 	.word	0x200009ac

0800aff0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800affa:	4b29      	ldr	r3, [pc, #164]	; (800b0a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3304      	adds	r3, #4
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fd0c 	bl	8009a24 <uxListRemove>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b012:	4b24      	ldr	r3, [pc, #144]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	2201      	movs	r2, #1
 800b01a:	fa02 f303 	lsl.w	r3, r2, r3
 800b01e:	43da      	mvns	r2, r3
 800b020:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4013      	ands	r3, r2
 800b026:	4a20      	ldr	r2, [pc, #128]	; (800b0a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b028:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d10a      	bne.n	800b048 <prvAddCurrentTaskToDelayedList+0x58>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b038:	4b1a      	ldr	r3, [pc, #104]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3304      	adds	r3, #4
 800b03e:	4619      	mov	r1, r3
 800b040:	481a      	ldr	r0, [pc, #104]	; (800b0ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800b042:	f7fe fc92 	bl	800996a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b046:	e026      	b.n	800b096 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b050:	4b14      	ldr	r3, [pc, #80]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d209      	bcs.n	800b074 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b060:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3304      	adds	r3, #4
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7fe fca0 	bl	80099b2 <vListInsert>
}
 800b072:	e010      	b.n	800b096 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3304      	adds	r3, #4
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7fe fc96 	bl	80099b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b086:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d202      	bcs.n	800b096 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b090:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	6013      	str	r3, [r2, #0]
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	200009a8 	.word	0x200009a8
 800b0a4:	200008a4 	.word	0x200008a4
 800b0a8:	200009ac 	.word	0x200009ac
 800b0ac:	20000990 	.word	0x20000990
 800b0b0:	20000960 	.word	0x20000960
 800b0b4:	2000095c 	.word	0x2000095c
 800b0b8:	200009c4 	.word	0x200009c4

0800b0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3b04      	subs	r3, #4
 800b0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f023 0201 	bic.w	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0ec:	4a0c      	ldr	r2, [pc, #48]	; (800b120 <pxPortInitialiseStack+0x64>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3b14      	subs	r3, #20
 800b0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b04      	subs	r3, #4
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f06f 0202 	mvn.w	r2, #2
 800b10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3b20      	subs	r3, #32
 800b110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b112:	68fb      	ldr	r3, [r7, #12]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	0800b125 	.word	0x0800b125

0800b124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b12e:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvTaskExitError+0x54>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b136:	d00a      	beq.n	800b14e <prvTaskExitError+0x2a>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <prvTaskExitError+0x28>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
}
 800b160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b162:	bf00      	nop
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0fc      	beq.n	800b164 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	2000004c 	.word	0x2000004c
 800b17c:	00000000 	.word	0x00000000

0800b180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <pxCurrentTCBConst2>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f380 8809 	msr	PSP, r0
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8811 	msr	BASEPRI, r0
 800b19a:	4770      	bx	lr
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst2>:
 800b1a0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1a8:	4808      	ldr	r0, [pc, #32]	; (800b1cc <prvPortStartFirstTask+0x24>)
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	6800      	ldr	r0, [r0, #0]
 800b1ae:	f380 8808 	msr	MSP, r0
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8814 	msr	CONTROL, r0
 800b1ba:	b662      	cpsie	i
 800b1bc:	b661      	cpsie	f
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	df00      	svc	0
 800b1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed08 	.word	0xe000ed08

0800b1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d6:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a46      	ldr	r2, [pc, #280]	; (800b2f4 <xPortStartScheduler+0x124>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d10a      	bne.n	800b1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	613b      	str	r3, [r7, #16]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <xPortStartScheduler+0x128>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d10a      	bne.n	800b216 <xPortStartScheduler+0x46>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <xPortStartScheduler+0x12c>)
 800b218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	4b31      	ldr	r3, [pc, #196]	; (800b300 <xPortStartScheduler+0x130>)
 800b23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b23e:	4b31      	ldr	r3, [pc, #196]	; (800b304 <xPortStartScheduler+0x134>)
 800b240:	2207      	movs	r2, #7
 800b242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b244:	e009      	b.n	800b25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b246:	4b2f      	ldr	r3, [pc, #188]	; (800b304 <xPortStartScheduler+0x134>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	4a2d      	ldr	r2, [pc, #180]	; (800b304 <xPortStartScheduler+0x134>)
 800b24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d0ef      	beq.n	800b246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b266:	4b27      	ldr	r3, [pc, #156]	; (800b304 <xPortStartScheduler+0x134>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f1c3 0307 	rsb	r3, r3, #7
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d00a      	beq.n	800b288 <xPortStartScheduler+0xb8>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <xPortStartScheduler+0x134>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <xPortStartScheduler+0x134>)
 800b290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <xPortStartScheduler+0x134>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b29a:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <xPortStartScheduler+0x134>)
 800b29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <xPortStartScheduler+0x138>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <xPortStartScheduler+0x138>)
 800b2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a14      	ldr	r2, [pc, #80]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2be:	f000 f8dd 	bl	800b47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <xPortStartScheduler+0x13c>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2c8:	f000 f8fc 	bl	800b4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <xPortStartScheduler+0x140>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <xPortStartScheduler+0x140>)
 800b2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2d8:	f7ff ff66 	bl	800b1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2dc:	f7ff fb9e 	bl	800aa1c <vTaskSwitchContext>
	prvTaskExitError();
 800b2e0:	f7ff ff20 	bl	800b124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000ed00 	.word	0xe000ed00
 800b2f4:	410fc271 	.word	0x410fc271
 800b2f8:	410fc270 	.word	0x410fc270
 800b2fc:	e000e400 	.word	0xe000e400
 800b300:	200009d0 	.word	0x200009d0
 800b304:	200009d4 	.word	0x200009d4
 800b308:	e000ed20 	.word	0xe000ed20
 800b30c:	2000004c 	.word	0x2000004c
 800b310:	e000ef34 	.word	0xe000ef34

0800b314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	607b      	str	r3, [r7, #4]
}
 800b32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <vPortEnterCritical+0x58>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a0d      	ldr	r2, [pc, #52]	; (800b36c <vPortEnterCritical+0x58>)
 800b336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <vPortEnterCritical+0x58>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10f      	bne.n	800b360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vPortEnterCritical+0x5c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <vPortEnterCritical+0x4c>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	603b      	str	r3, [r7, #0]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vPortEnterCritical+0x4a>
	}
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	2000004c 	.word	0x2000004c
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b37a:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <vPortExitCritical+0x50>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <vPortExitCritical+0x24>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	607b      	str	r3, [r7, #4]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortExitCritical+0x50>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <vPortExitCritical+0x42>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f383 8811 	msr	BASEPRI, r3
}
 800b3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	2000004c 	.word	0x2000004c
	...

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7ff fb0c 	bl	800aa1c <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b452:	f7ff fa2b 	bl	800a8ac <xTaskIncrementTick>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <SysTick_Handler+0x40>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f383 8811 	msr	BASEPRI, r3
}
 800b46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <vPortSetupTimerInterrupt+0x38>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <vPortSetupTimerInterrupt+0x3c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <vPortSetupTimerInterrupt+0x40>)
 800b492:	fba2 2303 	umull	r2, r3, r2, r3
 800b496:	099b      	lsrs	r3, r3, #6
 800b498:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <vPortSetupTimerInterrupt+0x44>)
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	e000e010 	.word	0xe000e010
 800b4b4:	e000e018 	.word	0xe000e018
 800b4b8:	20000040 	.word	0x20000040
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4d4 <vPortEnableVFP+0x10>
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4d2:	bf00      	nop
 800b4d4:	e000ed88 	.word	0xe000ed88

0800b4d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4e4:	f7ff f928 	bl	800a738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4e8:	4b5b      	ldr	r3, [pc, #364]	; (800b658 <pvPortMalloc+0x180>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4f0:	f000 f920 	bl	800b734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4f4:	4b59      	ldr	r3, [pc, #356]	; (800b65c <pvPortMalloc+0x184>)
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f040 8093 	bne.w	800b628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d01d      	beq.n	800b544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b508:	2208      	movs	r2, #8
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4413      	add	r3, r2
 800b50e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	2b00      	cmp	r3, #0
 800b518:	d014      	beq.n	800b544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f023 0307 	bic.w	r3, r3, #7
 800b520:	3308      	adds	r3, #8
 800b522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <pvPortMalloc+0x6c>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	617b      	str	r3, [r7, #20]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d06e      	beq.n	800b628 <pvPortMalloc+0x150>
 800b54a:	4b45      	ldr	r3, [pc, #276]	; (800b660 <pvPortMalloc+0x188>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d869      	bhi.n	800b628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b554:	4b43      	ldr	r3, [pc, #268]	; (800b664 <pvPortMalloc+0x18c>)
 800b556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b558:	4b42      	ldr	r3, [pc, #264]	; (800b664 <pvPortMalloc+0x18c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b55e:	e004      	b.n	800b56a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	429a      	cmp	r2, r3
 800b572:	d903      	bls.n	800b57c <pvPortMalloc+0xa4>
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1f1      	bne.n	800b560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b57c:	4b36      	ldr	r3, [pc, #216]	; (800b658 <pvPortMalloc+0x180>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b582:	429a      	cmp	r2, r3
 800b584:	d050      	beq.n	800b628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2208      	movs	r2, #8
 800b58c:	4413      	add	r3, r2
 800b58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d91f      	bls.n	800b5e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	f003 0307 	and.w	r3, r3, #7
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	613b      	str	r3, [r7, #16]
}
 800b5cc:	bf00      	nop
 800b5ce:	e7fe      	b.n	800b5ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	1ad2      	subs	r2, r2, r3
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5e2:	69b8      	ldr	r0, [r7, #24]
 800b5e4:	f000 f908 	bl	800b7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <pvPortMalloc+0x188>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	4a1b      	ldr	r2, [pc, #108]	; (800b660 <pvPortMalloc+0x188>)
 800b5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <pvPortMalloc+0x188>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	4b1b      	ldr	r3, [pc, #108]	; (800b668 <pvPortMalloc+0x190>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d203      	bcs.n	800b60a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b602:	4b17      	ldr	r3, [pc, #92]	; (800b660 <pvPortMalloc+0x188>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a18      	ldr	r2, [pc, #96]	; (800b668 <pvPortMalloc+0x190>)
 800b608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <pvPortMalloc+0x184>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	431a      	orrs	r2, r3
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b61e:	4b13      	ldr	r3, [pc, #76]	; (800b66c <pvPortMalloc+0x194>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3301      	adds	r3, #1
 800b624:	4a11      	ldr	r2, [pc, #68]	; (800b66c <pvPortMalloc+0x194>)
 800b626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b628:	f7ff f894 	bl	800a754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <pvPortMalloc+0x174>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60fb      	str	r3, [r7, #12]
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <pvPortMalloc+0x172>
	return pvReturn;
 800b64c:	69fb      	ldr	r3, [r7, #28]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3728      	adds	r7, #40	; 0x28
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	200103e0 	.word	0x200103e0
 800b65c:	200103f4 	.word	0x200103f4
 800b660:	200103e4 	.word	0x200103e4
 800b664:	200103d8 	.word	0x200103d8
 800b668:	200103e8 	.word	0x200103e8
 800b66c:	200103ec 	.word	0x200103ec

0800b670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d04d      	beq.n	800b71e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b682:	2308      	movs	r3, #8
 800b684:	425b      	negs	r3, r3
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4413      	add	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	4b24      	ldr	r3, [pc, #144]	; (800b728 <vPortFree+0xb8>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4013      	ands	r3, r2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <vPortFree+0x44>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	60fb      	str	r3, [r7, #12]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <vPortFree+0x62>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	60bb      	str	r3, [r7, #8]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	4b14      	ldr	r3, [pc, #80]	; (800b728 <vPortFree+0xb8>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4013      	ands	r3, r2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01e      	beq.n	800b71e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d11a      	bne.n	800b71e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	4b0e      	ldr	r3, [pc, #56]	; (800b728 <vPortFree+0xb8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	43db      	mvns	r3, r3
 800b6f2:	401a      	ands	r2, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6f8:	f7ff f81e 	bl	800a738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <vPortFree+0xbc>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4413      	add	r3, r2
 800b706:	4a09      	ldr	r2, [pc, #36]	; (800b72c <vPortFree+0xbc>)
 800b708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b70a:	6938      	ldr	r0, [r7, #16]
 800b70c:	f000 f874 	bl	800b7f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <vPortFree+0xc0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3301      	adds	r3, #1
 800b716:	4a06      	ldr	r2, [pc, #24]	; (800b730 <vPortFree+0xc0>)
 800b718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b71a:	f7ff f81b 	bl	800a754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b71e:	bf00      	nop
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200103f4 	.word	0x200103f4
 800b72c:	200103e4 	.word	0x200103e4
 800b730:	200103f0 	.word	0x200103f0

0800b734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b73a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b740:	4b27      	ldr	r3, [pc, #156]	; (800b7e0 <prvHeapInit+0xac>)
 800b742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00c      	beq.n	800b768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3307      	adds	r3, #7
 800b752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f023 0307 	bic.w	r3, r3, #7
 800b75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	4a1f      	ldr	r2, [pc, #124]	; (800b7e0 <prvHeapInit+0xac>)
 800b764:	4413      	add	r3, r2
 800b766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b76c:	4a1d      	ldr	r2, [pc, #116]	; (800b7e4 <prvHeapInit+0xb0>)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b772:	4b1c      	ldr	r3, [pc, #112]	; (800b7e4 <prvHeapInit+0xb0>)
 800b774:	2200      	movs	r2, #0
 800b776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4413      	add	r3, r2
 800b77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b780:	2208      	movs	r2, #8
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	1a9b      	subs	r3, r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0307 	bic.w	r3, r3, #7
 800b78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <prvHeapInit+0xb4>)
 800b794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <prvHeapInit+0xb4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2200      	movs	r2, #0
 800b79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b79e:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <prvHeapInit+0xb4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7b4:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <prvHeapInit+0xb4>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	4a0a      	ldr	r2, [pc, #40]	; (800b7ec <prvHeapInit+0xb8>)
 800b7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <prvHeapInit+0xbc>)
 800b7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7cc:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <prvHeapInit+0xc0>)
 800b7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7d2:	601a      	str	r2, [r3, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	200009d8 	.word	0x200009d8
 800b7e4:	200103d8 	.word	0x200103d8
 800b7e8:	200103e0 	.word	0x200103e0
 800b7ec:	200103e8 	.word	0x200103e8
 800b7f0:	200103e4 	.word	0x200103e4
 800b7f4:	200103f4 	.word	0x200103f4

0800b7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b800:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <prvInsertBlockIntoFreeList+0xac>)
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	e002      	b.n	800b80c <prvInsertBlockIntoFreeList+0x14>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d8f7      	bhi.n	800b806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4413      	add	r3, r2
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	429a      	cmp	r2, r3
 800b826:	d108      	bne.n	800b83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	441a      	add	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	441a      	add	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d118      	bne.n	800b880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d00d      	beq.n	800b876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	441a      	add	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	601a      	str	r2, [r3, #0]
 800b874:	e008      	b.n	800b888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b876:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e003      	b.n	800b888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d002      	beq.n	800b896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	200103d8 	.word	0x200103d8
 800b8a8:	200103e0 	.word	0x200103e0

0800b8ac <__libc_init_array>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	4d0d      	ldr	r5, [pc, #52]	; (800b8e4 <__libc_init_array+0x38>)
 800b8b0:	4c0d      	ldr	r4, [pc, #52]	; (800b8e8 <__libc_init_array+0x3c>)
 800b8b2:	1b64      	subs	r4, r4, r5
 800b8b4:	10a4      	asrs	r4, r4, #2
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	42a6      	cmp	r6, r4
 800b8ba:	d109      	bne.n	800b8d0 <__libc_init_array+0x24>
 800b8bc:	4d0b      	ldr	r5, [pc, #44]	; (800b8ec <__libc_init_array+0x40>)
 800b8be:	4c0c      	ldr	r4, [pc, #48]	; (800b8f0 <__libc_init_array+0x44>)
 800b8c0:	f000 f8f0 	bl	800baa4 <_init>
 800b8c4:	1b64      	subs	r4, r4, r5
 800b8c6:	10a4      	asrs	r4, r4, #2
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	42a6      	cmp	r6, r4
 800b8cc:	d105      	bne.n	800b8da <__libc_init_array+0x2e>
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d4:	4798      	blx	r3
 800b8d6:	3601      	adds	r6, #1
 800b8d8:	e7ee      	b.n	800b8b8 <__libc_init_array+0xc>
 800b8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8de:	4798      	blx	r3
 800b8e0:	3601      	adds	r6, #1
 800b8e2:	e7f2      	b.n	800b8ca <__libc_init_array+0x1e>
 800b8e4:	0800be10 	.word	0x0800be10
 800b8e8:	0800be10 	.word	0x0800be10
 800b8ec:	0800be10 	.word	0x0800be10
 800b8f0:	0800be14 	.word	0x0800be14

0800b8f4 <memcpy>:
 800b8f4:	440a      	add	r2, r1
 800b8f6:	4291      	cmp	r1, r2
 800b8f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8fc:	d100      	bne.n	800b900 <memcpy+0xc>
 800b8fe:	4770      	bx	lr
 800b900:	b510      	push	{r4, lr}
 800b902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b90a:	4291      	cmp	r1, r2
 800b90c:	d1f9      	bne.n	800b902 <memcpy+0xe>
 800b90e:	bd10      	pop	{r4, pc}

0800b910 <memset>:
 800b910:	4402      	add	r2, r0
 800b912:	4603      	mov	r3, r0
 800b914:	4293      	cmp	r3, r2
 800b916:	d100      	bne.n	800b91a <memset+0xa>
 800b918:	4770      	bx	lr
 800b91a:	f803 1b01 	strb.w	r1, [r3], #1
 800b91e:	e7f9      	b.n	800b914 <memset+0x4>

0800b920 <_free_r>:
 800b920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b922:	2900      	cmp	r1, #0
 800b924:	d044      	beq.n	800b9b0 <_free_r+0x90>
 800b926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92a:	9001      	str	r0, [sp, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f1a1 0404 	sub.w	r4, r1, #4
 800b932:	bfb8      	it	lt
 800b934:	18e4      	addlt	r4, r4, r3
 800b936:	f000 f8a9 	bl	800ba8c <__malloc_lock>
 800b93a:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <_free_r+0x94>)
 800b93c:	9801      	ldr	r0, [sp, #4]
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	b933      	cbnz	r3, 800b950 <_free_r+0x30>
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6014      	str	r4, [r2, #0]
 800b946:	b003      	add	sp, #12
 800b948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b94c:	f000 b8a4 	b.w	800ba98 <__malloc_unlock>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d908      	bls.n	800b966 <_free_r+0x46>
 800b954:	6825      	ldr	r5, [r4, #0]
 800b956:	1961      	adds	r1, r4, r5
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf01      	itttt	eq
 800b95c:	6819      	ldreq	r1, [r3, #0]
 800b95e:	685b      	ldreq	r3, [r3, #4]
 800b960:	1949      	addeq	r1, r1, r5
 800b962:	6021      	streq	r1, [r4, #0]
 800b964:	e7ed      	b.n	800b942 <_free_r+0x22>
 800b966:	461a      	mov	r2, r3
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	b10b      	cbz	r3, 800b970 <_free_r+0x50>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d9fa      	bls.n	800b966 <_free_r+0x46>
 800b970:	6811      	ldr	r1, [r2, #0]
 800b972:	1855      	adds	r5, r2, r1
 800b974:	42a5      	cmp	r5, r4
 800b976:	d10b      	bne.n	800b990 <_free_r+0x70>
 800b978:	6824      	ldr	r4, [r4, #0]
 800b97a:	4421      	add	r1, r4
 800b97c:	1854      	adds	r4, r2, r1
 800b97e:	42a3      	cmp	r3, r4
 800b980:	6011      	str	r1, [r2, #0]
 800b982:	d1e0      	bne.n	800b946 <_free_r+0x26>
 800b984:	681c      	ldr	r4, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	6053      	str	r3, [r2, #4]
 800b98a:	4421      	add	r1, r4
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	e7da      	b.n	800b946 <_free_r+0x26>
 800b990:	d902      	bls.n	800b998 <_free_r+0x78>
 800b992:	230c      	movs	r3, #12
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	e7d6      	b.n	800b946 <_free_r+0x26>
 800b998:	6825      	ldr	r5, [r4, #0]
 800b99a:	1961      	adds	r1, r4, r5
 800b99c:	428b      	cmp	r3, r1
 800b99e:	bf04      	itt	eq
 800b9a0:	6819      	ldreq	r1, [r3, #0]
 800b9a2:	685b      	ldreq	r3, [r3, #4]
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	bf04      	itt	eq
 800b9a8:	1949      	addeq	r1, r1, r5
 800b9aa:	6021      	streq	r1, [r4, #0]
 800b9ac:	6054      	str	r4, [r2, #4]
 800b9ae:	e7ca      	b.n	800b946 <_free_r+0x26>
 800b9b0:	b003      	add	sp, #12
 800b9b2:	bd30      	pop	{r4, r5, pc}
 800b9b4:	200103f8 	.word	0x200103f8

0800b9b8 <cleanup_glue>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	6809      	ldr	r1, [r1, #0]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b109      	cbz	r1, 800b9c6 <cleanup_glue+0xe>
 800b9c2:	f7ff fff9 	bl	800b9b8 <cleanup_glue>
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ce:	f7ff bfa7 	b.w	800b920 <_free_r>
	...

0800b9d4 <_reclaim_reent>:
 800b9d4:	4b2c      	ldr	r3, [pc, #176]	; (800ba88 <_reclaim_reent+0xb4>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4283      	cmp	r3, r0
 800b9da:	b570      	push	{r4, r5, r6, lr}
 800b9dc:	4604      	mov	r4, r0
 800b9de:	d051      	beq.n	800ba84 <_reclaim_reent+0xb0>
 800b9e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b9e2:	b143      	cbz	r3, 800b9f6 <_reclaim_reent+0x22>
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d14a      	bne.n	800ba80 <_reclaim_reent+0xac>
 800b9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ec:	6819      	ldr	r1, [r3, #0]
 800b9ee:	b111      	cbz	r1, 800b9f6 <_reclaim_reent+0x22>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff ff95 	bl	800b920 <_free_r>
 800b9f6:	6961      	ldr	r1, [r4, #20]
 800b9f8:	b111      	cbz	r1, 800ba00 <_reclaim_reent+0x2c>
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f7ff ff90 	bl	800b920 <_free_r>
 800ba00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ba02:	b111      	cbz	r1, 800ba0a <_reclaim_reent+0x36>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7ff ff8b 	bl	800b920 <_free_r>
 800ba0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba0c:	b111      	cbz	r1, 800ba14 <_reclaim_reent+0x40>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f7ff ff86 	bl	800b920 <_free_r>
 800ba14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ba16:	b111      	cbz	r1, 800ba1e <_reclaim_reent+0x4a>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f7ff ff81 	bl	800b920 <_free_r>
 800ba1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ba20:	b111      	cbz	r1, 800ba28 <_reclaim_reent+0x54>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff ff7c 	bl	800b920 <_free_r>
 800ba28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ba2a:	b111      	cbz	r1, 800ba32 <_reclaim_reent+0x5e>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff ff77 	bl	800b920 <_free_r>
 800ba32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ba34:	b111      	cbz	r1, 800ba3c <_reclaim_reent+0x68>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7ff ff72 	bl	800b920 <_free_r>
 800ba3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba3e:	b111      	cbz	r1, 800ba46 <_reclaim_reent+0x72>
 800ba40:	4620      	mov	r0, r4
 800ba42:	f7ff ff6d 	bl	800b920 <_free_r>
 800ba46:	69a3      	ldr	r3, [r4, #24]
 800ba48:	b1e3      	cbz	r3, 800ba84 <_reclaim_reent+0xb0>
 800ba4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4798      	blx	r3
 800ba50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba52:	b1b9      	cbz	r1, 800ba84 <_reclaim_reent+0xb0>
 800ba54:	4620      	mov	r0, r4
 800ba56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba5a:	f7ff bfad 	b.w	800b9b8 <cleanup_glue>
 800ba5e:	5949      	ldr	r1, [r1, r5]
 800ba60:	b941      	cbnz	r1, 800ba74 <_reclaim_reent+0xa0>
 800ba62:	3504      	adds	r5, #4
 800ba64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba66:	2d80      	cmp	r5, #128	; 0x80
 800ba68:	68d9      	ldr	r1, [r3, #12]
 800ba6a:	d1f8      	bne.n	800ba5e <_reclaim_reent+0x8a>
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7ff ff57 	bl	800b920 <_free_r>
 800ba72:	e7ba      	b.n	800b9ea <_reclaim_reent+0x16>
 800ba74:	680e      	ldr	r6, [r1, #0]
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7ff ff52 	bl	800b920 <_free_r>
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	e7ef      	b.n	800ba60 <_reclaim_reent+0x8c>
 800ba80:	2500      	movs	r5, #0
 800ba82:	e7ef      	b.n	800ba64 <_reclaim_reent+0x90>
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	bf00      	nop
 800ba88:	20000050 	.word	0x20000050

0800ba8c <__malloc_lock>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	; (800ba94 <__malloc_lock+0x8>)
 800ba8e:	f7f7 b8ee 	b.w	8002c6e <__retarget_lock_acquire_recursive>
 800ba92:	bf00      	nop
 800ba94:	20000894 	.word	0x20000894

0800ba98 <__malloc_unlock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	; (800baa0 <__malloc_unlock+0x8>)
 800ba9a:	f7f7 b8fc 	b.w	8002c96 <__retarget_lock_release_recursive>
 800ba9e:	bf00      	nop
 800baa0:	20000894 	.word	0x20000894

0800baa4 <_init>:
 800baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa6:	bf00      	nop
 800baa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baaa:	bc08      	pop	{r3}
 800baac:	469e      	mov	lr, r3
 800baae:	4770      	bx	lr

0800bab0 <_fini>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	bf00      	nop
 800bab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab6:	bc08      	pop	{r3}
 800bab8:	469e      	mov	lr, r3
 800baba:	4770      	bx	lr
